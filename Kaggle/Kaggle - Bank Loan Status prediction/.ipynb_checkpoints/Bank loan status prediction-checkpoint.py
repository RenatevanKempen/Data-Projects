{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![BAIME banner](https://user-images.githubusercontent.com/47600826/89530907-9b3f6480-d7ef-11ea-9849-27617f6025cf.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bank Loan Status Prediction\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "execution_event_id": "0004e4a6-250d-4cb9-a460-1f6ff12c8c4a",
    "last_executed_text": "![lening](https://www.mymoneymantra.com/blog/wp-content/uploads/2018/06/Heres-Why-Banks-are-Offering-Personal-Loans-at-Competitive-Interest-Rates.jpg)",
    "persistent_id": "41f07953-bdf1-412b-99de-cf6b2b9be038"
   },
   "source": [
    "![lening](https://www.mymoneymantra.com/blog/wp-content/uploads/2018/06/Heres-Why-Banks-are-Offering-Personal-Loans-at-Competitive-Interest-Rates.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The problem\n",
    "In this notebook we look at the data we got via this [Kaggle competition](https://www.kaggle.com/zaurbegiev/my-dataset). \n",
    "\n",
    "We will see if we can predict whether or not the bank will approve the loan based on certain information. \n",
    "\n",
    "We will explore the dataset given, check the various features we have and we will make an algorithm that can predict whether or not the loan would be approved."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the important libraries / packages\n",
    "These packages are needed to load and use the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution_event_id": "b54b2f9c-7112-412f-b815-0905fd6ebedd",
    "last_executed_text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots\nimport sklearn.metrics as sklm #This is to test the models",
    "persistent_id": "345f9805-89cc-453b-8133-3e9654f131c1"
   },
   "outputs": [],
   "source": [
    "import pandas as pd #we use this to load, read and transform the dataset\n",
    "import numpy as np #we use this for statistical analysis\n",
    "import matplotlib.pyplot as plt #we use this to visualize the dataset\n",
    "import seaborn as sns #we use this to make countplots\n",
    "import sklearn.metrics as sklm #This is to test the models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load and explore the dataset\n",
    "We've gotten a train and a test dataset. In this next step I will first load the train data set to see how this looks like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution_event_id": "df399486-302f-4217-8878-4d9d5c4d10ca",
    "last_executed_text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()",
    "persistent_id": "d498c45b-aabb-4b81-96b4-449a04b50d3a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LP001002</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001002   Male      No          0      Graduate            No   \n",
       "1  LP001003   Male     Yes          1      Graduate            No   \n",
       "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "4  LP001008   Male      No          0      Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             5849                0.0         NaN             360.0   \n",
       "1             4583             1508.0       128.0             360.0   \n",
       "2             3000                0.0        66.0             360.0   \n",
       "3             2583             2358.0       120.0             360.0   \n",
       "4             6000                0.0       141.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status  \n",
       "0             1.0         Urban           Y  \n",
       "1             1.0         Rural           N  \n",
       "2             1.0         Urban           Y  \n",
       "3             1.0         Urban           Y  \n",
       "4             1.0         Urban           Y  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#here we load the train data\n",
    "data = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n",
    "\n",
    "#and immediately I would like to see how this dataset looks like\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution_event_id": "b07107e9-3e37-46dc-ba53-689781402cdc",
    "last_executed_text": "#now let's look closer at the dataset we got\ndata.info()",
    "persistent_id": "b82ab890-3391-4629-b3fc-a726a5f4a55d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 614 entries, 0 to 613\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Loan_ID            614 non-null    object \n",
      " 1   Gender             601 non-null    object \n",
      " 2   Married            611 non-null    object \n",
      " 3   Dependents         599 non-null    object \n",
      " 4   Education          614 non-null    object \n",
      " 5   Self_Employed      582 non-null    object \n",
      " 6   ApplicantIncome    614 non-null    int64  \n",
      " 7   CoapplicantIncome  614 non-null    float64\n",
      " 8   LoanAmount         592 non-null    float64\n",
      " 9   Loan_Amount_Term   600 non-null    float64\n",
      " 10  Credit_History     564 non-null    float64\n",
      " 11  Property_Area      614 non-null    object \n",
      " 12  Loan_Status        614 non-null    object \n",
      "dtypes: float64(4), int64(1), object(8)\n",
      "memory usage: 62.5+ KB\n"
     ]
    }
   ],
   "source": [
    "#now let's look closer at the dataset we got\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "execution_event_id": "b4ea66fa-412d-4ce0-adc9-ecf30355acf9",
    "last_executed_text": "data.describe()",
    "persistent_id": "1db7dc05-5f95-4ce1-af3d-98a0cce98675"
   },
   "source": [
    "It seems that we have a lot of text / category information (these are of the Dtype 'object') and a few numerical columns (Dtypes 'int64' and 'float64'). \n",
    "\n",
    "The last column 'Loan_status' is the column we would like to predict. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution_event_id": "41f377e6-b7ac-4f3d-851c-9f34d617926d",
    "last_executed_text": "data.shape",
    "persistent_id": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(614, 13)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "a9e753e1-c28e-4a41-bb21-d837793ecf21"
   },
   "source": [
    "The dataset consists of 614 rows and 13 columns. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution_event_id": "68758439-f5fa-40ed-9b54-3a3e7eeec732",
    "last_executed_text": "data.describe()",
    "persistent_id": "041b303f-3a03-4e2f-9c0f-531c960294e7"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>614.000000</td>\n",
       "      <td>614.000000</td>\n",
       "      <td>592.000000</td>\n",
       "      <td>600.00000</td>\n",
       "      <td>564.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5403.459283</td>\n",
       "      <td>1621.245798</td>\n",
       "      <td>146.412162</td>\n",
       "      <td>342.00000</td>\n",
       "      <td>0.842199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6109.041673</td>\n",
       "      <td>2926.248369</td>\n",
       "      <td>85.587325</td>\n",
       "      <td>65.12041</td>\n",
       "      <td>0.364878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>12.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2877.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>360.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3812.500000</td>\n",
       "      <td>1188.500000</td>\n",
       "      <td>128.000000</td>\n",
       "      <td>360.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5795.000000</td>\n",
       "      <td>2297.250000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>360.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>81000.000000</td>\n",
       "      <td>41667.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>480.00000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "count       614.000000         614.000000  592.000000         600.00000   \n",
       "mean       5403.459283        1621.245798  146.412162         342.00000   \n",
       "std        6109.041673        2926.248369   85.587325          65.12041   \n",
       "min         150.000000           0.000000    9.000000          12.00000   \n",
       "25%        2877.500000           0.000000  100.000000         360.00000   \n",
       "50%        3812.500000        1188.500000  128.000000         360.00000   \n",
       "75%        5795.000000        2297.250000  168.000000         360.00000   \n",
       "max       81000.000000       41667.000000  700.000000         480.00000   \n",
       "\n",
       "       Credit_History  \n",
       "count      564.000000  \n",
       "mean         0.842199  \n",
       "std          0.364878  \n",
       "min          0.000000  \n",
       "25%          1.000000  \n",
       "50%          1.000000  \n",
       "75%          1.000000  \n",
       "max          1.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that we have some strange outliers for the income and loan amounts. We will look and handle these later on. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution_event_id": "3124bb7e-e33c-4fc1-98d9-5a2a288d93df",
    "last_executed_text": "data.describe(include='O')",
    "persistent_id": "baf1bab0-09ea-493f-9112-cb067913ded9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>614</td>\n",
       "      <td>601</td>\n",
       "      <td>611</td>\n",
       "      <td>599</td>\n",
       "      <td>614</td>\n",
       "      <td>582</td>\n",
       "      <td>614</td>\n",
       "      <td>614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>614</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>LP002840</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>Semiurban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>489</td>\n",
       "      <td>398</td>\n",
       "      <td>345</td>\n",
       "      <td>480</td>\n",
       "      <td>500</td>\n",
       "      <td>233</td>\n",
       "      <td>422</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Loan_ID Gender Married Dependents Education Self_Employed  \\\n",
       "count        614    601     611        599       614           582   \n",
       "unique       614      2       2          4         2             2   \n",
       "top     LP002840   Male     Yes          0  Graduate            No   \n",
       "freq           1    489     398        345       480           500   \n",
       "\n",
       "       Property_Area Loan_Status  \n",
       "count            614         614  \n",
       "unique             3           2  \n",
       "top        Semiurban           Y  \n",
       "freq             233         422  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe(include='O')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution_event_id": "d8daa074-c730-4fd9-b257-856a25651866",
    "last_executed_text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))",
    "persistent_id": "492dfd63-dbbf-4331-b138-144b49b5aab2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender: ['Male' 'Female' nan]\n",
      "Married: ['No' 'Yes' nan]\n",
      "Dependents: ['0' '1' '2' '3+' nan]\n",
      "Education: ['Graduate' 'Not Graduate']\n",
      "Self_Employed: ['No' 'Yes' nan]\n",
      "Property_Area: ['Urban' 'Rural' 'Semiurban']\n"
     ]
    }
   ],
   "source": [
    "#Let's see what the options are in the text columns (the objects)\n",
    "print('Gender: ' + str(data['Gender'].unique()))\n",
    "print('Married: ' + str(data['Married'].unique()))\n",
    "print('Dependents: '+ str(data['Dependents'].unique()))\n",
    "print('Education: '+ str(data['Education'].unique()))\n",
    "print('Self_Employed: '+ str(data['Self_Employed'].unique()))\n",
    "print('Property_Area: '+ str(data['Property_Area'].unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seems there are more categorical (binary) columns, such as Gender, Married, "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "11e49978-82c3-4489-a174-6a9058a20bcf"
   },
   "source": [
    "### Loan Status in this Dataset\n",
    "\n",
    "![approved or rejected](https://db3pap006files.storage.live.com/y4pVnKKIPUMfGtdOP-mIsJIDFD6QD9mNmC5br03t9oSX6uCFHlSgyrzOKvkBvemfQbgGRltJXJI1DygwGgxBzszvmqoQtfMhbsE_Ajl8VAnNDIy3BIOXRlTJAB3jdnZYTPtQFmMkHmo74vxcBUc_JjX1kW47Rp33UKov0MllAFFuPU-lzJypcr-s05Yv1bCIpcC9bwZsareXmkMCxxmCZBS67Ya2zrP2Ac3z3F0enmC6qo/stamp-2114884_1920.png?psid=1&width=192&height=65)\n",
    "\n",
    "As Loan Status is the column we want to predict, let's explore this column in the training dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution_event_id": "86661023-728e-4698-90b7-decf13882cbb",
    "last_executed_text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')",
    "persistent_id": "d9677475-c497-4010-9af5-02393de9ce44"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#first let's count the number of loans approved and rejected\n",
    "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\n",
    "Rejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n",
    "\n",
    "#now let's put these results in a dataframe to visualize them\n",
    "df = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\n",
    "Status = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n",
    "\n",
    "#let's visualize the bar plot\n",
    "ax = Status.plot(kind = 'bar', title = 'Status of the loans')\n",
    "\n",
    "#here I want to add the labels to the bars and to make this more clear I've made them white of color\n",
    "for p in ax.patches:\n",
    "    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution_event_id": "eb06550c-dd1d-4763-8a40-70f22bc1ca1d",
    "last_executed_text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))",
    "persistent_id": "cfca36b8-b3c0-41f3-9172-97cf85896b3e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percentage of approved loans : 0.69\n",
      "The percentage of rejected loans : 0.31\n"
     ]
    }
   ],
   "source": [
    "#let's see the percentages of the status:\n",
    "print('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\n",
    "print('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "f0c36dfe-1b54-40b2-8c8e-54fdda41fc6e"
   },
   "source": [
    "It looks like this is not well balanced in this set.\n",
    "But as this is the only data we have, I will leave this as is for now. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Handling missing values\n",
    "Let's continue with handling the missing values in this dataset. \n",
    "Let's see where and how many missing values there are in this dataset.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution_event_id": "0356e762-e306-475d-85ac-d616f3a7db5c",
    "last_executed_text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)",
    "persistent_id": "e850bf25-ee93-4224-8b5e-dd738a273e25"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Credit_History       50\n",
       "Self_Employed        32\n",
       "LoanAmount           22\n",
       "Dependents           15\n",
       "Loan_Amount_Term     14\n",
       "Gender               13\n",
       "Married               3\n",
       "Loan_Status           0\n",
       "Property_Area         0\n",
       "CoapplicantIncome     0\n",
       "ApplicantIncome       0\n",
       "Education             0\n",
       "Loan_ID               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#let's look in what columns there are missing values \n",
    "data.isnull().sum().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "8150e0d6-e45b-46a6-875c-b0c97f5c0e8c"
   },
   "source": [
    "I will only look at the top 3 here (as these have the most missing values) and drop the other missing value rows. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution_event_id": "ebcaa066-2f9f-4d52-a94a-bbe2227fe8cd",
    "last_executed_text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])",
    "persistent_id": "a8dd40ec-b910-47cb-8a19-b08b40cab623"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12f65932710>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n",
    "#I will use seaborn for the visualization\n",
    "sns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like a good feature to use, so let's look deeper!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution_event_id": "b89ac73e-5979-439c-9471-47b81e9f9714",
    "last_executed_text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))",
    "persistent_id": "f3bb785b-22f1-4187-8c85-4c3d6be1be41"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loan_Status      N    Y\n",
      "Credit_History         \n",
      "0.0             82    7\n",
      "1.0             97  378\n"
     ]
    }
   ],
   "source": [
    "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution_event_id": "33fd2b19-9a23-4781-8d9d-407941f48268",
    "last_executed_text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))",
    "persistent_id": "7e18edbb-caca-4dd1-a941-50e65261da22"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percentage of credit history yes : 0.77\n",
      "The percentage of credit history no : 0.14\n"
     ]
    }
   ],
   "source": [
    "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\n",
    "print('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "execution_event_id": "0ad943a2-9d30-4c7d-a654-9e862104469e",
    "last_executed_text": "#Seems that if you have a credit history, it is more likely to get the loan approved. \ngrid = sns.FacetGrid(data,col='Loan_Status', size=3.2, aspect=1.6)\ngrid.map(sns.countplot, 'Credit_History');",
    "persistent_id": "14fc58e3-32e3-4c49-9a20-e070d3074651"
   },
   "source": [
    "Seems that if you have a credit history, it is more likely to get the loan approved. \n",
    "\n",
    "Options in handling these missing values:\n",
    "- Drop all the rows with missing values\n",
    "- Handle the missing values with 0 (so no history) as there is nothing clear. \n",
    "- Or we use the most frequent number, which is 1 for the credit history. \n",
    "\n",
    "In this case, I tend to go for the most frequent number, as this is 86% of the dataset, so most likely to be true.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution_event_id": "ae01b41b-251b-4d74-9fe7-2a543f068143",
    "last_executed_text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)",
    "persistent_id": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Self_Employed        32\n",
       "LoanAmount           22\n",
       "Dependents           15\n",
       "Loan_Amount_Term     14\n",
       "Gender               13\n",
       "Married               3\n",
       "Loan_Status           0\n",
       "Property_Area         0\n",
       "Credit_History        0\n",
       "CoapplicantIncome     0\n",
       "ApplicantIncome       0\n",
       "Education             0\n",
       "Loan_ID               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Credit_History'] = data['Credit_History'].fillna(1)\n",
    "data.isnull().sum().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution_event_id": "505bdc2c-17cc-4427-a53d-da4d23c8d669",
    "last_executed_text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])",
    "persistent_id": "d3cae382-031c-4d50-93e9-d0c661a60550"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12f659ec710>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Continue with Self_Employed\n",
    "sns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "13f1c159-564a-462f-8b46-b496b7a9a735"
   },
   "source": [
    "As this seems to have no effect on the outcome, I will fill these with the most frequent one (so No) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution_event_id": "154186ba-6087-43ea-94d7-1ca18e43fbe0",
    "last_executed_text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)",
    "persistent_id": "c0f9ba7f-6398-483f-ab00-c1caefba397a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LoanAmount           22\n",
       "Dependents           15\n",
       "Loan_Amount_Term     14\n",
       "Gender               13\n",
       "Married               3\n",
       "Loan_Status           0\n",
       "Property_Area         0\n",
       "Credit_History        0\n",
       "CoapplicantIncome     0\n",
       "ApplicantIncome       0\n",
       "Self_Employed         0\n",
       "Education             0\n",
       "Loan_ID               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Self_Employed'] = data['Self_Employed'].fillna('No')\n",
    "data.isnull().sum().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution_event_id": "f7480477-d33b-47b1-81a7-16e5272366f5",
    "last_executed_text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])",
    "persistent_id": "91787fc9-7a25-4b79-a00e-17aca9aebc4a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x12f65a93828>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \n",
    "plt.scatter(data['Loan_Status'], data['LoanAmount'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution_event_id": "8a7d1a32-679d-4913-8542-c455691ef777",
    "last_executed_text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)",
    "persistent_id": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dependents           15\n",
       "Loan_Amount_Term     14\n",
       "Gender               13\n",
       "Married               3\n",
       "Loan_Status           0\n",
       "Property_Area         0\n",
       "Credit_History        0\n",
       "LoanAmount            0\n",
       "CoapplicantIncome     0\n",
       "ApplicantIncome       0\n",
       "Self_Employed         0\n",
       "Education             0\n",
       "Loan_ID               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\n",
    "data['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\n",
    "data.isnull().sum().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution_event_id": "5d28939e-35bb-48f9-8d15-624b6de7fe0b",
    "last_executed_text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape",
    "persistent_id": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(573, 13)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Let's drop the rest of the missing values:\n",
    "data.dropna(inplace = True)\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Take a closer look at some of the features\n",
    "Let's  find out the most important features for the prediction of the status loan.\n",
    "Be aware, most loans were indeed approved. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution_event_id": "71c9ff7c-ff00-4c58-9d68-1fd6a43ee1b1",
    "last_executed_text": "#First I will make a boxplot for the ApplicantIncome.\nplt.boxplot(data['ApplicantIncome'])",
    "persistent_id": "b1d54d7f-a7ab-4c2a-b3e6-3afd5a93403e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x12f65b04470>,\n",
       "  <matplotlib.lines.Line2D at 0x12f65b04828>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x12f65b04b70>,\n",
       "  <matplotlib.lines.Line2D at 0x12f65b04eb8>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x12f65b04048>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x12f65b04f98>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x12f65b0c588>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#First I will make a boxplot for the ApplicantIncome.\n",
    "plt.boxplot(data['ApplicantIncome'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution_event_id": "0080c490-fba9-447f-85aa-8c2cd2782556",
    "last_executed_text": "#We see that there are two great outliers here. \n#let's look closer to these two outliers\noutliers = data[data['ApplicantIncome'] > 50000]\noutliers.head()",
    "persistent_id": "dc489f68-a1fe-40b3-a7b6-ec08e9ba2fd4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>333</th>\n",
       "      <td>LP002101</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>63337</td>\n",
       "      <td>0.0</td>\n",
       "      <td>490.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>LP002317</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3+</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>81000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n",
       "333  LP002101   Male     Yes          0  Graduate            No   \n",
       "409  LP002317   Male     Yes         3+  Graduate            No   \n",
       "\n",
       "     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "333            63337                0.0       490.0             180.0   \n",
       "409            81000                0.0       360.0             360.0   \n",
       "\n",
       "     Credit_History Property_Area Loan_Status  \n",
       "333             1.0         Urban           Y  \n",
       "409             0.0         Rural           N  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We see that there are two great outliers here. \n",
    "#let's look closer to these two outliers\n",
    "outliers = data[data['ApplicantIncome'] > 50000]\n",
    "outliers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution_event_id": "eee8ec4e-3157-4857-b5ed-e1aacd95a1d7",
    "last_executed_text": "#As you can see that these are just two rows and the status is not for both approved, I will remove these two rows for the model. \ndata = data[data['ApplicantIncome'] < 50000]\n#let's plot the applicant income again in a boxplot\nplt.boxplot(data['ApplicantIncome'])",
    "persistent_id": "40f36946-096f-4ca4-92cd-5a3ee8bbfdf1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x12f65b6d898>,\n",
       "  <matplotlib.lines.Line2D at 0x12f65b6dc50>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x12f65b6df98>,\n",
       "  <matplotlib.lines.Line2D at 0x12f65b6df28>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x12f65b6d4a8>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x12f65b7a668>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x12f65b7a9b0>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#As you can see that these are just two rows and the status is not for both approved, I will remove these two rows for the model. \n",
    "data = data[data['ApplicantIncome'] < 50000]\n",
    "#let's plot the applicant income again in a boxplot\n",
    "plt.boxplot(data['ApplicantIncome'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution_event_id": "a895fb9a-d780-49b7-bde1-f58a5ad87249",
    "last_executed_text": "#still a lot of outliers above the 25000. Let's look closer to those again to be sure we need to add them to get a good model performance\noutliers = data[data['ApplicantIncome'] > 25000]\noutliers.head()",
    "persistent_id": "aa5c7432-0afa-4d3b-b934-ecfb87b7701c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>LP001536</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3+</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>39999</td>\n",
       "      <td>0.0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Semiurban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>LP001637</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>33846</td>\n",
       "      <td>0.0</td>\n",
       "      <td>260.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Semiurban</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>LP001640</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>39147</td>\n",
       "      <td>4750.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Semiurban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>443</th>\n",
       "      <td>LP002422</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>37719</td>\n",
       "      <td>0.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Semiurban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n",
       "155  LP001536   Male     Yes         3+  Graduate            No   \n",
       "183  LP001637   Male     Yes          1  Graduate            No   \n",
       "185  LP001640   Male     Yes          0  Graduate           Yes   \n",
       "443  LP002422   Male      No          1  Graduate            No   \n",
       "\n",
       "     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "155            39999                0.0       600.0             180.0   \n",
       "183            33846                0.0       260.0             360.0   \n",
       "185            39147             4750.0       120.0             360.0   \n",
       "443            37719                0.0       152.0             360.0   \n",
       "\n",
       "     Credit_History Property_Area Loan_Status  \n",
       "155             0.0     Semiurban           Y  \n",
       "183             1.0     Semiurban           N  \n",
       "185             1.0     Semiurban           Y  \n",
       "443             1.0     Semiurban           Y  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#still a lot of outliers above the 25000. Let's look closer to those again to be sure we need to add them to get a good model performance\n",
    "outliers = data[data['ApplicantIncome'] > 25000]\n",
    "outliers.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "40d5e3ae-4e4a-4a30-9e3d-20bd498d8c4a"
   },
   "source": [
    "These seem to be ok for the model as 75% is approved. So let's keep them for now. \n",
    "\n",
    "### Make all columns numeric\n",
    "We need to make all column input numeric to use them further on. \n",
    "This is what I will do now. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution_event_id": "d4d8d623-5d2c-4de1-bf17-d186e0e8ee0d",
    "last_executed_text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)",
    "persistent_id": "4308fc72-3c28-48fc-b640-7277c9a3bbf4"
   },
   "outputs": [],
   "source": [
    "#First make the target column (Loan_Status) numerical\n",
    "data['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution_event_id": "0ba1d823-d127-4270-8912-38bd936dbe9a",
    "last_executed_text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()",
    "persistent_id": "51558ac5-844e-401a-86da-ac97cf610691"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 571 entries, 0 to 613\n",
      "Data columns (total 12 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Gender             571 non-null    object \n",
      " 1   Married            571 non-null    object \n",
      " 2   Dependents         571 non-null    object \n",
      " 3   Education          571 non-null    object \n",
      " 4   Self_Employed      571 non-null    object \n",
      " 5   ApplicantIncome    571 non-null    int64  \n",
      " 6   CoapplicantIncome  571 non-null    float64\n",
      " 7   LoanAmount         571 non-null    float64\n",
      " 8   Loan_Amount_Term   571 non-null    float64\n",
      " 9   Credit_History     571 non-null    float64\n",
      " 10  Property_Area      571 non-null    object \n",
      " 11  Loan_Status        571 non-null    int32  \n",
      "dtypes: float64(4), int32(1), int64(1), object(6)\n",
      "memory usage: 55.8+ KB\n"
     ]
    }
   ],
   "source": [
    "#Next we will drop the loan_ID column as this will only confuse the model later on\n",
    "data.drop('Loan_ID', axis=1, inplace=True)\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution_event_id": "736c1f62-4546-45c7-9a7c-ff0603738103",
    "last_executed_text": "#Next, make all other columns numerical as well. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1) #I saw that there was no big difference between the number of dependents if there are any. So I made no dependents = 0  and yes dependents = 1",
    "persistent_id": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707"
   },
   "outputs": [],
   "source": [
    "#Next, make all other columns numerical as well. \n",
    "data['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\n",
    "data['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\n",
    "data['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\n",
    "data['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\n",
    "data['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1) #I saw that there was no big difference between the number of dependents if there are any. So I made no dependents = 0  and yes dependents = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution_event_id": "4d887348-f6d8-4814-9407-c7e5e535cb8a",
    "last_executed_text": "#Lastly I want to change the Property_Area column, but I want to keep all three options. Therefore this I will do differently. \n\ndef f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)",
    "persistent_id": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b"
   },
   "outputs": [],
   "source": [
    "#Lastly I want to change the Property_Area column, but I want to keep all three options. Therefore this I will do differently. \n",
    "\n",
    "def f(row):\n",
    "  if row['Property_Area'] == \"Rural\":\n",
    "    val = 1\n",
    "  elif row['Property_Area'] == \"Urban\":\n",
    "    val = 0\n",
    "  else:\n",
    "    val = 2\n",
    "  return val\n",
    "\n",
    "data['Property_Area'] = data.apply(f, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution_event_id": "63fee81e-4e23-4c99-8a7d-d5ee6daef4f5",
    "last_executed_text": "data.info()",
    "persistent_id": "80510f35-569d-4817-909a-1ab4fa63dcac"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 571 entries, 0 to 613\n",
      "Data columns (total 12 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Gender             571 non-null    int32  \n",
      " 1   Married            571 non-null    int32  \n",
      " 2   Dependents         571 non-null    int32  \n",
      " 3   Education          571 non-null    int32  \n",
      " 4   Self_Employed      571 non-null    int32  \n",
      " 5   ApplicantIncome    571 non-null    int64  \n",
      " 6   CoapplicantIncome  571 non-null    float64\n",
      " 7   LoanAmount         571 non-null    float64\n",
      " 8   Loan_Amount_Term   571 non-null    float64\n",
      " 9   Credit_History     571 non-null    float64\n",
      " 10  Property_Area      571 non-null    int64  \n",
      " 11  Loan_Status        571 non-null    int32  \n",
      "dtypes: float64(4), int32(6), int64(2)\n",
      "memory usage: 44.6 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Right so now all columns are numeric\n",
    "\n",
    "### Most important features\n",
    "Let's continue by looking at the most important features according to three different tests. \n",
    "Than we will use the top ones to train and test our first model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution_event_id": "142c67ab-78d6-4641-923d-46a4e076006c",
    "last_executed_text": "#First we need to split the dataset in the y-column (the target) and the components (X), the independent columns. \n#This is needed as we need to use the X columns to predict the y in the model. \n\nX = data.iloc[:,0:11]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n",
    "persistent_id": "eae67e11-d9d4-4223-be40-71db86428916"
   },
   "outputs": [],
   "source": [
    "#First we need to split the dataset in the y-column (the target) and the components (X), the independent columns. \n",
    "#This is needed as we need to use the X columns to predict the y in the model. \n",
    "\n",
    "X = data.iloc[:,0:11]  #independent columns \n",
    "y = data.iloc[:,-1]    #target column = Status of the loan\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution_event_id": "47ec3f34-15da-4d18-a7ef-73fa8601f91c",
    "last_executed_text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()",
    "persistent_id": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.02306053 0.02135136 0.03142593 0.01841394 0.02312228 0.20843645\n",
      " 0.12449148 0.19150676 0.0531804  0.2454554  0.05955546]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "import matplotlib.pyplot as plt\n",
    "model = ExtraTreesClassifier()\n",
    "model.fit(X,y)\n",
    "print(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n",
    "#plot graph of feature importances for better visualization\n",
    "feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n",
    "feat_importances.nlargest(10).plot(kind='barh')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution_event_id": "e29ba1a1-832e-44d8-b507-1cbfe6da28a5",
    "last_executed_text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features",
    "persistent_id": "2efa5110-b3b9-4037-82aa-54059f52eded"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Name of the column         Score\n",
      "6   CoapplicantIncome  13836.533023\n",
      "5     ApplicantIncome    263.335634\n",
      "7          LoanAmount     93.339569\n",
      "9      Credit_History     18.763822\n",
      "10      Property_Area      4.362055\n",
      "1             Married      2.073582\n",
      "3           Education      0.595530\n",
      "0              Gender      0.324309\n",
      "4       Self_Employed      0.289648\n",
      "8    Loan_Amount_Term      0.089362\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2\n",
    "\n",
    "#apply SelectKBest class to extract top 10 best features\n",
    "bestfeatures = SelectKBest(score_func=chi2, k='all')\n",
    "fit = bestfeatures.fit(X,y)\n",
    "dfscores = pd.DataFrame(fit.scores_)\n",
    "dfcolumns = pd.DataFrame(X.columns)\n",
    "#concat two dataframes for better visualization \n",
    "featureScores = pd.concat([dfcolumns,dfscores],axis=1)\n",
    "featureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\n",
    "print(featureScores.nlargest(10,'Score'))  #print 10 best features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution_event_id": "b10201c7-b63c-4633-9858-004038c18405",
    "last_executed_text": "#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(10,10))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")",
    "persistent_id": "c21a791f-678a-4d4b-8bba-08c65762eae3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#get correlations of each features in dataset\n",
    "corrmat = data.corr()\n",
    "top_corr_features = corrmat.index\n",
    "plt.figure(figsize=(10,10))\n",
    "\n",
    "#plot heat map\n",
    "g=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Seems that the models differ in what feature is the most important.\n",
    "For the first test I will keep:\n",
    "- Credit history (high in all three tests and the highest in the correlation)\n",
    "- Co Applicant Income (high in two tests, negative in the correlation, but this is explainable, as no income for the spous means more risk)\n",
    "- Property Area (high in two tests)\n",
    "- Married (mentioned in two tests)\n",
    "\n",
    "After a test, these 4 gave better results than using all features. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Machine learning Model\n",
    "As this is a binary problem (so yes or no in the status), I choose for binary models:\n",
    "- Decision Tree\n",
    "- K-nearest Neighbors\n",
    "\n",
    "But we can cross check it with a logistic regression model here.\n",
    "\n",
    "For the record, I left out Random Forrest, as this is a random decision tree model, so not the same each time you run the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution_event_id": "05f26b97-2439-4e76-9cdc-76aa4cde519c",
    "last_executed_text": "#Load the chosen models here\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#add the logistic regression for cross check\nfrom sklearn.linear_model import LogisticRegression",
    "persistent_id": "6f110222-537f-4e89-a34d-5b8760d02ff1"
   },
   "outputs": [],
   "source": [
    "#Load the chosen models here\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "#add the logistic regression for cross check\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "24f8bb9c-7dcf-4a70-9182-b575f8536d8a"
   },
   "source": [
    "### Split the dataset in train and test\n",
    "Before we are going to use the models choosen, we will first split the dataset in a train and test set.\n",
    "This because we want to test the performance of the model on the training set and to be able to check it's accuracy. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution_event_id": "93ed0ebe-4e01-46e8-a20e-b6e04fa99961",
    "last_executed_text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Married', 'Property_Area']] #independent columns chosen \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)",
    "persistent_id": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#First try with the 4 most important features\n",
    "X_4 = data[['Credit_History', 'CoapplicantIncome', 'Married', 'Property_Area']] #independent columns chosen \n",
    "y = data.iloc[:,-1]    #target column = Status of the loan\n",
    "\n",
    "#I want to withhold 30 % of the trainset to perform the tests\n",
    "X_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution_event_id": "c1827d76-16fa-43d8-8870-4b2f09164197",
    "last_executed_text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)",
    "persistent_id": "26442a09-7ada-45fe-9bca-560ea2f3a353"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X_train is:  (399, 4)\n",
      "Shape of X_test is:  (172, 4)\n",
      "Shape of Y_train is:  (399,)\n",
      "Shape of y_test is:  (172,)\n"
     ]
    }
   ],
   "source": [
    "print('Shape of X_train is: ', X_train.shape)\n",
    "print('Shape of X_test is: ', X_test.shape)\n",
    "print('Shape of Y_train is: ', y_train.shape)\n",
    "print('Shape of y_test is: ', y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution_event_id": "b118da65-4060-414a-a4dc-1bb59a811b74",
    "last_executed_text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))",
    "persistent_id": "74edb0b5-8d59-4832-9ece-61ab1e546861"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n",
      "\n",
      "The % approved status versus not approved in y_train : [0.69423559 0.30576441]\n",
      "\n",
      "The % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
     ]
    }
   ],
   "source": [
    "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n",
    "#As approved is 1, this can be counted easily. \n",
    "print('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\n",
    "print('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\n",
    "print('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This looks about the same, let's continue. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Try and check the models "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution_event_id": "9d82b7cb-ec86-4855-b719-45786b3a931e",
    "last_executed_text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])",
    "persistent_id": "34278027-2c80-4bbf-9040-e585e5f1339f"
   },
   "outputs": [],
   "source": [
    "#To check the models, I want to build a check matrix within two functions:\n",
    "def score_model(probs, threshold):\n",
    "    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n",
    "\n",
    "def print_metrics(labels, probs, threshold):\n",
    "    scores = score_model(probs, threshold)\n",
    "    metrics = sklm.precision_recall_fscore_support(labels, scores)\n",
    "    conf = sklm.confusion_matrix(labels, scores)\n",
    "    print('                 Confusion matrix')\n",
    "    print('                 Score positive    Score negative')\n",
    "    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n",
    "    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n",
    "    print('')\n",
    "    print('DETAILS ACCURACY, PRECISION AND RECALL')\n",
    "    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n",
    "    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n",
    "    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n",
    "    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n",
    "    print(' ')\n",
    "    print('           Positive      Negative')\n",
    "    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n",
    "    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n",
    "    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n",
    "    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### K-Nearest Neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution_event_id": "42aedba3-0162-450a-a6c9-c80b3a378208",
    "last_executed_text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)",
    "persistent_id": "d0861f4f-adda-4b34-a6ac-21bc540c0706"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Start with the K-Nearest Neighbors\n",
    "K_n = KNeighborsClassifier()\n",
    "K_n.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution_event_id": "923d7c38-ae44-4dfd-9e6d-374ab5070290",
    "last_executed_text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) ",
    "persistent_id": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Confusion matrix\n",
      "                 Score positive    Score negative\n",
      "Actual positive         6                46\n",
      "Actual negative         1               119\n",
      "\n",
      "DETAILS ACCURACY, PRECISION AND RECALL\n",
      "Accuracy        0.73\n",
      "AUC             0.63\n",
      "Macro precision 0.79\n",
      "Macro recall    0.55\n",
      " \n",
      "           Positive      Negative\n",
      "Num case       52           120\n",
      "Precision    0.86          0.72\n",
      "Recall       0.12          0.99\n",
      "F1           0.20          0.84\n"
     ]
    }
   ],
   "source": [
    "#Now let's see how this model performs\n",
    "prob_K = K_n.predict_proba(X_test)\n",
    "print_metrics(y_test, prob_K, 0.3) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "a4ddfbc1-7ac0-47f1-8cdb-1d1eae16e8ae"
   },
   "source": [
    "This model does not seem to predict well enough for the positives. The true positives are 6 versus 46 false negative. On the other hand the true negatives are 119 over 1 false positive.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution_event_id": "9e12b978-25b4-454a-8c30-1ab9df3ddd33",
    "last_executed_text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)",
    "persistent_id": "06af9b72-862d-448e-b043-3ee90c716623"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=3, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Continue with the decision tree with a max number of layers of 3\n",
    "D_tree = DecisionTreeClassifier(max_depth = 3)\n",
    "D_tree.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution_event_id": "03576999-9201-494a-8bb5-b8d1be417695",
    "last_executed_text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)",
    "persistent_id": "28f7d54d-789a-400d-8d01-f9d6591ac1c1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Confusion matrix\n",
      "                 Score positive    Score negative\n",
      "Actual positive        18                34\n",
      "Actual negative         1               119\n",
      "\n",
      "DETAILS ACCURACY, PRECISION AND RECALL\n",
      "Accuracy        0.80\n",
      "AUC             0.67\n",
      "Macro precision 0.86\n",
      "Macro recall    0.67\n",
      " \n",
      "           Positive      Negative\n",
      "Num case       52           120\n",
      "Precision    0.95          0.78\n",
      "Recall       0.35          0.99\n",
      "F1           0.51          0.87\n"
     ]
    }
   ],
   "source": [
    "#let's see it's performance\n",
    "prob_D = D_tree.predict_proba(X_test)\n",
    "print_metrics(y_test, prob_D, 0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "bcb2ef15-b972-473e-ac38-9cdb9194dd1e"
   },
   "source": [
    "The accuracy seems to be higher (true positives better, 18 now), but still room for improvement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "e2d197f6-49be-48b7-8e1a-1f4605893d87"
   },
   "source": [
    "#### Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution_event_id": "28005e38-f9fe-4103-bd13-911de02db390",
    "last_executed_text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)",
    "persistent_id": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n",
       "                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n",
       "                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# logistic_regression model\n",
    "logistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \n",
    "logistic_mod.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution_event_id": "2f5e74d7-8e24-408f-8047-f95f79d93a36",
    "last_executed_text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  ",
    "persistent_id": "0e345bdb-4b34-4f8a-bb74-05868f5a3358"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Confusion matrix\n",
      "                 Score positive    Score negative\n",
      "Actual positive        16                36\n",
      "Actual negative         0               120\n",
      "\n",
      "DETAILS ACCURACY, PRECISION AND RECALL\n",
      "Accuracy        0.79\n",
      "AUC             0.70\n",
      "Macro precision 0.88\n",
      "Macro recall    0.65\n",
      " \n",
      "           Positive      Negative\n",
      "Num case       52           120\n",
      "Precision    1.00          0.77\n",
      "Recall       0.31          1.00\n",
      "F1           0.47          0.87\n"
     ]
    }
   ],
   "source": [
    "#Check the performance of the logistic regression model\n",
    "probabilities = logistic_mod.predict_proba(X_test)\n",
    "print_metrics(y_test, probabilities, 0.3)  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "persistent_id": "e0557415-6e15-436e-a982-dda2b6de8f73"
   },
   "source": [
    "This model seems to perform less than the decision tree model. 16 true positives and 0 false positives. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion:\n",
    "We would need more data to make the models perform better. \n",
    "\n",
    "For now, The decision tree has the highest accuracy and precision scores with the 4 most important features. \n",
    "Therefore this would be the model to use for the prediction on the status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "persistent_id": "20f48120-4c6b-42f0-8f08-5d7f7bfa3a91"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "history": [
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "0004e4a6-250d-4cb9-a460-1f6ff12c8c4a",
     "hasError": false,
     "id": "f1986cb4-e654-4686-b7f6-511f7e2a738f",
     "outputs": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "'[lening]' is not recognized as an internal or external command,\noperable program or batch file.\n"
      }
     ],
     "persistentId": "41f07953-bdf1-412b-99de-cf6b2b9be038",
     "text": "![lening](https://www.mymoneymantra.com/blog/wp-content/uploads/2018/06/Heres-Why-Banks-are-Offering-Personal-Loans-at-Competitive-Interest-Rates.jpg)"
    },
    "executionTime": "2020-09-15T13:04:58.517Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "f6a7ed02-d68c-45b7-a7a5-188a39e41f6e",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T13:16:46.311Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "9d511d5c-661b-490c-823f-53e1742161c6",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 3,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T13:20:18.980Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "e2d40260-ed61-4da7-8d61-fa66eaffa7af",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T13:21:04.748Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "b4ea66fa-412d-4ce0-adc9-ecf30355acf9",
     "hasError": false,
     "id": "9f3e9c2f-b053-41ee-a07c-ceace58c845c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "1db7dc05-5f95-4ce1-af3d-98a0cce98675",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T13:21:11.154Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "c929d692-0976-4ca6-82e7-186dbfb6c952",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T13:23:42.936Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "329773da-1c4a-46c2-bf3f-d7206493c1c4",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 7,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T13:27:12.431Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "9e37cda8-9410-42ff-af40-ed0bb8d133f7",
     "hasError": false,
     "id": "7928d0ef-c781-4dcd-91bc-d3c2e7c118f5",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>609</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>610</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>611</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>612</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>613</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>614 rows × 13 columns</p>\n</div>",
        "text/plain": "     Loan_ID  Gender  Married  Dependents  Education  Self_Employed  \\\n0      False   False    False       False      False          False   \n1      False   False    False       False      False          False   \n2      False   False    False       False      False          False   \n3      False   False    False       False      False          False   \n4      False   False    False       False      False          False   \n..       ...     ...      ...         ...        ...            ...   \n609    False   False    False       False      False          False   \n610    False   False    False       False      False          False   \n611    False   False    False       False      False          False   \n612    False   False    False       False      False          False   \n613    False   False    False       False      False          False   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0              False              False        True             False   \n1              False              False       False             False   \n2              False              False       False             False   \n3              False              False       False             False   \n4              False              False       False             False   \n..               ...                ...         ...               ...   \n609            False              False       False             False   \n610            False              False       False             False   \n611            False              False       False             False   \n612            False              False       False             False   \n613            False              False       False             False   \n\n     Credit_History  Property_Area  Loan_Status  \n0             False          False        False  \n1             False          False        False  \n2             False          False        False  \n3             False          False        False  \n4             False          False        False  \n..              ...            ...          ...  \n609           False          False        False  \n610           False          False        False  \n611           False          False        False  \n612           False          False        False  \n613           False          False        False  \n\n[614 rows x 13 columns]"
       },
       "execution_count": 8,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "data.isnull()"
    },
    "executionTime": "2020-09-15T13:29:41.796Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "4e5835df-5447-4308-b126-d2464e245787",
     "hasError": false,
     "id": "7928d0ef-c781-4dcd-91bc-d3c2e7c118f5",
     "outputs": [
      {
       "data": {
        "text/plain": "Loan_ID               0\nGender               13\nMarried               3\nDependents           15\nEducation             0\nSelf_Employed        32\nApplicantIncome       0\nCoapplicantIncome     0\nLoanAmount           22\nLoan_Amount_Term     14\nCredit_History       50\nProperty_Area         0\nLoan_Status           0\ndtype: int64"
       },
       "execution_count": 9,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "data.isnull().sum()"
    },
    "executionTime": "2020-09-15T13:29:50.190Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "925545c0-c4d6-4ccd-9868-b0954e60e7da",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x25488283e48>"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nStatus.plot(kind = 'bar', title = 'Status of the loans')"
    },
    "executionTime": "2020-09-15T13:35:44.659Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "d82c8441-ba42-42cb-a5b0-f23c54ea16b3",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x25488a0b588>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nStatus.plot(kind = 'barh', title = 'Status of the loans')"
    },
    "executionTime": "2020-09-15T13:37:44.273Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "b906f66c-2e78-46a8-9f12-536234ffd6ef",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'barh', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))"
    },
    "executionTime": "2020-09-15T13:41:00.496Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "6d7bb0c3-ad74-4b01-95d2-d8b6203e3def",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))"
    },
    "executionTime": "2020-09-15T13:41:38.452Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "27887839-cc07-4240-9078-3e8d157ea7d6",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() * 1.005))"
    },
    "executionTime": "2020-09-15T13:43:00.641Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "7cad11f0-8eb8-4979-b910-deb684eec7c9",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height()+ 5))"
    },
    "executionTime": "2020-09-15T13:43:14.792Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "7038383a-ae83-4e4a-ba1c-99baea8f0a2c",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() + 15))"
    },
    "executionTime": "2020-09-15T13:43:21.430Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "91a8a2c3-e056-4b36-b45b-64c8b4393c9d",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'barh', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() + 15))"
    },
    "executionTime": "2020-09-15T13:43:31.108Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "362f9f31-3766-47e9-9d7b-75fd0b9ba5ad",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() + 15))"
    },
    "executionTime": "2020-09-15T13:43:37.471Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "f4338014-001c-421d-a6f5-e2ada90bac96",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() + 25))"
    },
    "executionTime": "2020-09-15T13:43:42.571Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "a0452ce0-14f2-4dcc-bdd7-28af2d6fbb8d",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() + 7))"
    },
    "executionTime": "2020-09-15T13:43:47.055Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "f24056f3-1b14-4324-8921-e3582bfba2f7",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() ))"
    },
    "executionTime": "2020-09-15T13:43:52.401Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "65c01900-ff6d-4ee7-9649-56b2a132ed1f",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 10 ))"
    },
    "executionTime": "2020-09-15T13:43:58.517Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "2979efab-8dc4-4a16-8078-7a27b4dc9b51",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30 ))"
    },
    "executionTime": "2020-09-15T13:44:02.106Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "f3854ce3-f17e-47f3-a450-6f75a53bf1a8",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "Approved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\ndf = {\"Count\" : [Approved, Rejected]}\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T13:44:53.504Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "f098278b-d2b4-480f-a2e1-aaf3e54c6df3",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP001608</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP001608   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 25,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T14:00:05.292Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "ecd81e2b-e14c-4beb-986a-293fc24efd6b",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 26,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T14:00:27.447Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "192b7c69-53ec-4e03-928d-acede17cd4ba",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 422.00\nThe percentage of rejected loans : 192.00\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(df)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(df)))"
    },
    "executionTime": "2020-09-15T14:03:50.869Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "33c6bf93-3e5f-4f9d-856d-da0208f5f461",
     "hasError": true,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "incomplete format",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-28-ddc96f817a46>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#let's see the percentages of the status:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'The percentage of approved loans : %.2f %'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Loan_Status'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'The percentage of rejected loans : %.2f'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Loan_Status'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: incomplete format"
       ]
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f %' % (data['Loan_Status'].value_counts()[0] / len(df)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(df)))"
    },
    "executionTime": "2020-09-15T14:04:28.928Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "b02ab3a9-f2f9-4ec9-97a7-4d3b8e1cf338",
     "hasError": true,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "incomplete format",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-29-fc0fae4166ff>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#let's see the percentages of the status:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'The percentage of approved loans : %.2f'\u001b[0m \u001b[1;34m' %'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Loan_Status'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'The percentage of rejected loans : %.2f'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Loan_Status'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: incomplete format"
       ]
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' ' %' % (data['Loan_Status'].value_counts()[0] / len(df)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(df)))"
    },
    "executionTime": "2020-09-15T14:04:43.474Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "d458b939-595e-4c73-bc78-9028719beba2",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:05:06.513Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "af7ef8d5-c16d-478a-9c96-570ae454cfb3",
     "hasError": true,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "ename": "SyntaxError",
       "evalue": "invalid syntax (<ipython-input-31-599d2c6f6fb0>, line 2)",
       "output_type": "error",
       "traceback": [
        "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-31-599d2c6f6fb0>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    print('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)) '%')\u001b[0m\n\u001b[1;37m                                                                                                            ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
       ]
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)) '%')\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)) '%')"
    },
    "executionTime": "2020-09-15T14:05:26.879Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "0b1f2ed0-2457-4eb8-baf8-b4c3f00ae039",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:05:43.949Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "fd66f5ec-e4c2-4fab-886e-818cf5d74963",
     "hasError": true,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "incomplete format",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-33-405998520796>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#let's see the percentages of the status:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'The percentage of approved loans : %.2f %'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Loan_Status'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'The percentage of rejected loans : %.2f'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Loan_Status'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: incomplete format"
       ]
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f %' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:07:19.730Z"
   },
   {
    "cell": {
     "executionCount": 34,
     "executionEventId": "f28a8dd3-624d-4efc-812a-781711af6983",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:07:25.843Z"
   },
   {
    "cell": {
     "executionCount": 35,
     "executionEventId": "defaefd6-1836-4416-8059-3336de6729a2",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.687296.0\nThe percentage of rejected loans : 0.312704.0\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %2f.0' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %2f.0' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:07:35.311Z"
   },
   {
    "cell": {
     "executionCount": 36,
     "executionEventId": "c64c86d9-b14e-4ef7-8da2-aaec42bbb7ec",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69.0\nThe percentage of rejected loans : 0.31.0\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f.0' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f.0' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:07:42.267Z"
   },
   {
    "cell": {
     "executionCount": 37,
     "executionEventId": "e2b26a6d-929e-43c8-8738-404bec57e20b",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:07:46.672Z"
   },
   {
    "cell": {
     "executionCount": 38,
     "executionEventId": "6db1e085-cfc4-431b-9a11-2770acd5dbd3",
     "hasError": false,
     "id": "e7e12405-f35b-4d04-b78e-8c075485a699",
     "outputs": [],
     "persistentId": "fc5f6a63-9038-4643-898f-20192c764af8",
     "text": "data['Credit_History'] = np.where((data['Credit_History'] == 1), 'Y', 'N')"
    },
    "executionTime": "2020-09-15T14:13:14.857Z"
   },
   {
    "cell": {
     "executionCount": 39,
     "executionEventId": "78fdba17-7f46-4259-b436-cabcc1a0d42e",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP001608</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Y</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>475</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP001608   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Credit_History Property_Area Loan_Status  \ncount             614           614         614  \nunique              2             3           2  \ntop                 Y     Semiurban           Y  \nfreq              475           233         422  "
       },
       "execution_count": 39,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T14:13:17.640Z"
   },
   {
    "cell": {
     "executionCount": 40,
     "executionEventId": "3acb968d-b5bf-4bb6-a70c-f7fd4b8bf2c0",
     "hasError": false,
     "id": "7928d0ef-c781-4dcd-91bc-d3c2e7c118f5",
     "outputs": [
      {
       "data": {
        "text/plain": "Loan_ID               0\nGender               13\nMarried               3\nDependents           15\nEducation             0\nSelf_Employed        32\nApplicantIncome       0\nCoapplicantIncome     0\nLoanAmount           22\nLoan_Amount_Term     14\nCredit_History        0\nProperty_Area         0\nLoan_Status           0\ndtype: int64"
       },
       "execution_count": 40,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum()"
    },
    "executionTime": "2020-09-15T14:13:35.418Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "e505cfa2-0610-479c-8069-5fd99a54faa7",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T14:15:29.575Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "0252a69f-2651-4a42-89c2-8de6d436c875",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T14:15:29.652Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "f4f2b99a-408c-4435-af22-6aedffeaec1c",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T14:15:29.686Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "d45f7c51-befe-4d4f-bd66-2c7b7ac0c411",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T14:15:29.714Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "84255aad-c4a8-457a-b3e3-302e3844775b",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T14:15:29.734Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "1826e119-a784-49c8-a21a-a74a7add2b5c",
     "hasError": false,
     "id": "e7e12405-f35b-4d04-b78e-8c075485a699",
     "outputs": [],
     "persistentId": "fc5f6a63-9038-4643-898f-20192c764af8",
     "text": "data['Credit_History'] = data['Credit_History'].astype('O')"
    },
    "executionTime": "2020-09-15T14:15:29.764Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "152690bb-908f-4f91-8bef-5589eb2d7b04",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>564.0</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP001634</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>475.0</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP001634   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n        Credit_History Property_Area Loan_Status  \ncount            564.0           614         614  \nunique             2.0             3           2  \ntop                1.0     Semiurban           Y  \nfreq             475.0           233         422  "
       },
       "execution_count": 7,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T14:15:29.839Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "b7a91dc1-d660-4afb-9666-e5691220922a",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T14:15:30.034Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "6623d3b0-6d98-4adb-9130-b61642af3a8e",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:15:30.090Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "616063fa-6c60-484b-8b3a-81817a60006f",
     "hasError": false,
     "id": "7928d0ef-c781-4dcd-91bc-d3c2e7c118f5",
     "outputs": [
      {
       "data": {
        "text/plain": "Loan_ID               0\nGender               13\nMarried               3\nDependents           15\nEducation             0\nSelf_Employed        32\nApplicantIncome       0\nCoapplicantIncome     0\nLoanAmount           22\nLoan_Amount_Term     14\nCredit_History       50\nProperty_Area         0\nLoan_Status           0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum()"
    },
    "executionTime": "2020-09-15T14:15:30.104Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "734d246c-bbaa-4c7d-bf8c-79177d490282",
     "hasError": false,
     "id": "7928d0ef-c781-4dcd-91bc-d3c2e7c118f5",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T14:16:28.601Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "085a7783-a154-461f-8326-965ffdaae558",
     "hasError": true,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "ename": "ModuleNotFoundError",
       "evalue": "No module named 'feature_selector'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-12-91ed571698cb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mfeature_selector\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mFeatureSelector\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mfs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mFeatureSelector\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mLoan_Status\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'feature_selector'"
       ]
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "from feature_selector import FeatureSelector\nfs = FeatureSelector(data = data, labels = data.Loan_Status)"
    },
    "executionTime": "2020-09-15T14:23:36.151Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "907355e1-41fa-422a-9ec1-377cd0433cce",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:12]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T14:27:07.820Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "c2ed4eb2-bee1-4ec3-b064-90b2b16a6446",
     "hasError": false,
     "id": "329bc3eb-dc5e-47e4-b68f-f5eeac0c5251",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    object \n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    int32  \ndtypes: float64(3), int32(1), int64(1), object(8)\nmemory usage: 60.1+ KB\n"
      }
     ],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)\ndata.info()"
    },
    "executionTime": "2020-09-15T14:28:21.428Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "7bf16d1e-6033-438b-9b76-dc34937c9dad",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:12]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T14:28:26.980Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "43e07051-1650-46ab-8bd8-c0998c427334",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T14:29:42.323Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "d4074588-de82-416a-a046-ad31404a1253",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T14:29:42.380Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "86f5f4fd-7182-46ef-bfcb-65accf2a0a47",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T14:29:42.423Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "9d258854-9266-4a45-86c6-920dcc586093",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T14:29:42.435Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "ac35970c-c9e3-4a58-a51d-810b000680e5",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T14:29:42.486Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "93d7d2e0-4a16-40b3-b2fa-700657efebe6",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002161</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002161   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T14:29:42.542Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "7757e7c1-caa6-42be-97ea-c461e5193116",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T14:29:42.755Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "cc5ee4a9-2f78-409e-b649-c1c0253a64f3",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:29:42.837Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "f961d108-872e-4878-a52b-32daca487abc",
     "hasError": false,
     "id": "329bc3eb-dc5e-47e4-b68f-f5eeac0c5251",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-15T14:29:42.850Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "b5d72298-856b-49a6-a131-ea06ef64a50b",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:12]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T14:29:49.179Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "ec22d753-e997-4449-8ed5-99559825ed07",
     "hasError": true,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "ename": "AttributeError",
       "evalue": "'DataFrame' object has no attribute 'dtype'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-11-03d38a5e5ddf>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Let's see what the options are in the text columns (the objects)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mobjects\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'O'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mobjects\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5272\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5273\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5274\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5275\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5276\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'dtype'"
       ]
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nobjects = data[data.dtype('O')]\nobjects.unique()"
    },
    "executionTime": "2020-09-15T14:32:18.704Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "d834909b-ae01-43b5-869c-d6851d5d0aee",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "['Male' 'Female' nan]\n['No' 'Yes' nan]\n['0' '1' '2' '3+' nan]\n['Graduate' 'Not Graduate']\n['No' 'Yes' nan]\n['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint(data['Gender'].unique())\nprint(data['Married'].unique())\nprint(data['Dependents'].unique())\nprint(data['Education'].unique())\nprint(data['Self_Employed'].unique())\nprint(data['Property_Area'].unique())"
    },
    "executionTime": "2020-09-15T14:34:01.766Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "5ce51395-6d37-4a53-b5c7-d06a6ab65b3e",
     "hasError": true,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "ename": "TypeError",
       "evalue": "can only concatenate str (not \"float\") to str",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-13-588ca467ca98>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Let's see what the options are in the text columns (the objects)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Gender: '\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Gender'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Married: '\u001b[0m \u001b[1;33m+\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Married'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Dependents'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Education'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mTypeError\u001b[0m: can only concatenate str (not \"float\") to str"
       ]
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + data['Gender'].unique())\nprint('Married: ' +data['Married'].unique())\nprint(data['Dependents'].unique())\nprint(data['Education'].unique())\nprint(data['Self_Employed'].unique())\nprint(data['Property_Area'].unique())"
    },
    "executionTime": "2020-09-15T14:35:19.515Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "984d6e3f-8290-456f-95ca-6b49920b9302",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\n['0' '1' '2' '3+' nan]\n['Graduate' 'Not Graduate']\n['No' 'Yes' nan]\n['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint(data['Dependents'].unique())\nprint(data['Education'].unique())\nprint(data['Self_Employed'].unique())\nprint(data['Property_Area'].unique())"
    },
    "executionTime": "2020-09-15T14:35:38.055Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "ba00c1e2-e6bd-4ec5-b495-3c7601402ed4",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-15T14:37:46.626Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "8793d5ec-4541-4052-a5f3-dc5100b0be3d",
     "hasError": false,
     "id": "ce7cc0c1-cc6f-43b9-b398-fce21918dddd",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x21370547be0>"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Credit_History'],hue=data['Loan_Status'])"
    },
    "executionTime": "2020-09-15T14:46:39.018Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "b56a3275-452c-43cb-8bcc-8c61bdb488ff",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T14:47:00.181Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "c254b107-101d-4d6c-b8c3-11f3d9a494a7",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T14:47:00.249Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "bbc14b49-5a44-4d9e-8aed-845490401b16",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T14:47:00.275Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "78b3c7dd-6e50-4561-9417-c70d65bfa206",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T14:47:00.295Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "4d94d2ef-0eff-46aa-a59f-0d45b66bb121",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T14:47:00.336Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "070172dd-f3e9-4232-9592-f904e6586815",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002648</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002648   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T14:47:00.378Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "2f88e3ae-abc0-4243-99e7-eca6caa34252",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-15T14:47:00.416Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "3b0aedc6-013a-4e64-997d-ef983cb8ae83",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T14:47:00.579Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "0dfe965f-9b5d-4516-93dc-9e0de69bcc0d",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:47:00.626Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "3b990d00-e6ab-4608-93ee-83fab3925cdd",
     "hasError": false,
     "id": "a91c99c8-bc90-4abf-9697-1b9bf244f7f6",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T14:47:00.654Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "5f7a17d8-e831-4d47-a0c9-c4ba10acf0ee",
     "hasError": false,
     "id": "ce7cc0c1-cc6f-43b9-b398-fce21918dddd",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x2b5c37d1cc0>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Credit_History'],hue=data['Loan_Status'])"
    },
    "executionTime": "2020-09-15T14:47:00.790Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "0ad943a2-9d30-4c7d-a654-9e862104469e",
     "hasError": false,
     "id": "ea7c2ab3-1c46-4975-8227-f244b928c368",
     "outputs": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "C:\\Users\\Renate\\Anaconda3\\ANACONDA\\lib\\site-packages\\seaborn\\axisgrid.py:243: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n  warnings.warn(msg, UserWarning)\nC:\\Users\\Renate\\Anaconda3\\ANACONDA\\lib\\site-packages\\seaborn\\axisgrid.py:728: UserWarning: Using the countplot function without specifying `order` is likely to produce an incorrect plot.\n  warnings.warn(warning)\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 737.28x230.4 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "14fc58e3-32e3-4c49-9a20-e070d3074651",
     "text": "#Seems that if you have a credit history, it is more likely to get the loan approved. \ngrid = sns.FacetGrid(data,col='Loan_Status', size=3.2, aspect=1.6)\ngrid.map(sns.countplot, 'Credit_History');"
    },
    "executionTime": "2020-09-15T14:48:20.304Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "6062ca2e-40f9-4a17-afa1-05aeef7d94e4",
     "hasError": false,
     "id": "ce7cc0c1-cc6f-43b9-b398-fce21918dddd",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x2b5c3948710>"
       },
       "execution_count": 13,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-15T14:49:06.499Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "c3f8f960-ccfe-49fc-bc0c-720d0b937261",
     "hasError": false,
     "id": "a6673590-5897-4f3c-b3fd-1d200199e39b",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-15T14:51:33.510Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "c848e5c5-3804-45b1-9764-9666962f7e3a",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.14\nThe percentage of credit history no : 0.77\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T14:53:26.615Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "db7dab38-db53-4492-ba0a-05745796cc3b",
     "hasError": false,
     "id": "7ca9f7f4-e92e-4f57-856d-222aa03efc39",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T14:56:39.411Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "cdcdd7ee-1e62-41c1-90fa-54026a4e0bc5",
     "hasError": false,
     "id": "b624d0a5-2039-4e25-9686-750344751d57",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x2b5c399e748>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-15T14:58:03.269Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "3d314765-f376-4ab7-9cb8-48165d59a191",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.86\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T14:59:54.657Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "f445b551-d92c-409b-80df-bd40538f9dcd",
     "hasError": true,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "ename": "SyntaxError",
       "evalue": "invalid syntax (<ipython-input-19-9be508ad0618>, line 2)",
       "output_type": "error",
       "traceback": [
        "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-19-9be508ad0618>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    print('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
       ]
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1]) #/ len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T15:00:52.554Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "cc0ee62c-054f-4417-b92d-ed5e09c72c7d",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 525.00\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1])) #/ len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T15:01:04.552Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "3f79706f-0b5b-4846-a282-8f9f30ea7a38",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.86\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T15:01:24.320Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "de764e89-bd1b-40c0-82f3-eeb04ee0feb8",
     "hasError": false,
     "id": "b20ded26-ea29-4156-9401-c84f26493298",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 22,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Credit_History'] = data['Credit_History'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:01:55.190Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "68e40804-bc29-42ce-a8d7-13da02ca16d8",
     "hasError": false,
     "id": "b20ded26-ea29-4156-9401-c84f26493298",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 23,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:02:10.731Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "fad83c3e-5704-406b-80e0-ed1cc667b59b",
     "hasError": false,
     "id": "07812e65-fa2c-4969-9d59-d20e16890e5e",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x2b5c3a017b8>"
       },
       "execution_count": 24,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['LoanAmount'])"
    },
    "executionTime": "2020-09-15T15:03:23.195Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "b9b6ca78-9087-470c-88ce-48f7c817ac06",
     "hasError": false,
     "id": "07812e65-fa2c-4969-9d59-d20e16890e5e",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x2b5c40a2b70>"
       },
       "execution_count": 25,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-15T15:05:05.136Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "f19b72a4-839e-4eae-992c-61dfac663a74",
     "hasError": false,
     "id": "b7385fb3-70d7-4823-9658-b1d7f96cb9c4",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 26,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:07:15.492Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "652ff59a-3b03-4add-a11b-20650a41f851",
     "hasError": false,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x2b5c41f0128>"
       },
       "execution_count": 27,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Continue with the last one: Dependents\nsns.countplot(data['Dependents'],hue=data['Loan_Status'])"
    },
    "executionTime": "2020-09-15T15:08:14.746Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "5b6676f5-94f8-455b-bc74-093d7f948095",
     "hasError": false,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "data": {
        "text/plain": "Loan_Status          0\nProperty_Area        0\nCredit_History       0\nLoan_Amount_Term     0\nLoanAmount           0\nCoapplicantIncome    0\nApplicantIncome      0\nSelf_Employed        0\nEducation            0\nDependents           0\nMarried              0\nGender               0\nLoan_ID              0\ndtype: int64"
       },
       "execution_count": 28,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata = data.dropna()\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:09:25.264Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "0ed6616c-b2b7-4066-96e4-eb5b69f3fa5c",
     "hasError": true,
     "id": "b695345c-5629-45c7-9a70-a53ac8c4e63e",
     "outputs": [
      {
       "ename": "TypeError",
       "evalue": "'(slice(None, None, None), slice(1, None, None))' is an invalid key",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-29-9060b1048b37>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Next we will drop the loan_ID column as this will only confuse the model later on\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2798\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2799\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2800\u001b[1;33m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2801\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   2644\u001b[0m                 )\n\u001b[0;32m   2645\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2646\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2647\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2648\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;31mTypeError\u001b[0m: '(slice(None, None, None), slice(1, None, None))' is an invalid key"
       ]
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata = data[:, 1:]\ndata.info()"
    },
    "executionTime": "2020-09-15T15:11:21.170Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "bba6c8aa-ed76-4128-b5e3-23a3c97b07f7",
     "hasError": false,
     "id": "b695345c-5629-45c7-9a70-a53ac8c4e63e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    object \ndtypes: float64(4), int64(1), object(7)\nmemory usage: 58.2+ KB\n"
      },
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "C:\\Users\\Renate\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\frame.py:3997: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  errors=errors,\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-15T15:11:57.416Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "79ea88e0-73a7-4ea0-b0ec-e132227fac8f",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T15:12:25.102Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "f696d701-7563-4ad2-9c17-713a3b1d4ea4",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T15:12:25.186Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "25c1ad4d-cf39-403a-bdc7-3d421789a6eb",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T15:12:25.210Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "9227972c-4e2b-445a-9ab4-1996d1c0f76d",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T15:12:25.219Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "212a1cc5-3c28-41c1-9563-9dafd88be53a",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T15:12:25.284Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "5b7a964f-1a20-4b2d-a1d5-ce28f7f2221d",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP001586</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP001586   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T15:12:25.337Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "53a681af-235f-4c9f-bcb4-872b98a3af1c",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-15T15:12:25.349Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "95ade3ab-30f8-492e-b33d-b096980f3dd8",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T15:12:25.519Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "85de384d-fd23-4311-891b-eea392d031f8",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T15:12:25.602Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "f2916338-15c6-4e81-acbf-e08dfcd3dd53",
     "hasError": false,
     "id": "a91c99c8-bc90-4abf-9697-1b9bf244f7f6",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:25.614Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "65eb9854-4849-4fb4-a4b8-ebf78487f961",
     "hasError": false,
     "id": "ce7cc0c1-cc6f-43b9-b398-fce21918dddd",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1f65de11940>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-15T15:12:25.727Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "47f1f969-2c96-4248-bc84-13a048b37c10",
     "hasError": false,
     "id": "a6673590-5897-4f3c-b3fd-1d200199e39b",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-15T15:12:25.773Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "8240eb7f-18b9-4eeb-ad18-effedf95dec1",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T15:12:25.793Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "ac8eb71f-2eef-433a-9a2f-07806d371b40",
     "hasError": false,
     "id": "7ca9f7f4-e92e-4f57-856d-222aa03efc39",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:25.828Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "c0d6d0aa-7757-4d8b-93c1-303bd5649f28",
     "hasError": false,
     "id": "b624d0a5-2039-4e25-9686-750344751d57",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1f65de98160>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-15T15:12:25.972Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "3e486c91-efd2-4caf-a655-292af301a20a",
     "hasError": false,
     "id": "b20ded26-ea29-4156-9401-c84f26493298",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:25.986Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "351e2d4c-3cfd-42ea-a3c1-798378fee297",
     "hasError": false,
     "id": "07812e65-fa2c-4969-9d59-d20e16890e5e",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x1f65df470b8>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAUsElEQVR4nO3df4xd5X3n8feXydBM2bYDYUAwNjVVLafJ0mB2GixZqjahrSFtYxeVFNQuLkWyVstq29Wut2YVKURiFXetNj/UCskbujVtRSCEGieguJFNVOUPaMdMwKHUwkEJnjGLp4Vx2jJJzPDdP+4ZmB/3eu6de8+duWfeL2l0z/meZ+Y84z8+c/yc5zwnMhNJUrVcsNIdkCR1nuEuSRVkuEtSBRnuklRBhrskVdC7VroDAJdeemlu2LBhpbshST3l2LFj/5iZQ/WOrYpw37BhA6OjoyvdDUnqKRHx3UbHHJaRpAoy3CWpggx3Saogw12SKshwl6QKWjLcI2JTRHxzztf3IuL3IuKSiPhaRLxYfF5ctI+I+FxEnIyI5yLiurJ/iYNjE2zde5Sr9zzO1r1HOTg2UfYpJWlVWzLcM/NEZl6bmdcC/w54A/grYA9wJDM3AkeKfYCbgI3F1y7gvjI6Puvg2AR3P3qcialpEpiYmubuR48b8JLWtFaHZW4Avp2Z3wW2AweK+gFgR7G9HXgga54CBiPiio70to59h08wfW5mXm363Az7Dp8o65SStOq1Gu63Ag8W25dn5isAxedlRX0YODXne8aL2jwRsSsiRiNidHJyssVuvOP01HRLdUlaC5oO94i4EPgo8MWlmtapLXojSGbuz8yRzBwZGqr79GxTrhwcaKkuSWtBK1fuNwHPZOarxf6rs8MtxeeZoj4OrJ/zfeuA0+12tJHd2zYx0N83rzbQ38fubZvKOqUkrXqthPttvDMkA3AI2Fls7wQem1O/vZg1swU4Ozt8U4Ydm4f51M3XMDw4QADDgwN86uZr2LF50UiQJK0Z0cw7VCPiR6mNo/9UZp4tau8BHgauAl4GbsnM1yIigD8GbqQ2s+aOzDzvqmAjIyPpwmGS1JqIOJaZI/WONbUqZGa+AbxnQe2fqM2eWdg2gbuW0U9JUof4hKokVZDhLkkVZLhLUgUZ7pJUQYa7JFWQ4S5JFbQqXpDdroNjE+w7fILTU9NcOTjA7m2bfIhJ0prW8+E+u+Tv7MqQs0v+Aga8pDWr54dlXPJXkhbr+XB3yV9JWqznw90lfyVpsZ4Pd5f8laTFev6G6uxNU2fLSNI7ej7coRbwhrkkvaPnh2UkSYsZ7pJUQYa7JFWQ4S5JFWS4S1IFGe6SVEFNTYWMiEHg88C/BRL4HeAE8BCwAfgO8LHMfD0iAvgs8BHgDeC3M/OZjvd8jo8fPM6DT59iJpO+CG67fj337rimzFNK0qrW7JX7Z4GvZuZ7gQ8ALwB7gCOZuRE4UuwD3ARsLL52Afd1tMcLfPzgcf7iqZeZyQRgJpO/eOplPn7weJmnlaRVbclwj4gfB34euB8gM3+YmVPAduBA0ewAsKPY3g48kDVPAYMRcUXHe1548OlTLdUlaS1o5sr9p4BJ4P9GxFhEfD4iLgIuz8xXAIrPy4r2w8DcZB0vavNExK6IGI2I0cnJyWX/ArNX7M3WJWktaCbc3wVcB9yXmZuBf+WdIZh6ok5tUdJm5v7MHMnMkaGhoaY6W09f1Dtd47okrQXNhPs4MJ6ZTxf7j1AL+1dnh1uKzzNz2q+f8/3rgNOd6e5it12/vqW6JK0FS4Z7Zv4/4FREzK6hewPw98AhYGdR2wk8VmwfAm6Pmi3A2dnhmzLcu+MafmvLVW9fqfdF8FtbrnK2jKQ1LbKJsemIuJbaVMgLgZeAO6j9YXgYuAp4GbglM18rpkL+MXAjtamQd2Tm6Pl+/sjISI6OnreJJGmBiDiWmSP1jjU1zz0zvwnU+wE31GmbwF0t9VCS1oCDYxNde/dEJdZzl6TV7uDYBHc/epzpczMATExNc/ejtedxygh4lx+QpC7Yd/jE28E+a/rcDPsOnyjlfIa7JHXB6anplurtMtwlqQuuHBxoqd4uw12SumD3tk0M9PfNqw3097F726YG39Eeb6hKUhfM3jR1towkVcyOzcOlhflCDstIUgUZ7pJUQYa7JFWQ4S5JFWS4S1IFGe6SVEGGuyRVkOEuSRVkuEtSBRnuklRBhrskVZDhLkkV1NTCYRHxHeCfgRngzcwciYhLgIeADcB3gI9l5uvFC7I/C3yE2guyfzszn+l81yWpt3TzHaqtXLl/KDOvnfOm7T3AkczcCBwp9gFuAjYWX7uA+zrVWUnqVbPvUJ2YmiZ55x2qB8cmSjlfO8My24EDxfYBYMec+gNZ8xQwGBFXtHGeJR0cm2Dr3qNcvedxtu49Wto/liQt12p9h2oCfx0RxyJiV1G7PDNfASg+Lyvqw8CpOd87XtTmiYhdETEaEaOTk5PL6z21YN/9yLPz/hrufuRZA17SqjLR4F2pjertajbct2bmddSGXO6KiJ8/T9uoU8tFhcz9mTmSmSNDQ0NNdmOxT375ec7NzP/x52aST375+WX/TEnqtL6oF42N6+1qKtwz83TxeQb4K+CDwKuzwy3F55mi+Tiwfs63rwNOd6rDC73+xrmW6pK0EmZy0TXueevtWjLcI+KiiPix2W3gl4BvAYeAnUWzncBjxfYh4Pao2QKcnR2+kaS1anhwoKV6u5q5cr8c+EZEPAv8LfB4Zn4V2Av8YkS8CPxisQ/wBPAScBL4P8B/6niv5+hv8Bs0qkvSSvjQe+sPPzeqt2vJee6Z+RLwgTr1fwJuqFNP4K6O9K4JMw3+R9OoLkkr4cl/qD9xpFG9XT1/fftWgxBvVJeklXC6wayYRvV29Xy4d/sOtCQtx5UNxtYb1dvV8+F+2/XrW6pL0krYvW0TA/1982oD/X3s3raplPM1tbbManbvjmsAePDpU8xk0hfBbdevf7suSavB7Boy3VpbJrKkOZatGBkZydHR0ZXuhiT1lIg4Nme9r3l6flhGkrSY4S5JFWS4S1IFGe6SVEGGuyRVUM9PhYTuvrpKknpBz4f77KurZt9wMvvqKsCAl7Rm9fywTLdfXSVJvaDnw73bi/FIUi/o+XDv9mI8ktQLej7cu70YjyT1gp6/odrtxXgkqRf0fLhDLeANc0l6R88Py0iSFqvElbsPMUnSfE1fuUdEX0SMRcRXiv2rI+LpiHgxIh6KiAuL+o8U+yeL4xvK6XrNwbEJdn/xWSampklqDzHt/uKzHBybKPO0krSqtTIs87vAC3P2/wD4dGZuBF4H7izqdwKvZ+ZPA58u2pXmnkPPc27B27DPvZXcc+j5Mk8rSataU+EeEeuAXwY+X+wH8GHgkaLJAWBHsb292Kc4fkPRvhRT0+daqkvSWtDslftngP8BvFXsvweYysw3i/1xYHaQexg4BVAcP1u0nycidkXEaESMTk5OLrP7kqR6lgz3iPgV4ExmHptbrtM0mzj2TiFzf2aOZObI0NBQU52t5+If7W+pLklrQTNX7luBj0bEd4AvUBuO+QwwGBGzs23WAaeL7XFgPUBx/CeA1zrY53k+8avvp79v/t+T/r7gE7/6/rJOKUmr3pLhnpl3Z+a6zNwA3AoczczfBJ4Efr1othN4rNg+VOxTHD+amYuu3Dtlx+ZhfuPn1tNXDOv3RfAbP7feqZCS1rR25rn/PvCFiLgXGAPuL+r3A38eESepXbHf2l4Xz+/g2ARfOjbBTPH3YyaTLx2bYOQnLzHgJa0q3Xwmp6Vwz8yvA18vtl8CPlinzfeBWzrQt6acbz13w13SatHtFwv1/PIDrucuqRd0+8VCPR/ugw1mxTSqS9JK6PaFaM+He6NbteXdwpWk1nX7xUI9H+5nGzyJ2qguSSth97ZN9F+wYNr2BVHai4V6Ptx9zZ6knrHwEc/SFmapQLj7mj1JvWDf4ROcm1mwyOFMlnZDtefXc/c1e5J6wUSDG6eN6u3q+XAHX7MnafW7IOCtOhM9LihpaKbnh2UkqRfUC/bz1dtluEtSBRnuktQFgwMNHrhsUG9XJcL94NgEW/ce5eo9j7N171Hfnypp1bnno++vO8/9no+Wszx5z99Q7fZiPJK0HN2e2dfz4e6qkJJ6RTdn9vV8uHd77qgkLdeqXc99NeqLePtFHQvrkrRauJ57i+oF+/nqkrQSXM+9RY0u0L1wl7SauJ57i1zPXVIveHd//bhtVG9Xz4e7JPWCH7z5Vkv1di0Z7hHx7oj424h4NiKej4hPFvWrI+LpiHgxIh6KiAuL+o8U+yeL4xtK6Xnh4gav02tUl6SVsBrXlvkB8OHM/ABwLXBjRGwB/gD4dGZuBF4H7iza3wm8npk/DXy6aFeaX/7ZK1qqS9JasGS4Z82/FLv9xVcCHwYeKeoHgB3F9vZin+L4DRHl3d78yrOvtFSXpLWgqTH3iOiLiG8CZ4CvAd8GpjLzzaLJODA7UXMYOAVQHD8LvKfOz9wVEaMRMTo5ObnsX2CqwbtSG9UlaSUMN3j1Z6N6u5oK98ycycxrgXXAB4Gfqdes+Kx3lb5oVCkz92fmSGaODA0NNdtfSepJH3pv/ZxrVG9XS7NlMnMK+DqwBRiMiNknXNcBp4vtcWA9QHH8J4DXOtFZSepVjz9Xf6i4Ub1dzcyWGYqIwWJ7APgF4AXgSeDXi2Y7gceK7UPFPsXxo5nlzTq/6MK+luqStBJef6P+UHGjeruaWVvmCuBARPRR+2PwcGZ+JSL+HvhCRNwLjAH3F+3vB/48Ik5Su2K/tYR+v+2tBn83GtUlaS1YMtwz8zlgc536S9TG3xfWvw/c0pHeNWH6XP0HABrVJWklDPRfUDeXBnxCVZJ617v76w8VN6q3y3CXpC6YajC23qjeLsNdkrpgsMGSKI3q7TLcJakLvr9gLfel6u0y3CWpC7o9+cNwl6QKMtwlqYIMd0mqIMNdkrqgr8HC543q7TLcJakLZhqsiNKo3i7DXZIqyHCXpAoy3CWpC7q9PLnhLkld8GvXDbdUb5fhLkld8OQ/1H9XdKN6uwx3SeqCianplurtMtwlqQsaTWcvaZp774d7t//BJGk5Gk1nL+uFoD0f7t3+B5OkXrBkuEfE+oh4MiJeiIjnI+J3i/olEfG1iHix+Ly4qEdEfC4iTkbEcxFxXdm/hCRpvmau3N8E/ltm/gywBbgrIt4H7AGOZOZG4EixD3ATsLH42gXc1/FeS5LOa8lwz8xXMvOZYvufgReAYWA7cKBodgDYUWxvBx7ImqeAwYi4ouM9lyQ11NKYe0RsADYDTwOXZ+YrUPsDAFxWNBsGTs35tvGitvBn7YqI0YgYnZwsZ56nJK1VTYd7RPwb4EvA72Xm987XtE5t0f3NzNyfmSOZOTI0NNRsNyRJTWgq3COin1qw/2VmPlqUX50dbik+zxT1cWD9nG9fB5zuTHclSc1oZrZMAPcDL2TmH805dAjYWWzvBB6bU7+9mDWzBTg7O3wjSeqOdzXRZivwH4DjEfHNovY/gb3AwxFxJ/AycEtx7AngI8BJ4A3gjo72WJK0pCXDPTO/QeMHPm+o0z6Bu9rslySpDT3/hKokaTHDXZIqyHCXpAoy3CWpggx3Saogw12SKshwl6QKMtwlqYIMd0mqIMNdkirIcJekCjLcJamCDHdJqiDDXZIqyHCXpAoy3CWpggx3Saogw12SKshwl6QKMtwlqYKWDPeI+NOIOBMR35pTuyQivhYRLxafFxf1iIjPRcTJiHguIq4rs/OSpPqauXL/M+DGBbU9wJHM3AgcKfYBbgI2Fl+7gPs6001JUiuWDPfM/BvgtQXl7cCBYvsAsGNO/YGseQoYjIgrOtVZSVJzljvmfnlmvgJQfF5W1IeBU3PajRe1RSJiV0SMRsTo5OTkMrshSaqn0zdUo04t6zXMzP2ZOZKZI0NDQx3uhiStbcsN91dnh1uKzzNFfRxYP6fdOuD08rsnSVqO5Yb7IWBnsb0TeGxO/fZi1swW4Ozs8I0kqXvetVSDiHgQ+PfApRExDnwC2As8HBF3Ai8DtxTNnwA+ApwE3gDuKKHPkqQlLBnumXlbg0M31GmbwF3tdkqS1B6fUJWkCjLcJamCDHdJqiDDXZIqyHCXpAoy3CWpggx3Saogw12SKshwl6QuiHrLKp6n3i7DXZK6IOuuj9u43i7DXZIqyHCXpC5wWEaSKshhGUmqoOHBgZbq7TLcJakLdm/bxEB/37zaQH8fu7dtKuV8S67nLklq347NwwDsO3yC01PTXDk4wO5tm96ud5rhLkldsmPzcGlhvlDPh3v/BXDurfp1SVpNDo5NeOXerDfrBPv56pK0Eg6OTXD3o8eZPjcDwMTUNHc/ehyglIAv5fo2Im6MiBMRcTIi9pRxjllXNrjT3KguSSth3+ETbwf7rOlzM+w7fKKU83U83COiD/gT4CbgfcBtEfG+Tp9nVrfvQEvScpyemm6p3q4yrtw/CJzMzJcy84fAF4DtJZwHqP135lM3X8Pw4ABBbc7op26+pms3LSSpGd0eZShjzH0YODVnfxy4fmGjiNgF7AK46qqr2jphN+9AS9Jy7N62ad6YO5Q7ylDGlXu9lRIWPWCbmfszcyQzR4aGhkrohiStHt0eZSjjyn0cWD9nfx1wuoTzSFJP6eYoQxlX7n8HbIyIqyPiQuBW4FAJ55EkNdDxK/fMfDMi/jNwGOgD/jQzn+/0eSRJjZXyEFNmPgE8UcbPliQtzYf0JamCDHdJqqDIsl4D0konIiaB73bgR10K/GMHfo4klalTWfWTmVl3LvmqCPdOiYjRzBxZ6X5I0vl0I6sclpGkCjLcJamCqhbu+1e6A5LUhNKzqlJj7pKkmqpduUuSMNwlqZJ6Ptyj5hsRcdOc2sci4qsr2S9JmisiMiL+cM7+f4+Ie8o6X8+He9ZuGvxH4I8i4t0RcRHwv4C7VrZnkjTPD4CbI+LSbpys58MdIDO/BXwZ+H3gE8ADmfntle2VJM3zJrVZMv+1GycrZVXIFfJJ4Bngh4BPqUpajf4EeC4i/nfZJ6pMuGfmv0bEQ8C/ZOYPVro/krRQZn4vIh4A/gswXea5KjEsM8dbxZckrVafAe4ELirzJFULd0la1TLzNeBhagFfGsNdkrrvD6kt+1salx+QpAryyl2SKshwl6QKMtwlqYIMd0mqIMNdkirIcJekCjLcJamC/j8Kk91UbWD20AAAAABJRU5ErkJggg==\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-15T15:12:26.115Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "48156867-56bf-4a00-a797-c9d61cc6da55",
     "hasError": false,
     "id": "b7385fb3-70d7-4823-9658-b1d7f96cb9c4",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:26.158Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "eead6baa-3105-4872-9295-92914f113a60",
     "hasError": true,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "ename": "AttributeError",
       "evalue": "'NoneType' object has no attribute 'shape'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-19-37f53bd81cfc>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Let's drop the rest of the missing values:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'shape'"
       ]
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata = data.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-15T15:12:26.254Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "b520a481-8033-468c-98fc-8a9ad93440d0",
     "hasError": true,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "ename": "AttributeError",
       "evalue": "'NoneType' object has no attribute 'dropna'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-20-01dc68565c83>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Let's drop the rest of the missing values:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'dropna'"
       ]
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata = data.dropna(inplace = True)\ndata.shape()"
    },
    "executionTime": "2020-09-15T15:12:33.065Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "59d157cc-8aff-467e-b57f-fd70273f995e",
     "hasError": true,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "ename": "AttributeError",
       "evalue": "'NoneType' object has no attribute 'dropna'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-21-45f6f305c408>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Let's drop the rest of the missing values:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'dropna'"
       ]
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape()"
    },
    "executionTime": "2020-09-15T15:12:40.864Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "4314093f-059b-4143-b964-bde1841124dc",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T15:12:49.503Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "affb3e56-6f3a-469e-ada0-7f9ff43341b9",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T15:12:49.585Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "eda057ba-1622-4516-bfb9-7d767b488383",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T15:12:49.614Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "f8fc21d7-4e49-41f4-83fc-b052538fcd38",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T15:12:49.623Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "37600ac8-1bab-4407-96ec-e01292d186a3",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T15:12:49.669Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "9b962ef6-6a7c-4b58-bb96-1b2720e67ad8",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002740</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002740   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T15:12:49.729Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "5c7b310d-6232-4316-bfd6-44b7ee28ddc9",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-15T15:12:49.751Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "32a94f3e-c262-4b57-bf14-7891b74ecf9e",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T15:12:49.936Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "1f7f4615-4c26-4740-86a6-7ebaa084eaca",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T15:12:49.993Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "1957e159-1033-4bd0-b9cc-1ea9c3d4172b",
     "hasError": false,
     "id": "a91c99c8-bc90-4abf-9697-1b9bf244f7f6",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:50.028Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "2f7498f1-327c-48f6-8a88-2fce37310128",
     "hasError": false,
     "id": "ce7cc0c1-cc6f-43b9-b398-fce21918dddd",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x20df3b9f048>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-15T15:12:50.177Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "1ba921b0-3345-439d-8510-e86470dab70d",
     "hasError": false,
     "id": "a6673590-5897-4f3c-b3fd-1d200199e39b",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-15T15:12:50.228Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "cb55122c-b744-4cbb-bb59-9ebc9811e783",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T15:12:50.240Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "02f9efaf-13a2-48a6-82a9-ec3a39edf7c9",
     "hasError": false,
     "id": "7ca9f7f4-e92e-4f57-856d-222aa03efc39",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:50.281Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "89e730ba-9394-44f4-adf4-d409a3c1b205",
     "hasError": false,
     "id": "b624d0a5-2039-4e25-9686-750344751d57",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x20df3c396d8>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-15T15:12:50.447Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "df75ba44-3846-4824-ad69-598520877581",
     "hasError": false,
     "id": "b20ded26-ea29-4156-9401-c84f26493298",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:50.460Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "aaf57e05-1e94-489d-b0b6-0d6857770f25",
     "hasError": false,
     "id": "07812e65-fa2c-4969-9d59-d20e16890e5e",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x20df3c9d710>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-15T15:12:50.616Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "77ab919e-3f11-4159-95d9-691be8d5faed",
     "hasError": false,
     "id": "b7385fb3-70d7-4823-9658-b1d7f96cb9c4",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:12:50.633Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "4686740f-f33d-42fb-b9ab-6299e652724d",
     "hasError": true,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "ename": "TypeError",
       "evalue": "'tuple' object is not callable",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-19-45f6f305c408>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Let's drop the rest of the missing values:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;31mTypeError\u001b[0m: 'tuple' object is not callable"
       ]
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape()"
    },
    "executionTime": "2020-09-15T15:12:50.754Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "386bf5a0-7c76-4392-8b96-293f3414fa8b",
     "hasError": false,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-15T15:12:55.187Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "cbfeca82-d6fe-4a5a-9ffd-77d0553b3e19",
     "hasError": false,
     "id": "329bc3eb-dc5e-47e4-b68f-f5eeac0c5251",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-15T15:12:59.413Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "138a466e-b48f-41d0-83f6-9987ce97f7af",
     "hasError": false,
     "id": "b695345c-5629-45c7-9a70-a53ac8c4e63e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 56.0+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-15T15:13:01.580Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "d0e6673c-4c8b-49cc-86ce-3ce2fd5c641b",
     "hasError": false,
     "id": "fb442f8e-e916-42c9-858f-4f883c589a8f",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)"
    },
    "executionTime": "2020-09-15T15:13:05.271Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "73766164-8b56-42ed-a038-b0ed9c1ae185",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:12]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T15:13:07.689Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "f883982c-d315-486c-b905-a5549516ece7",
     "hasError": false,
     "id": "84a44a9b-09b1-48f6-bfdf-1419a2846a61",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(5), int64(1), object(2)\nmemory usage: 47.0+ KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-15T15:13:39.094Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "40b914a0-ac58-42bd-8123-9aca54924bae",
     "hasError": true,
     "id": "bc6de626-c3a1-4c8f-92de-8e9ba4585ad2",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "could not convert string to float: '3+'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-26-664012bd4b97>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mmodel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mExtraTreesClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfeature_importances_\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#use inbuilt class feature_importances of tree based classifiers\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;31m#plot graph of feature importances for better visualization\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\sklearn\\ensemble\\_forest.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    293\u001b[0m         \"\"\"\n\u001b[0;32m    294\u001b[0m         \u001b[1;31m# Validate or convert input data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 295\u001b[1;33m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"csc\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    296\u001b[0m         \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'csc'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    297\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[0;32m    529\u001b[0m                     \u001b[0marray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0marray\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"unsafe\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    530\u001b[0m                 \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 531\u001b[1;33m                     \u001b[0marray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    532\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    533\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\numpy\\core\\_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[1;34m(a, dtype, order)\u001b[0m\n\u001b[0;32m     83\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     84\u001b[0m     \"\"\"\n\u001b[1;32m---> 85\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morder\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     86\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     87\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: could not convert string to float: '3+'"
       ]
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-15T15:16:42.775Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "48742192-f327-43a2-a6fc-709134483ca2",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T15:18:42.068Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "da6be2c7-5a82-4e0b-a66a-cac3c40e17dd",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T15:18:42.121Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "97703c2b-8dcf-47dd-a735-fd8871358d99",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T15:18:42.200Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "5622b5b4-bef3-4d1e-bad6-1109471f6bcf",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T15:18:42.213Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "bcf659a4-9376-4388-b37e-b190260188e8",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T15:18:42.228Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "a0f2dc69-9c3d-4718-8b4d-193932503844",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002505</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002505   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T15:18:42.381Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "7d290aa5-3790-4ff9-881f-e610fbac9b30",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-15T15:18:42.406Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "7ec70bd8-a263-4b1a-9645-435dcd0db08e",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "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ZtaIRYsWceSRR+7Uft9997FgwQJeeukl3nvvPY466ii+8IUvNPp8gwcPZv78+fz617/mhhtu4De/+Q2XXnopffr04Qc/+EGr1OyRu5lZMz399NNMnDiRrl27MmTIEE444QTmzp3b6HZnnnkmAEceeSQrVqxok9oc7mZmjTjkkEOYN2/eTu27ugZ1t27d2LZt2/bl+vuo9+zZE4CuXbuydevWVqx0B4e7mVkjxo0bx5YtW5g6der2trlz5zJgwABmzJhBbW0tNTU1PPnkkxx99NHsu+++LFmyhC1btvD+++8zZ86cRl+jb9++bNq0qdVq9py7mXU47b2nlSTuv/9+rrzySq677jqKioq27wq5efNmDj/8cCTxy1/+kr322guAc889l9GjRzNixAjGjBnT6GuceuqpnH322TzwwAPceuutHH/88S2reVe/VuR4c12BKuCdiDhF0nBgOjAQmA9cEBGfSOoJ/B44ElgHnBcRKxp67srKyugIF+voaLtC9uzWhYevOJ79S/ow7ZkV3DT7NW4+r4JDh/WnT89uLF39Af86axGL3vmA8kF78G9njmbUXn3p3q0LL769gZ/cv4i313/UZvV5V0jL19KlSznooIMKXUZB5foMJM2LiMpc/ZsyLXMFsDRr+XpgckSMADYAlyTtlwAbIuIAYHLSzwrg/5w4gqH9i7Yv9y3qxl79i7j9iTe4/Yk3qCgr5rbzM3sA7NW/iC6CyX97jburVnL8iBKuP2t0oUo3sxbKa1pGUilwMnAt8P+UOdHBOOAbSZdpwE+B24DTkscA9wC/kqTI91cEaxWj9urLJccN56bZr/HjkzI/7Ve//zEn3fIUdf8SXz5oCIeV9qeoexfmvbWB86Y8t3370yuGMWJIn0KUbmatIN+R+83APwN1f/4dBGyMiLo/81YDw5LHw4CVAMn695P+1k4kuO6s0fz+2bdYWL1xe3vtttge7MOKe7H/nr1ZWL2Rjz/dxqe1O372HjasPwN69+CF5evbu3SzXerM48PmvPdGw13SKcDaiMjeDyjXKcoij3XZzztJUpWkqpqamryKtfycc2QZpQN6cd/8aob0y0zL9C3qxsDePQAo6dOT3118FJ9s3cb3Z770mW33G9ybqRdWsnL9R1wza3G7126WS1FREevWreuUAV93PveioqLGO2fJZ1rmWODrkk4CioB+ZEby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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T15:18:42.592Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "8a9a2f0a-d9a4-4882-8bb4-42400d6621ba",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T15:18:42.642Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "80525cf6-4d33-45a7-a21c-235bf654c168",
     "hasError": false,
     "id": "a91c99c8-bc90-4abf-9697-1b9bf244f7f6",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:18:42.673Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "b5c2f62d-c1ba-4b3c-9f85-7eb207e3a882",
     "hasError": false,
     "id": "ce7cc0c1-cc6f-43b9-b398-fce21918dddd",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1f0a3b0d710>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-15T15:18:42.825Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "dd2b6434-e88b-48df-92f9-e1c499b38acb",
     "hasError": false,
     "id": "a6673590-5897-4f3c-b3fd-1d200199e39b",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-15T15:18:42.871Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "6717c24c-11a3-4bbb-8d92-65dbabcb3649",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T15:18:42.903Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "4685ec80-895b-4689-88db-09b44181acea",
     "hasError": false,
     "id": "7ca9f7f4-e92e-4f57-856d-222aa03efc39",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:18:42.917Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "17549e08-49ed-4b7f-bf87-daf07bb74081",
     "hasError": false,
     "id": "b624d0a5-2039-4e25-9686-750344751d57",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1f0a3ba4e48>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-15T15:18:43.082Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "ad8fdcf1-9d34-4186-a862-3bd11a9ce002",
     "hasError": false,
     "id": "b20ded26-ea29-4156-9401-c84f26493298",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:18:43.096Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "04602040-d566-4e23-bafd-b8dd29e7107e",
     "hasError": false,
     "id": "07812e65-fa2c-4969-9d59-d20e16890e5e",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x1f0a3c528d0>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-15T15:18:43.218Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "88181401-0c3c-4e5a-914b-19b0f208ee47",
     "hasError": false,
     "id": "b7385fb3-70d7-4823-9658-b1d7f96cb9c4",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:18:43.256Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "1d96d4fe-d9e4-4c93-a99a-855238f7d4f4",
     "hasError": false,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-15T15:18:43.313Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "b7ca9aed-df6b-4445-bf1b-c7149e96c613",
     "hasError": false,
     "id": "329bc3eb-dc5e-47e4-b68f-f5eeac0c5251",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-15T15:18:43.321Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "f1bbf642-581c-4568-bbc2-191c0f926e18",
     "hasError": false,
     "id": "b695345c-5629-45c7-9a70-a53ac8c4e63e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 56.0+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-15T15:18:43.349Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "cf99253d-ec3a-44a5-8795-757b7f73b9f6",
     "hasError": true,
     "id": "fb442f8e-e916-42c9-858f-4f883c589a8f",
     "outputs": [
      {
       "ename": "SyntaxError",
       "evalue": "invalid syntax (<ipython-input-22-c758c7f44acc>, line 7)",
       "output_type": "error",
       "traceback": [
        "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-22-c758c7f44acc>\"\u001b[1;36m, line \u001b[1;32m7\u001b[0m\n\u001b[1;33m    data['Property_Area'] = np.where((data['Property_Area'] == 'Urban'), 0, (data['Property_Area'] == 'Rural'), 1, 2))\u001b[0m\n\u001b[1;37m                                                                                                                     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
       ]
      }
     ],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Property_Area'] = np.where((data['Property_Area'] == 'Urban'), 0, (data['Property_Area'] == 'Rural'), 1, 2))"
    },
    "executionTime": "2020-09-15T15:18:43.358Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "93bd3f9e-795a-41eb-8a80-ed2265f4e092",
     "hasError": true,
     "id": "fb442f8e-e916-42c9-858f-4f883c589a8f",
     "outputs": [
      {
       "ename": "SyntaxError",
       "evalue": "invalid syntax (<ipython-input-23-c69c4cb5d488>, line 7)",
       "output_type": "error",
       "traceback": [
        "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-23-c69c4cb5d488>\"\u001b[1;36m, line \u001b[1;32m7\u001b[0m\n\u001b[1;33m    data['Property_Area'] = np.where((data['Property_Area'] == 'Urban'), 0, (data['Property_Area'] == 'Rural'), 1, 2)))\u001b[0m\n\u001b[1;37m                                                                                                                     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
       ]
      }
     ],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Property_Area'] = np.where((data['Property_Area'] == 'Urban'), 0, (data['Property_Area'] == 'Rural'), 1, 2)))"
    },
    "executionTime": "2020-09-15T15:19:03.333Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "5416ba44-eb5b-4f5b-8335-162fa2c73060",
     "hasError": true,
     "id": "fb442f8e-e916-42c9-858f-4f883c589a8f",
     "outputs": [
      {
       "ename": "TypeError",
       "evalue": "where() takes from 1 to 3 positional arguments but 5 were given",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-24-55b4688faedb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Education'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwhere\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Education'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Graduate'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Self_Employed'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwhere\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Self_Employed'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Yes'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Property_Area'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwhere\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Property_Area'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Urban'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Property_Area'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Rural'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mwhere\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
        "\u001b[1;31mTypeError\u001b[0m: where() takes from 1 to 3 positional arguments but 5 were given"
       ]
      }
     ],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Property_Area'] = np.where((data['Property_Area'] == 'Urban'), 0, (data['Property_Area'] == 'Rural'), 1, 2)"
    },
    "executionTime": "2020-09-15T15:19:24.837Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "a5fb5813-c394-41b3-a976-9e85df058b73",
     "hasError": false,
     "id": "fb442f8e-e916-42c9-858f-4f883c589a8f",
     "outputs": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "C:\\Users\\Renate\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\ops\\array_ops.py:253: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n  res_values = method(rvalues)\n"
      }
     ],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Property_Area'] = np.where((data['Property_Area'] == 'Urban'), 0, np.where((data['Property_Area'] == 'Rural'), 1, 2))"
    },
    "executionTime": "2020-09-15T15:19:55.912Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "b724adbc-ff66-4b10-902e-55440d84730b",
     "hasError": false,
     "id": "84a44a9b-09b1-48f6-bfdf-1419a2846a61",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    int32  \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(6), int64(1), object(1)\nmemory usage: 44.8+ KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-15T15:19:59.747Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "dde8862f-0ac8-49d6-af1b-2318ed11b002",
     "hasError": false,
     "id": "a2e449ce-b95e-41f2-b83a-5c344938511e",
     "outputs": [],
     "persistentId": "60f98890-6d1b-4afe-823d-bb83f92fa871",
     "text": "data.drop('Dependents', axis=1, inplace=True)"
    },
    "executionTime": "2020-09-15T15:20:02.684Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "288a8208-2edb-4f87-ba66-cfdbe7b551d4",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:12]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T15:20:04.962Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "f21d7416-2e7a-4daf-a503-3ac11213991b",
     "hasError": false,
     "id": "cc5e41bb-037f-4e26-924a-339eee4828ec",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-15T15:20:42.411Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "509cf408-4885-4648-8a4f-c9b73b25ee85",
     "hasError": false,
     "id": "5f9b3baf-5b28-41e4-a25b-8a6034558f87",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-15T15:20:42.499Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "12af584c-7109-42a3-8529-ec1304d74daf",
     "hasError": false,
     "id": "cafe31ad-5c41-4a3a-942a-8b5245c6df21",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-15T15:20:42.537Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "354f139e-4626-4e86-9eb8-57c468642db1",
     "hasError": false,
     "id": "3e852281-48d1-4c57-bf1e-93d5ad8d698c",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-15T15:20:42.548Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "e0c3c66d-9a1b-47fc-94b1-aadf5b30dab6",
     "hasError": false,
     "id": "a98f646a-92b2-4403-b198-7d575a4463e8",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-15T15:20:42.627Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "48f2c423-2f6a-4001-81c3-56f3908831d3",
     "hasError": false,
     "id": "ec82ff3a-1625-4303-af5c-e5e5ea4364dc",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP001891</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP001891   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-15T15:20:42.647Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "2e24df4d-fb7d-4022-af31-747ac0eba97f",
     "hasError": false,
     "id": "71d118bd-0cc6-4228-aacf-7cb19ddd59c2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-15T15:20:42.694Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "ee8dd257-1fd4-4bf8-bde0-86e01fdecd85",
     "hasError": false,
     "id": "ca6dbced-62b6-4f92-a4ce-6df69ce137c7",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-15T15:20:42.903Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "07b4a9b6-bee0-43f2-813a-7066cf9741d0",
     "hasError": false,
     "id": "8bfc9b7a-8276-4c42-9d56-ec303afbcd49",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-15T15:20:42.972Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "456949aa-3178-40d9-a43c-b642f8fdef50",
     "hasError": false,
     "id": "a91c99c8-bc90-4abf-9697-1b9bf244f7f6",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:20:42.986Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "430a8bc9-dfe3-497c-8b7c-b15b0b191193",
     "hasError": false,
     "id": "ce7cc0c1-cc6f-43b9-b398-fce21918dddd",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x2dadd2111d0>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-15T15:20:43.111Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "5177d107-c478-488b-b772-3285ea659d87",
     "hasError": false,
     "id": "a6673590-5897-4f3c-b3fd-1d200199e39b",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-15T15:20:43.153Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "19950d51-1464-4ad6-b265-804600a6e3a6",
     "hasError": false,
     "id": "afb2104b-ca4b-42e6-8c99-fc0bd617c2d7",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-15T15:20:43.165Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "b45da4f2-7e81-4c1f-b819-9ee8071c1b44",
     "hasError": false,
     "id": "7ca9f7f4-e92e-4f57-856d-222aa03efc39",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:20:43.211Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "04a0f8e1-bf46-4ba8-b6a2-1432fda115f5",
     "hasError": false,
     "id": "b624d0a5-2039-4e25-9686-750344751d57",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x2dadd25d9e8>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-15T15:20:43.326Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "a86df314-ad77-4252-aa65-720be4f47953",
     "hasError": false,
     "id": "b20ded26-ea29-4156-9401-c84f26493298",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:20:43.368Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "fad3af54-f99c-44a2-b960-b6674e0f6c1b",
     "hasError": false,
     "id": "07812e65-fa2c-4969-9d59-d20e16890e5e",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x2dadd31cc50>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-15T15:20:43.525Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "cc2099c1-19c7-4b3a-80ad-b7470df1cc4e",
     "hasError": false,
     "id": "b7385fb3-70d7-4823-9658-b1d7f96cb9c4",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-15T15:20:43.540Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "a2745b23-eaa4-49e0-8805-c2b86f510157",
     "hasError": false,
     "id": "bd9d4b0f-d717-4f80-b8eb-ab7ffc2407ff",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-15T15:20:43.583Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "03ebdcee-58b4-4358-b3aa-68bc1c64213f",
     "hasError": false,
     "id": "329bc3eb-dc5e-47e4-b68f-f5eeac0c5251",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-15T15:20:43.596Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "25bdb238-6780-4af4-b5a0-7ed3f0fe0eb6",
     "hasError": false,
     "id": "b695345c-5629-45c7-9a70-a53ac8c4e63e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 56.0+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-15T15:20:43.615Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "1d548bd6-68dd-43b2-8317-5319e95947bc",
     "hasError": false,
     "id": "fb442f8e-e916-42c9-858f-4f883c589a8f",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)"
    },
    "executionTime": "2020-09-15T15:20:43.624Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "73721728-29a2-4d9e-8ba4-c4d8652bb711",
     "hasError": false,
     "id": "84a44a9b-09b1-48f6-bfdf-1419a2846a61",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(5), int64(1), object(2)\nmemory usage: 47.0+ KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-15T15:20:43.656Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "1aaf62b7-da44-4df9-a24d-cc6824a5ef21",
     "hasError": false,
     "id": "a2e449ce-b95e-41f2-b83a-5c344938511e",
     "outputs": [],
     "persistentId": "60f98890-6d1b-4afe-823d-bb83f92fa871",
     "text": "data.drop('Dependents', axis=1, inplace=True)\ndata.drop('Property_Area', axis=1, inplace=True)"
    },
    "executionTime": "2020-09-15T15:20:43.683Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "b500bb01-5a11-4d59-8e31-4d390f3b0981",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:12]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T15:20:44.333Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "6072fea3-64ba-4843-b3cb-994e9fee1998",
     "hasError": false,
     "id": "bc6de626-c3a1-4c8f-92de-8e9ba4585ad2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.0011803  0.00445812 0.00181729 0.00115316 0.00530516 0.00609704\n 0.00621194 0.00411852 0.11306887 0.85658961]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-15T15:20:44.791Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "788fc03a-f8da-4c9c-b5bd-f524c5c1342f",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:10]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T15:21:16.366Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "c37089ee-27e1-4153-b970-6b9bfffb788e",
     "hasError": false,
     "id": "bc6de626-c3a1-4c8f-92de-8e9ba4585ad2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[5.15724648e-04 3.25595328e-03 1.16526288e-03 7.31788319e-04\n 3.52176118e-03 4.44180990e-03 3.38741792e-03 2.87950571e-03\n 9.48820212e-02 8.85218755e-01]\n"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-15T15:21:20.579Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "815d38e6-3b87-4e76-856a-870ddf94928d",
     "hasError": false,
     "id": "7ef01eb0-bd1e-48f4-93c7-f5b302a626c9",
     "outputs": [
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:9]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-15T15:21:41.959Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "7eafbd63-0e64-4139-90fb-a180b30cbedd",
     "hasError": false,
     "id": "bc6de626-c3a1-4c8f-92de-8e9ba4585ad2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.01852694 0.01659373 0.0141336  0.01865666 0.26006935 0.13908706\n 0.23030099 0.05082751 0.25180416]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-15T15:21:45.223Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "026c189d-d128-43ac-8418-95c6a847f8e0",
     "hasError": true,
     "id": "bf8a8851-739b-4fee-8c1b-0de2dd428f0e",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "k should be >=0, <= n_features = 9; got 10. Use k='all' to return all features.",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-31-a326aba4af9a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m#apply SelectKBest class to extract top 10 best features\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mbestfeatures\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mSelectKBest\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mscore_func\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mchi2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mfit\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbestfeatures\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mdfscores\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscores_\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mdfcolumns\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\sklearn\\feature_selection\\_univariate_selection.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y)\u001b[0m\n\u001b[0;32m    346\u001b[0m                             % (self.score_func, type(self.score_func)))\n\u001b[0;32m    347\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 348\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_check_params\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    349\u001b[0m         \u001b[0mscore_func_ret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscore_func\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    350\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mscore_func_ret\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\sklearn\\feature_selection\\_univariate_selection.py\u001b[0m in \u001b[0;36m_check_params\u001b[1;34m(self, X, y)\u001b[0m\n\u001b[0;32m    512\u001b[0m             raise ValueError(\"k should be >=0, <= n_features = %d; got %r. \"\n\u001b[0;32m    513\u001b[0m                              \u001b[1;34m\"Use k='all' to return all features.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 514\u001b[1;33m                              % (X.shape[1], self.k))\n\u001b[0m\u001b[0;32m    515\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    516\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_get_support_mask\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: k should be >=0, <= n_features = 9; got 10. Use k='all' to return all features."
       ]
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k=10)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-15T15:23:29.805Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "a7063db6-feec-4cc1-a583-385517a3f69f",
     "hasError": false,
     "id": "bf8a8851-739b-4fee-8c1b-0de2dd428f0e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "               Specs         Score\n5  CoapplicantIncome  13483.850271\n4    ApplicantIncome   3509.190756\n6         LoanAmount     98.723124\n8     Credit_History     19.248679\n1            Married      2.015821\n2          Education      0.579009\n7   Loan_Amount_Term      0.363129\n0             Gender      0.306793\n3      Self_Employed      0.275664\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-15T15:23:46.169Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "2cb55804-ff38-4e03-ab81-ef391f018424",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-17T10:44:58.525Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "40c35300-c4f1-4091-af67-18088ae374c9",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T10:44:58.568Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "c1e17790-98ba-4a06-a305-23d078384d9b",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T10:44:58.704Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "dc9d315a-567b-44a6-b068-d431a2fbefa4",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T10:44:58.823Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "e8ee6527-3efd-4953-991b-ddcf79597583",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T10:44:58.849Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "045fd307-d269-4ca8-8956-72b730b2165d",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002308</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002308   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T10:44:58.879Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "55351d13-774b-414b-8700-68adf989ecdf",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T10:44:58.902Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "bc03381a-74a7-41cb-8441-8543366defb8",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "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ZtaIRYsWceSRR+7Uft9997FgwQJeeukl3nvvPY466ii+8IUvNPp8gwcPZv78+fz617/mhhtu4De/+Q2XXnopffr04Qc/+EGr1OyRu5lZMz399NNMnDiRrl27MmTIEE444QTmzp3b6HZnnnkmAEceeSQrVqxok9oc7mZmjTjkkEOYN2/eTu27ugZ1t27d2LZt2/bl+vuo9+zZE4CuXbuydevWVqx0B4e7mVkjxo0bx5YtW5g6der2trlz5zJgwABmzJhBbW0tNTU1PPnkkxx99NHsu+++LFmyhC1btvD+++8zZ86cRl+jb9++bNq0qdVq9py7mXU47b2nlSTuv/9+rrzySq677jqKioq27wq5efNmDj/8cCTxy1/+kr322guAc889l9GjRzNixAjGjBnT6GuceuqpnH322TzwwAPceuutHH/88S2reVe/VuR4c12BKuCdiDhF0nBgOjAQmA9cEBGfSOoJ/B44ElgHnBcRKxp67srKyugIF+voaLtC9uzWhYevOJ79S/ow7ZkV3DT7NW4+r4JDh/WnT89uLF39Af86axGL3vmA8kF78G9njmbUXn3p3q0LL769gZ/cv4i313/UZvV5V0jL19KlSznooIMKXUZB5foMJM2LiMpc/ZsyLXMFsDRr+XpgckSMADYAlyTtlwAbIuIAYHLSzwrg/5w4gqH9i7Yv9y3qxl79i7j9iTe4/Yk3qCgr5rbzM3sA7NW/iC6CyX97jburVnL8iBKuP2t0oUo3sxbKa1pGUilwMnAt8P+UOdHBOOAbSZdpwE+B24DTkscA9wC/kqTI91cEaxWj9urLJccN56bZr/HjkzI/7Ve//zEn3fIUdf8SXz5oCIeV9qeoexfmvbWB86Y8t3370yuGMWJIn0KUbmatIN+R+83APwN1f/4dBGyMiLo/81YDw5LHw4CVAMn695P+1k4kuO6s0fz+2bdYWL1xe3vtttge7MOKe7H/nr1ZWL2Rjz/dxqe1O372HjasPwN69+CF5evbu3SzXerM48PmvPdGw13SKcDaiMjeDyjXKcoij3XZzztJUpWkqpqamryKtfycc2QZpQN6cd/8aob0y0zL9C3qxsDePQAo6dOT3118FJ9s3cb3Z770mW33G9ybqRdWsnL9R1wza3G7126WS1FREevWreuUAV93PveioqLGO2fJZ1rmWODrkk4CioB+ZEby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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T10:44:59.070Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "47c42742-f1e7-46f2-9d36-df29b21d601a",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T10:44:59.114Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "cde6900e-d655-40ac-848b-fabb211cbf31",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:44:59.148Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "3669e51d-b138-436c-8198-b6171789e6c9",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1d603a5d358>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T10:44:59.295Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "5149eb09-3290-43cf-a693-943be2fa4075",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T10:44:59.374Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "7655eefd-7b2a-4dc6-9972-253c33e98264",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T10:44:59.387Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "b289a722-23af-45c6-a2f7-6cce2de3e6c9",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:44:59.424Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "7ce3d9f6-9207-48c5-8d3a-94ecf2242864",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1d603aa9828>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T10:44:59.576Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "6b16dc5c-2579-4daa-b5de-9be6b3f9e518",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:44:59.589Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "c0c59bcf-a06b-4abb-854e-641697970dc1",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x1d603b6dda0>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T10:44:59.728Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "8c866185-744e-498b-8d7f-cab8b6ac5f17",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:44:59.816Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "167d0d30-ddac-4ceb-bfc0-0b420f5debce",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T10:44:59.876Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "df0f584b-b19a-4371-808c-2761c51cb9b0",
     "hasError": false,
     "id": "8c2fad05-28d0-4a39-a610-ecc739cf5dc4",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n    <tr>\n      <th>Loan_Status</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>N</th>\n      <td>3948</td>\n      <td>0.0</td>\n      <td>135.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>3756</td>\n      <td>1280.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "             ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\nLoan_Status                                                                     \nN                       3948                0.0       135.0             360.0   \nY                       3756             1280.0       128.0             360.0   \n\n             Credit_History  \nLoan_Status                  \nN                       1.0  \nY                       1.0  "
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "518e45c1-b195-4fa4-b885-6104591dc036",
     "text": "data.groupby('Loan_Status').median() #Check what numerical features are good predictors"
    },
    "executionTime": "2020-09-17T10:44:59.886Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "6e106a0b-a941-4496-89c3-629cf4f891f7",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T10:44:59.896Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "ca8f1aaa-d27f-4db5-a991-80d1fc1fad71",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 56.0+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T10:44:59.908Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "4196646a-f17b-46eb-b2fb-7246fc551fc4",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)"
    },
    "executionTime": "2020-09-17T10:44:59.913Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "db6b7516-d38f-4ba4-bd2c-67794b151a65",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(5), int64(1), object(2)\nmemory usage: 47.0+ KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T10:44:59.941Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "f6913dd8-34bf-4ed0-bfaf-c675684a9dd7",
     "hasError": false,
     "id": "c0f77a52-4bef-4b6e-95e3-f5e7812867c0",
     "outputs": [],
     "persistentId": "60f98890-6d1b-4afe-823d-bb83f92fa871",
     "text": "data.drop('Dependents', axis=1, inplace=True)\ndata.drop('Property_Area', axis=1, inplace=True)"
    },
    "executionTime": "2020-09-17T10:44:59.950Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "5570df9a-3571-4e46-a6d7-e8d1bca2a14b",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:9]  #independent columns\ny = data.iloc[:,-1]    #target column i.e price range\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T10:45:00.795Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "cfe9ddec-47d3-4c7e-b13b-1c5494a95169",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.0178597  0.0168376  0.01305599 0.01812008 0.25909492 0.13855129\n 0.23575467 0.04948604 0.25123972]\n"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T10:45:01.590Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "3b9944c6-5941-4b84-a9fc-c194afa9dd84",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "               Specs         Score\n5  CoapplicantIncome  13483.850271\n4    ApplicantIncome   3509.190756\n6         LoanAmount     98.723124\n8     Credit_History     19.248679\n1            Married      2.015821\n2          Education      0.579009\n7   Loan_Amount_Term      0.363129\n0             Gender      0.306793\n3      Self_Employed      0.275664\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T10:45:01.624Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "4f0eec95-e098-499e-b6aa-264db6040931",
     "hasError": true,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.01628712 0.01597558 0.01211388 0.01797078 0.25425208 0.1428579\n 0.2365506  0.0517475  0.25224456]\n"
      },
      {
       "ename": "AttributeError",
       "evalue": "'Rectangle' object has no property 'ascending'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-29-189467e8e18b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;31m#plot graph of feature importances for better visualization\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mfeat_importances\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfeature_importances_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m \u001b[0mfeat_importances\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlargest\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'barh'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mascending\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\plotting\\_core.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    845\u001b[0m                     \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlabel_name\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    846\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 847\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mplot_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    848\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    849\u001b[0m     \u001b[0m__call__\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m__doc__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\__init__.py\u001b[0m in \u001b[0;36mplot\u001b[1;34m(data, kind, **kwargs)\u001b[0m\n\u001b[0;32m     59\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"ax\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"left_ax\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     60\u001b[0m     \u001b[0mplot_obj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mPLOT_CLASSES\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 61\u001b[1;33m     \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     62\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     63\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py\u001b[0m in \u001b[0;36mgenerate\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    261\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    262\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_setup_subplots\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 263\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    264\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_add_table\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    265\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_make_legend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py\u001b[0m in \u001b[0;36m_make_plot\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1403\u001b[0m                     \u001b[0mlabel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlabel\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1404\u001b[0m                     \u001b[0mlog\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1405\u001b[1;33m                     \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1406\u001b[0m                 )\n\u001b[0;32m   1407\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_add_legend_handle\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrect\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py\u001b[0m in \u001b[0;36m_plot\u001b[1;34m(cls, ax, x, y, w, start, log, **kwds)\u001b[0m\n\u001b[0;32m   1443\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mclassmethod\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1444\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_plot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstart\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlog\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1445\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbarh\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlog\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1446\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1447\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_decorate_ticks\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mticklabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstart_edge\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mend_edge\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\matplotlib\\axes\\_axes.py\u001b[0m in \u001b[0;36mbarh\u001b[1;34m(self, y, width, height, left, align, **kwargs)\u001b[0m\n\u001b[0;32m   2594\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'orientation'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'horizontal'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2595\u001b[0m         patches = self.bar(x=left, height=height, width=width, bottom=y,\n\u001b[1;32m-> 2596\u001b[1;33m                            align=align, **kwargs)\n\u001b[0m\u001b[0;32m   2597\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mpatches\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2598\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\matplotlib\\__init__.py\u001b[0m in \u001b[0;36minner\u001b[1;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1597\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1598\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1599\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1600\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1601\u001b[0m         \u001b[0mbound\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0max\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\matplotlib\\axes\\_axes.py\u001b[0m in \u001b[0;36mbar\u001b[1;34m(self, x, height, width, bottom, align, **kwargs)\u001b[0m\n\u001b[0;32m   2429\u001b[0m                 \u001b[0mlabel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'_nolegend_'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2430\u001b[0m                 )\n\u001b[1;32m-> 2431\u001b[1;33m             \u001b[0mr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2432\u001b[0m             \u001b[0mr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_path\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_interpolation_steps\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m100\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2433\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0morientation\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'vertical'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\matplotlib\\artist.py\u001b[0m in \u001b[0;36mupdate\u001b[1;34m(self, props)\u001b[0m\n\u001b[0;32m    972\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    973\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 974\u001b[1;33m             \u001b[0mret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mv\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mv\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    975\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    976\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mret\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\matplotlib\\artist.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    972\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    973\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 974\u001b[1;33m             \u001b[0mret\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mv\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mv\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    975\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    976\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mret\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\matplotlib\\artist.py\u001b[0m in \u001b[0;36m_update_property\u001b[1;34m(self, k, v)\u001b[0m\n\u001b[0;32m    968\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    969\u001b[0m                     raise AttributeError('{!r} object has no property {!r}'\n\u001b[1;32m--> 970\u001b[1;33m                                          .format(type(self).__name__, k))\n\u001b[0m\u001b[0;32m    971\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mv\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    972\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mAttributeError\u001b[0m: 'Rectangle' object has no property 'ascending'"
       ]
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh', ascending = False)\nplt.show()"
    },
    "executionTime": "2020-09-17T10:46:38.591Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "91c2b81c-6c45-4f73-b10f-3f5ddbb59152",
     "hasError": true,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.01672224 0.01723005 0.01287279 0.02050284 0.2553199  0.13922588\n 0.23529056 0.05038609 0.25244965]\n"
      },
      {
       "ename": "TypeError",
       "evalue": "__init__() got an unexpected keyword argument 'ascending'",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-30-a55e881706a4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfeature_importances_\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#use inbuilt class feature_importances of tree based classifiers\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;31m#plot graph of feature importances for better visualization\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m \u001b[0mfeat_importances\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfeature_importances_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mascending\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m \u001b[0mfeat_importances\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlargest\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'barh'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'ascending'"
       ]
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns, ascending = False)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T10:47:05.501Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "7ed19cd7-e558-4648-80ec-25826025613d",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.01818717 0.01573894 0.0125083  0.01902714 0.25572304 0.14079656\n 0.23744057 0.04803273 0.25254556]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T10:47:18.407Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "76b068ed-509f-4c5a-8195-e5a1026a6009",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-17T10:55:52.464Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "ce3d61a8-e726-4218-9374-e440c8818789",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 33,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T10:55:52.495Z"
   },
   {
    "cell": {
     "executionCount": 34,
     "executionEventId": "cede5e67-de8d-4619-a366-84feaf5b1e3e",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T10:55:52.521Z"
   },
   {
    "cell": {
     "executionCount": 35,
     "executionEventId": "16ede787-1e0a-4ac5-b33a-3bc93005ae0c",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 35,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T10:55:52.527Z"
   },
   {
    "cell": {
     "executionCount": 36,
     "executionEventId": "6f46ecd2-1545-4a8d-bd0c-0e8b0c0a3ffa",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 36,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T10:55:52.533Z"
   },
   {
    "cell": {
     "executionCount": 37,
     "executionEventId": "89fd34be-0108-44fb-9108-094498dfdb45",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002308</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002308   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 37,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T10:55:52.545Z"
   },
   {
    "cell": {
     "executionCount": 38,
     "executionEventId": "428f5d75-8706-48d0-b310-3a56f7094bc7",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T10:55:52.557Z"
   },
   {
    "cell": {
     "executionCount": 39,
     "executionEventId": "a81e1dc0-94b5-498c-a25f-d6dc752200bb",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T10:55:52.638Z"
   },
   {
    "cell": {
     "executionCount": 40,
     "executionEventId": "1c10a778-7714-41e0-9be7-d1c307d72c44",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T10:55:52.684Z"
   },
   {
    "cell": {
     "executionCount": 41,
     "executionEventId": "4b7176d5-2315-4f1f-88d7-0fe24b715c3f",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 41,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:55:52.719Z"
   },
   {
    "cell": {
     "executionCount": 42,
     "executionEventId": "3af1f969-d7ef-41f3-a876-130d7c38cb3d",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1d605b3ae80>"
       },
       "execution_count": 42,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T10:55:52.852Z"
   },
   {
    "cell": {
     "executionCount": 43,
     "executionEventId": "26f2dbd0-7281-452f-9374-b1febf95fa89",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T10:55:52.895Z"
   },
   {
    "cell": {
     "executionCount": 44,
     "executionEventId": "0d1c5896-e651-4452-9194-d193d08ee919",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T10:55:52.942Z"
   },
   {
    "cell": {
     "executionCount": 45,
     "executionEventId": "ea491e44-8481-4a9a-b0c9-961ef3f6cce0",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 45,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:55:52.979Z"
   },
   {
    "cell": {
     "executionCount": 46,
     "executionEventId": "c61a36c9-97b3-4a7b-9dc9-47dbdd8a1787",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1d605b99f28>"
       },
       "execution_count": 46,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T10:55:53.167Z"
   },
   {
    "cell": {
     "executionCount": 47,
     "executionEventId": "07a5b802-6210-44b7-b8d5-fff6f8861393",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 47,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:55:53.199Z"
   },
   {
    "cell": {
     "executionCount": 48,
     "executionEventId": "788bb8bb-3c3e-450c-a17e-0e17ea25655d",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x1d605c2f978>"
       },
       "execution_count": 48,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T10:55:53.484Z"
   },
   {
    "cell": {
     "executionCount": 49,
     "executionEventId": "5b04bf50-d685-41b9-9b21-bf5aef821bd1",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 49,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T10:55:53.538Z"
   },
   {
    "cell": {
     "executionCount": 50,
     "executionEventId": "96c9ab6f-d9b1-4bef-83b8-2151b04400fc",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 50,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T10:55:53.567Z"
   },
   {
    "cell": {
     "executionCount": 51,
     "executionEventId": "fb8c55e7-293c-438b-b464-2190274f2d50",
     "hasError": false,
     "id": "8c2fad05-28d0-4a39-a610-ecc739cf5dc4",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n    <tr>\n      <th>Loan_Status</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>N</th>\n      <td>3948</td>\n      <td>0.0</td>\n      <td>135.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>3756</td>\n      <td>1280.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "             ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\nLoan_Status                                                                     \nN                       3948                0.0       135.0             360.0   \nY                       3756             1280.0       128.0             360.0   \n\n             Credit_History  \nLoan_Status                  \nN                       1.0  \nY                       1.0  "
       },
       "execution_count": 51,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "518e45c1-b195-4fa4-b885-6104591dc036",
     "text": "data.groupby('Loan_Status').median() #Check what numerical features are good predictors"
    },
    "executionTime": "2020-09-17T10:55:53.586Z"
   },
   {
    "cell": {
     "executionCount": 52,
     "executionEventId": "5b3c554e-0b6b-4101-a307-002b4a950a9f",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T10:55:53.626Z"
   },
   {
    "cell": {
     "executionCount": 53,
     "executionEventId": "6db68b92-8c53-4e9a-a948-cc4d2e523d92",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 56.0+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T10:55:53.646Z"
   },
   {
    "cell": {
     "executionCount": 54,
     "executionEventId": "4e173959-e87c-4d51-94cb-2b5915c19a7b",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)"
    },
    "executionTime": "2020-09-17T10:55:53.654Z"
   },
   {
    "cell": {
     "executionCount": 55,
     "executionEventId": "e4781d6d-c069-42c4-a0c4-21de029f7fb7",
     "hasError": false,
     "id": "5f26fc7a-d43a-4466-bf5b-7d0d46cb51bf",
     "outputs": [],
     "persistentId": "5705657a-3b17-4d57-887e-06150dc1d36a",
     "text": "data['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1)\n"
    },
    "executionTime": "2020-09-17T10:55:53.694Z"
   },
   {
    "cell": {
     "executionCount": 56,
     "executionEventId": "3ad117e7-b781-416a-a3f0-6f746cdc7033",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "for x in data['Property_Area']:\n    if x == 'Rural':\n        0\n    if x == 'Urban':\n        1\n    else: \n        2\n"
    },
    "executionTime": "2020-09-17T10:56:24.937Z"
   },
   {
    "cell": {
     "executionCount": 57,
     "executionEventId": "84b5b132-ad9a-4bfe-af31-6c4a22a94484",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    int32  \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(6), int64(1), object(1)\nmemory usage: 44.8+ KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T10:56:27.661Z"
   },
   {
    "cell": {
     "executionCount": 58,
     "executionEventId": "8e345e46-6d6e-4c3b-abae-61054fe79a2a",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "for x in data['Property_Area']:\n    if x == 'Rural':\n        x = 0\n    if x == 'Urban':\n        x = 1\n    else: \n        x = 2\n"
    },
    "executionTime": "2020-09-17T10:56:43.533Z"
   },
   {
    "cell": {
     "executionCount": 59,
     "executionEventId": "cd784caa-504a-47bf-82c5-cfd4a0ed1160",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    int32  \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(6), int64(1), object(1)\nmemory usage: 44.8+ KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T10:56:45.440Z"
   },
   {
    "cell": {
     "executionCount": 60,
     "executionEventId": "788128e2-e933-4bf0-9499-8a5e3084f06a",
     "hasError": false,
     "id": "e92f3966-9e32-4114-a83c-fcf45baceeaa",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "   Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0       0        0           0          1              0             5849   \n1       0        1           1          1              0             4583   \n2       0        1           0          1              1             3000   \n3       0        1           0          0              0             2583   \n4       0        0           0          1              0             6000   \n\n   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                0.0  146.412162             360.0             1.0   \n1             1508.0  128.000000             360.0             1.0   \n2                0.0   66.000000             360.0             1.0   \n3             2358.0  120.000000             360.0             1.0   \n4                0.0  141.000000             360.0             1.0   \n\n  Property_Area  Loan_Status  \n0         Urban            1  \n1         Rural            0  \n2         Urban            1  \n3         Urban            1  \n4         Urban            1  "
       },
       "execution_count": 60,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "4c1b4e63-9832-426f-a60f-17f65dc63d50",
     "text": "data.head()"
    },
    "executionTime": "2020-09-17T10:57:20.260Z"
   },
   {
    "cell": {
     "executionCount": 61,
     "executionEventId": "8d7878a1-56eb-4f2f-90ed-5dcda4fe057d",
     "hasError": true,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-61-d5237ed1cd14>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      6\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m         \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Property_Area'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mchangex\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mapply\u001b[1;34m(self, func, axis, raw, result_type, args, **kwds)\u001b[0m\n\u001b[0;32m   6876\u001b[0m             \u001b[0mkwds\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6877\u001b[0m         )\n\u001b[1;32m-> 6878\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   6879\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6880\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapplymap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;34m\"DataFrame\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\apply.py\u001b[0m in \u001b[0;36mget_result\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    184\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_raw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    185\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 186\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    187\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    188\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_empty_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    294\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    295\u001b[0m                 result = libreduction.compute_reduction(\n\u001b[1;32m--> 296\u001b[1;33m                     \u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdummy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdummy\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    297\u001b[0m                 )\n\u001b[0;32m    298\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\reduction.pyx\u001b[0m in \u001b[0;36mpandas._libs.reduction.compute_reduction\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\reduction.pyx\u001b[0m in \u001b[0;36mpandas._libs.reduction.Reducer.get_result\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;32m<ipython-input-61-d5237ed1cd14>\u001b[0m in \u001b[0;36mchangex\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mchangex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m     \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Rural'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m         \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Urban'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m         \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__nonzero__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1477\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__nonzero__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1478\u001b[0m         raise ValueError(\n\u001b[1;32m-> 1479\u001b[1;33m             \u001b[1;34mf\"The truth value of a {type(self).__name__} is ambiguous. \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1480\u001b[0m             \u001b[1;34m\"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1481\u001b[0m         )\n",
        "\u001b[1;31mValueError\u001b[0m: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
       ]
      }
     ],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "def changex(x):\n    if x == 'Rural':\n        x = 0\n    if x == 'Urban':\n        x = 1\n    else: \n        x = 2\ndata['Property_Area'] = data.apply(changex)"
    },
    "executionTime": "2020-09-17T10:58:21.647Z"
   },
   {
    "cell": {
     "executionCount": 62,
     "executionEventId": "76ecad5f-d234-4a08-abba-c4d2e1a3f1d2",
     "hasError": true,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-62-5aa324de18d5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      8\u001b[0m   \u001b[1;32mreturn\u001b[0m \u001b[0mval\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 10\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Property_Area'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mchangex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mapply\u001b[1;34m(self, func, axis, raw, result_type, args, **kwds)\u001b[0m\n\u001b[0;32m   6876\u001b[0m             \u001b[0mkwds\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6877\u001b[0m         )\n\u001b[1;32m-> 6878\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   6879\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6880\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapplymap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;34m\"DataFrame\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\apply.py\u001b[0m in \u001b[0;36mget_result\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    184\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_raw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    185\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 186\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    187\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    188\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_empty_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    294\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    295\u001b[0m                 result = libreduction.compute_reduction(\n\u001b[1;32m--> 296\u001b[1;33m                     \u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdummy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdummy\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    297\u001b[0m                 )\n\u001b[0;32m    298\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\reduction.pyx\u001b[0m in \u001b[0;36mpandas._libs.reduction.compute_reduction\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\reduction.pyx\u001b[0m in \u001b[0;36mpandas._libs.reduction.Reducer.get_result\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;32m<ipython-input-61-d5237ed1cd14>\u001b[0m in \u001b[0;36mchangex\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mchangex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m     \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Rural'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m         \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Urban'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m         \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__nonzero__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1477\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__nonzero__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1478\u001b[0m         raise ValueError(\n\u001b[1;32m-> 1479\u001b[1;33m             \u001b[1;34mf\"The truth value of a {type(self).__name__} is ambiguous. \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1480\u001b[0m             \u001b[1;34m\"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1481\u001b[0m         )\n",
        "\u001b[1;31mValueError\u001b[0m: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
       ]
      }
     ],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "def f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(changex, axis=1)"
    },
    "executionTime": "2020-09-17T11:01:27.625Z"
   },
   {
    "cell": {
     "executionCount": 63,
     "executionEventId": "e2c04f5a-02d4-4c0e-acca-cdc1b3328171",
     "hasError": true,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-63-5aa324de18d5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      8\u001b[0m   \u001b[1;32mreturn\u001b[0m \u001b[0mval\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 10\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Property_Area'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mchangex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mapply\u001b[1;34m(self, func, axis, raw, result_type, args, **kwds)\u001b[0m\n\u001b[0;32m   6876\u001b[0m             \u001b[0mkwds\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6877\u001b[0m         )\n\u001b[1;32m-> 6878\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   6879\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6880\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapplymap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;34m\"DataFrame\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\apply.py\u001b[0m in \u001b[0;36mget_result\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    184\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_raw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    185\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 186\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    187\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    188\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_empty_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    294\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    295\u001b[0m                 result = libreduction.compute_reduction(\n\u001b[1;32m--> 296\u001b[1;33m                     \u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdummy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdummy\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    297\u001b[0m                 )\n\u001b[0;32m    298\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\reduction.pyx\u001b[0m in \u001b[0;36mpandas._libs.reduction.compute_reduction\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;32mpandas\\_libs\\reduction.pyx\u001b[0m in \u001b[0;36mpandas._libs.reduction.Reducer.get_result\u001b[1;34m()\u001b[0m\n",
        "\u001b[1;32m<ipython-input-61-d5237ed1cd14>\u001b[0m in \u001b[0;36mchangex\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mchangex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m     \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Rural'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m         \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Urban'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m         \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__nonzero__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1477\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__nonzero__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1478\u001b[0m         raise ValueError(\n\u001b[1;32m-> 1479\u001b[1;33m             \u001b[1;34mf\"The truth value of a {type(self).__name__} is ambiguous. \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1480\u001b[0m             \u001b[1;34m\"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1481\u001b[0m         )\n",
        "\u001b[1;31mValueError\u001b[0m: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
       ]
      }
     ],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "def f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(changex, axis=1)"
    },
    "executionTime": "2020-09-17T11:01:48.315Z"
   },
   {
    "cell": {
     "executionCount": 64,
     "executionEventId": "40a7abc5-053f-452f-974d-26e3589fc3e8",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "def f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)"
    },
    "executionTime": "2020-09-17T11:01:55.924Z"
   },
   {
    "cell": {
     "executionCount": 65,
     "executionEventId": "960648fa-4580-4dad-969a-714e625d56bf",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    int32  \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    int64  \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(6), int64(2)\nmemory usage: 44.8 KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T11:01:59.327Z"
   },
   {
    "cell": {
     "executionCount": 66,
     "executionEventId": "8454bffb-5a07-4628-8b11-56e534f07df7",
     "hasError": false,
     "id": "e92f3966-9e32-4114-a83c-fcf45baceeaa",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "   Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0       0        0           0          1              0             5849   \n1       0        1           1          1              0             4583   \n2       0        1           0          1              1             3000   \n3       0        1           0          0              0             2583   \n4       0        0           0          1              0             6000   \n\n   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                0.0  146.412162             360.0             1.0   \n1             1508.0  128.000000             360.0             1.0   \n2                0.0   66.000000             360.0             1.0   \n3             2358.0  120.000000             360.0             1.0   \n4                0.0  141.000000             360.0             1.0   \n\n   Property_Area  Loan_Status  \n0              0            1  \n1              1            0  \n2              0            1  \n3              0            1  \n4              0            1  "
       },
       "execution_count": 66,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "4c1b4e63-9832-426f-a60f-17f65dc63d50",
     "text": "data.head()"
    },
    "executionTime": "2020-09-17T11:02:00.780Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "cdbe4fae-2554-4d63-be33-bac528e982d3",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-17T11:02:27.083Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "ca35a221-77c9-4f8a-872c-803e245716a8",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T11:02:27.144Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "526be700-0e0d-4761-8bae-379d3f7f99b5",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T11:02:27.219Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "106a189a-cdc6-4d5d-80a4-59b755d6b198",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T11:02:27.229Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "53e9424f-85f3-46ce-a0fd-5c774f240912",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T11:02:27.244Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "5fd8aeb2-e7bf-4532-8994-9ae8530060a2",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002626</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002626   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T11:02:27.301Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "4edeabc7-8a12-4535-8e07-54ce12fd7ed9",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T11:02:27.328Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "396ed0eb-d518-42e6-b661-139f05bb2e0c",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T11:02:27.528Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "b16e0c18-c851-4a4e-81a1-eeaf09bc66ac",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T11:02:27.609Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "d1003c41-4af0-40cc-ba34-20912579d28e",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:02:27.654Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "b04bfefa-cac2-4941-a1a6-03f2fa38c361",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1b10a0c2240>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T11:02:27.749Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "f291e61d-9e26-4f04-b019-856e3a61eb1d",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T11:02:27.805Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "cb66b412-fbf1-4096-9ff0-42d374bd1371",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T11:02:27.824Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "1c49db34-692c-481b-a808-b436a9f1ad19",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:02:27.856Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "30443b22-c48d-4c6e-aba4-5d46069f8db9",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1b10a086e80>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T11:02:28.019Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "f6705246-8e47-4af5-a977-a3acd6e5fa6e",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:02:28.032Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "efef9562-c217-4af5-a6e2-8eb9a9b36a03",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x1b10a1cde10>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T11:02:28.196Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "3da33085-fa07-4197-97d9-5e13aa0c3cac",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:02:28.216Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "32dbbc18-b5a4-4d35-9add-b19b35d21cc1",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T11:02:28.263Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "00fdfcf0-55d6-4cb6-81b3-ff3d46526802",
     "hasError": false,
     "id": "8c2fad05-28d0-4a39-a610-ecc739cf5dc4",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n    <tr>\n      <th>Loan_Status</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>N</th>\n      <td>3948</td>\n      <td>0.0</td>\n      <td>135.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>3756</td>\n      <td>1280.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "             ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\nLoan_Status                                                                     \nN                       3948                0.0       135.0             360.0   \nY                       3756             1280.0       128.0             360.0   \n\n             Credit_History  \nLoan_Status                  \nN                       1.0  \nY                       1.0  "
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "518e45c1-b195-4fa4-b885-6104591dc036",
     "text": "data.groupby('Loan_Status').median() #Check what numerical features are good predictors"
    },
    "executionTime": "2020-09-17T11:02:28.316Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "72b5cd97-d0ad-4ff6-a021-97f95584429c",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T11:02:28.332Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "6f9a6a3f-5b75-4e84-9e55-26b739d1eb4c",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 56.0+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T11:02:28.367Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "ccf77746-e171-48d1-8734-8886f572e147",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)"
    },
    "executionTime": "2020-09-17T11:02:28.375Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "324ddfb0-57d0-415b-a5c8-8c4ae6d0acd3",
     "hasError": false,
     "id": "5f26fc7a-d43a-4466-bf5b-7d0d46cb51bf",
     "outputs": [],
     "persistentId": "5705657a-3b17-4d57-887e-06150dc1d36a",
     "text": "data['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1)\n"
    },
    "executionTime": "2020-09-17T11:02:28.412Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "5e7e308f-12a3-4600-b3d8-12e087d68e5c",
     "hasError": false,
     "id": "f05d0db0-856d-4707-9299-8d5d54b0be3e",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "   Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0       0        0           0          1              0             5849   \n1       0        1           1          1              0             4583   \n2       0        1           0          1              1             3000   \n3       0        1           0          0              0             2583   \n4       0        0           0          1              0             6000   \n\n   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                0.0  146.412162             360.0             1.0   \n1             1508.0  128.000000             360.0             1.0   \n2                0.0   66.000000             360.0             1.0   \n3             2358.0  120.000000             360.0             1.0   \n4                0.0  141.000000             360.0             1.0   \n\n  Property_Area  Loan_Status  \n0         Urban            1  \n1         Rural            0  \n2         Urban            1  \n3         Urban            1  \n4         Urban            1  "
       },
       "execution_count": 25,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "2835334d-03e7-4e82-b4fa-19b77f9ab917",
     "text": "data.head()"
    },
    "executionTime": "2020-09-17T11:02:28.425Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "274c18cf-b8cf-4da2-9e21-d0bf11c24843",
     "hasError": false,
     "id": "f05d0db0-856d-4707-9299-8d5d54b0be3e",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5417</td>\n      <td>4196.0</td>\n      <td>267.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2333</td>\n      <td>1516.0</td>\n      <td>95.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3036</td>\n      <td>2504.0</td>\n      <td>158.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4006</td>\n      <td>1526.0</td>\n      <td>168.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12841</td>\n      <td>10968.0</td>\n      <td>349.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3200</td>\n      <td>700.0</td>\n      <td>70.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2500</td>\n      <td>1840.0</td>\n      <td>109.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3073</td>\n      <td>8106.0</td>\n      <td>200.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1853</td>\n      <td>2840.0</td>\n      <td>114.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1299</td>\n      <td>1086.0</td>\n      <td>17.000000</td>\n      <td>120.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4950</td>\n      <td>0.0</td>\n      <td>125.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3596</td>\n      <td>0.0</td>\n      <td>100.000000</td>\n      <td>240.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3510</td>\n      <td>0.0</td>\n      <td>76.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4887</td>\n      <td>0.0</td>\n      <td>133.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7660</td>\n      <td>0.0</td>\n      <td>104.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5955</td>\n      <td>5625.0</td>\n      <td>315.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2600</td>\n      <td>1911.0</td>\n      <td>116.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3717</td>\n      <td>2925.0</td>\n      <td>151.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9560</td>\n      <td>0.0</td>\n      <td>191.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2799</td>\n      <td>2253.0</td>\n      <td>122.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4226</td>\n      <td>1040.0</td>\n      <td>110.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1442</td>\n      <td>0.0</td>\n      <td>35.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3750</td>\n      <td>2083.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4166</td>\n      <td>3369.0</td>\n      <td>201.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3167</td>\n      <td>0.0</td>\n      <td>74.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4692</td>\n      <td>0.0</td>\n      <td>106.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3500</td>\n      <td>1667.0</td>\n      <td>114.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12500</td>\n      <td>3000.0</td>\n      <td>320.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2275</td>\n      <td>2067.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3667</td>\n      <td>1459.0</td>\n      <td>144.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4166</td>\n      <td>7210.0</td>\n      <td>184.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3748</td>\n      <td>1668.0</td>\n      <td>110.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3600</td>\n      <td>0.0</td>\n      <td>80.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1800</td>\n      <td>1213.0</td>\n      <td>47.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2400</td>\n      <td>0.0</td>\n      <td>75.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3941</td>\n      <td>2336.0</td>\n      <td>134.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5649</td>\n      <td>0.0</td>\n      <td>44.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5821</td>\n      <td>0.0</td>\n      <td>144.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2645</td>\n      <td>3440.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4000</td>\n      <td>2275.0</td>\n      <td>144.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1928</td>\n      <td>1644.0</td>\n      <td>100.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3086</td>\n      <td>0.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4230</td>\n      <td>0.0</td>\n      <td>112.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4616</td>\n      <td>0.0</td>\n      <td>134.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>11500</td>\n      <td>0.0</td>\n      <td>286.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Urban</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0        0        0           0          1              0             5849   \n1        0        1           1          1              0             4583   \n2        0        1           0          1              1             3000   \n3        0        1           0          0              0             2583   \n4        0        0           0          1              0             6000   \n5        0        1           1          1              1             5417   \n6        0        1           0          0              0             2333   \n7        0        1           1          1              0             3036   \n8        0        1           1          1              0             4006   \n9        0        1           1          1              0            12841   \n10       0        1           1          1              0             3200   \n11       0        1           1          1              0             2500   \n12       0        1           1          1              0             3073   \n13       0        0           0          1              0             1853   \n14       0        1           1          1              0             1299   \n15       0        0           0          1              0             4950   \n16       0        0           1          0              0             3596   \n17       1        0           0          1              0             3510   \n18       0        1           0          0              0             4887   \n20       0        1           0          0              0             7660   \n21       0        1           1          1              0             5955   \n22       0        1           0          0              0             2600   \n24       0        1           1          1              0             3717   \n25       0        1           0          1              1             9560   \n26       0        1           0          1              0             2799   \n27       0        1           1          0              0             4226   \n28       0        0           0          0              0             1442   \n29       1        0           1          1              0             3750   \n30       0        1           1          1              0             4166   \n31       0        0           0          1              0             3167   \n32       0        0           1          1              1             4692   \n33       0        1           0          1              0             3500   \n34       0        0           1          1              0            12500   \n35       0        1           0          1              0             2275   \n37       1        1           0          1              0             3667   \n38       0        0           0          1              0             4166   \n39       0        0           0          0              0             3748   \n40       0        0           0          1              0             3600   \n41       0        0           0          1              0             1800   \n42       0        1           0          1              0             2400   \n43       0        1           0          1              0             3941   \n46       0        1           1          1              0             5649   \n47       0        1           0          1              0             5821   \n48       1        1           0          1              0             2645   \n49       1        0           0          1              0             4000   \n50       1        1           0          0              0             1928   \n51       1        0           0          1              0             3086   \n52       1        0           0          1              0             4230   \n53       0        1           1          1              0             4616   \n54       1        1           1          1              1            11500   \n\n    CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                 0.0  146.412162             360.0             1.0   \n1              1508.0  128.000000             360.0             1.0   \n2                 0.0   66.000000             360.0             1.0   \n3              2358.0  120.000000             360.0             1.0   \n4                 0.0  141.000000             360.0             1.0   \n5              4196.0  267.000000             360.0             1.0   \n6              1516.0   95.000000             360.0             1.0   \n7              2504.0  158.000000             360.0             0.0   \n8              1526.0  168.000000             360.0             1.0   \n9             10968.0  349.000000             360.0             1.0   \n10              700.0   70.000000             360.0             1.0   \n11             1840.0  109.000000             360.0             1.0   \n12             8106.0  200.000000             360.0             1.0   \n13             2840.0  114.000000             360.0             1.0   \n14             1086.0   17.000000             120.0             1.0   \n15                0.0  125.000000             360.0             1.0   \n16                0.0  100.000000             240.0             1.0   \n17                0.0   76.000000             360.0             0.0   \n18                0.0  133.000000             360.0             1.0   \n20                0.0  104.000000             360.0             0.0   \n21             5625.0  315.000000             360.0             1.0   \n22             1911.0  116.000000             360.0             0.0   \n24             2925.0  151.000000             360.0             1.0   \n25                0.0  191.000000             360.0             1.0   \n26             2253.0  122.000000             360.0             1.0   \n27             1040.0  110.000000             360.0             1.0   \n28                0.0   35.000000             360.0             1.0   \n29             2083.0  120.000000             360.0             1.0   \n30             3369.0  201.000000             360.0             1.0   \n31                0.0   74.000000             360.0             1.0   \n32                0.0  106.000000             360.0             1.0   \n33             1667.0  114.000000             360.0             1.0   \n34             3000.0  320.000000             360.0             1.0   \n35             2067.0  146.412162             360.0             1.0   \n37             1459.0  144.000000             360.0             1.0   \n38             7210.0  184.000000             360.0             1.0   \n39             1668.0  110.000000             360.0             1.0   \n40                0.0   80.000000             360.0             1.0   \n41             1213.0   47.000000             360.0             1.0   \n42                0.0   75.000000             360.0             1.0   \n43             2336.0  134.000000             360.0             1.0   \n46                0.0   44.000000             360.0             1.0   \n47                0.0  144.000000             360.0             1.0   \n48             3440.0  120.000000             360.0             0.0   \n49             2275.0  144.000000             360.0             1.0   \n50             1644.0  100.000000             360.0             1.0   \n51                0.0  120.000000             360.0             1.0   \n52                0.0  112.000000             360.0             1.0   \n53                0.0  134.000000             360.0             1.0   \n54                0.0  286.000000             360.0             0.0   \n\n   Property_Area  Loan_Status  \n0          Urban            1  \n1          Rural            0  \n2          Urban            1  \n3          Urban            1  \n4          Urban            1  \n5          Urban            1  \n6          Urban            1  \n7      Semiurban            0  \n8          Urban            1  \n9      Semiurban            0  \n10         Urban            1  \n11         Urban            1  \n12         Urban            1  \n13         Rural            0  \n14         Urban            1  \n15         Urban            1  \n16         Urban            1  \n17         Urban            0  \n18         Rural            0  \n20         Urban            0  \n21         Urban            1  \n22     Semiurban            0  \n24     Semiurban            0  \n25     Semiurban            1  \n26     Semiurban            1  \n27         Urban            1  \n28         Urban            0  \n29     Semiurban            1  \n30         Urban            0  \n31         Urban            0  \n32         Rural            0  \n33     Semiurban            1  \n34         Rural            0  \n35         Urban            1  \n37     Semiurban            1  \n38         Urban            1  \n39     Semiurban            1  \n40         Urban            0  \n41         Urban            1  \n42         Urban            1  \n43     Semiurban            1  \n46         Urban            1  \n47         Urban            1  \n48         Urban            0  \n49     Semiurban            1  \n50     Semiurban            1  \n51     Semiurban            1  \n52     Semiurban            0  \n53         Urban            0  \n54         Urban            0  "
       },
       "execution_count": 26,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "2835334d-03e7-4e82-b4fa-19b77f9ab917",
     "text": "data.head(50)"
    },
    "executionTime": "2020-09-17T11:02:39.380Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "a26fe470-3189-4f28-ac74-f9da816cbffe",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "def f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)"
    },
    "executionTime": "2020-09-17T11:02:47.089Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "47d65014-29ae-4cda-8372-6567f12db4c4",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    int32  \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    int64  \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(6), int64(2)\nmemory usage: 44.8 KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T11:02:50.148Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "c600b946-fd16-40ac-982b-e38e3fa2bf42",
     "hasError": false,
     "id": "e92f3966-9e32-4114-a83c-fcf45baceeaa",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5417</td>\n      <td>4196.0</td>\n      <td>267.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2333</td>\n      <td>1516.0</td>\n      <td>95.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3036</td>\n      <td>2504.0</td>\n      <td>158.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4006</td>\n      <td>1526.0</td>\n      <td>168.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12841</td>\n      <td>10968.0</td>\n      <td>349.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "   Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0       0        0           0          1              0             5849   \n1       0        1           1          1              0             4583   \n2       0        1           0          1              1             3000   \n3       0        1           0          0              0             2583   \n4       0        0           0          1              0             6000   \n5       0        1           1          1              1             5417   \n6       0        1           0          0              0             2333   \n7       0        1           1          1              0             3036   \n8       0        1           1          1              0             4006   \n9       0        1           1          1              0            12841   \n\n   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                0.0  146.412162             360.0             1.0   \n1             1508.0  128.000000             360.0             1.0   \n2                0.0   66.000000             360.0             1.0   \n3             2358.0  120.000000             360.0             1.0   \n4                0.0  141.000000             360.0             1.0   \n5             4196.0  267.000000             360.0             1.0   \n6             1516.0   95.000000             360.0             1.0   \n7             2504.0  158.000000             360.0             0.0   \n8             1526.0  168.000000             360.0             1.0   \n9            10968.0  349.000000             360.0             1.0   \n\n   Property_Area  Loan_Status  \n0              0            1  \n1              1            0  \n2              0            1  \n3              0            1  \n4              0            1  \n5              0            1  \n6              0            1  \n7              2            0  \n8              0            1  \n9              2            0  "
       },
       "execution_count": 29,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "4c1b4e63-9832-426f-a60f-17f65dc63d50",
     "text": "data.head(10)"
    },
    "executionTime": "2020-09-17T11:02:53.340Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "c63cbc9c-2b16-48b8-9bbc-e6a05472e2fb",
     "hasError": false,
     "id": "f05d0db0-856d-4707-9299-8d5d54b0be3e",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5417</td>\n      <td>4196.0</td>\n      <td>267.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2333</td>\n      <td>1516.0</td>\n      <td>95.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3036</td>\n      <td>2504.0</td>\n      <td>158.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4006</td>\n      <td>1526.0</td>\n      <td>168.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12841</td>\n      <td>10968.0</td>\n      <td>349.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "   Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0       0        0           0          1              0             5849   \n1       0        1           1          1              0             4583   \n2       0        1           0          1              1             3000   \n3       0        1           0          0              0             2583   \n4       0        0           0          1              0             6000   \n5       0        1           1          1              1             5417   \n6       0        1           0          0              0             2333   \n7       0        1           1          1              0             3036   \n8       0        1           1          1              0             4006   \n9       0        1           1          1              0            12841   \n\n   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                0.0  146.412162             360.0             1.0   \n1             1508.0  128.000000             360.0             1.0   \n2                0.0   66.000000             360.0             1.0   \n3             2358.0  120.000000             360.0             1.0   \n4                0.0  141.000000             360.0             1.0   \n5             4196.0  267.000000             360.0             1.0   \n6             1516.0   95.000000             360.0             1.0   \n7             2504.0  158.000000             360.0             0.0   \n8             1526.0  168.000000             360.0             1.0   \n9            10968.0  349.000000             360.0             1.0   \n\n   Property_Area  Loan_Status  \n0              0            1  \n1              1            0  \n2              0            1  \n3              0            1  \n4              0            1  \n5              0            1  \n6              0            1  \n7              2            0  \n8              0            1  \n9              2            0  "
       },
       "execution_count": 30,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "2835334d-03e7-4e82-b4fa-19b77f9ab917",
     "text": "data.head(10)"
    },
    "executionTime": "2020-09-17T11:03:19.634Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "ad41922e-601d-4d17-b332-5b44c7e8f084",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:9]  #independent columns\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T11:03:24.232Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "5d5254c1-e682-4748-af71-b04ca9f7f8c8",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02553056 0.01819628 0.03058747 0.01834841 0.0268411  0.3330291\n 0.18015216 0.29784667 0.06946825]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T11:03:42.236Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "6ccbeb60-185a-4ae3-a26d-990a9d0f6a08",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "               Specs         Score\n6  CoapplicantIncome  13483.850271\n5    ApplicantIncome   3509.190756\n7         LoanAmount     98.723124\n1            Married      2.015821\n3          Education      0.579009\n8   Loan_Amount_Term      0.363129\n0             Gender      0.306793\n4      Self_Employed      0.275664\n2         Dependents      0.000328\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T11:03:49.486Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "338ec0b6-5b80-4368-9078-3fe80da1cbc6",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-17T11:04:52.331Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "eff935ee-e3fd-4c0d-a201-bdcbbba95310",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T11:04:52.371Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "0021bef0-e705-4548-8c4b-79e8cd1976d3",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T11:04:52.438Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "c4035792-82e1-4ea0-a2be-d53f4951b64c",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T11:04:52.453Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "fab854c9-d398-4df6-b0c0-434354d89e20",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T11:04:52.499Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "a32984f3-df36-47f7-93c1-7d544b77172d",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002543</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002543   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T11:04:52.566Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "0a4baf20-eda6-47e8-aedc-bab29fb9fea5",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T11:04:52.580Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "9536c287-95a0-43f4-bfcc-54f14ffc99b0",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T11:04:52.759Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "0203dcc6-9313-4c9a-828e-42cad0fa7695",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T11:04:52.813Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "514f13ba-48ca-4dfa-ab33-7533e7c0f754",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:04:52.861Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "cb4ca58b-cf1f-4a12-a6ef-3ef208789646",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1849ea2e198>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T11:04:53.025Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "2325e52e-2ae2-45ea-9d0d-277631a3680e",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T11:04:53.044Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "d3c838cf-a855-4237-bf6e-882c58364e02",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T11:04:53.080Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "d47f1889-26e5-4e8e-aa1f-5518fba2c084",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:04:53.095Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "b3686c9b-bf36-4cac-b6eb-e9de702dbf32",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1849ea7a0f0>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T11:04:53.277Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "f877c268-3538-44c2-82ac-67a96fc86aff",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:04:53.291Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "8a94bd41-e543-44fa-9b48-47333298fc8f",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x1849eb3cd30>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T11:04:53.431Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "57db75d8-ac2b-4a96-bafb-fa82d0d6a506",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:04:53.483Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "307e1635-e048-4b98-af62-ec3850fd0b82",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T11:04:53.505Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "4c10f1ca-ba8a-4c59-ba09-ff682aa366b8",
     "hasError": false,
     "id": "8c2fad05-28d0-4a39-a610-ecc739cf5dc4",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n    <tr>\n      <th>Loan_Status</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>N</th>\n      <td>3948</td>\n      <td>0.0</td>\n      <td>135.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>3756</td>\n      <td>1280.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "             ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\nLoan_Status                                                                     \nN                       3948                0.0       135.0             360.0   \nY                       3756             1280.0       128.0             360.0   \n\n             Credit_History  \nLoan_Status                  \nN                       1.0  \nY                       1.0  "
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "518e45c1-b195-4fa4-b885-6104591dc036",
     "text": "data.groupby('Loan_Status').median() #Check what numerical features are good predictors"
    },
    "executionTime": "2020-09-17T11:04:53.515Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "28ddd7ee-811e-44fa-93d1-79eba46100b6",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T11:04:53.529Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "47e19e39-2796-46af-8b0e-30c0754bb4bc",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    object \n 1   Married            573 non-null    object \n 2   Dependents         573 non-null    object \n 3   Education          573 non-null    object \n 4   Self_Employed      573 non-null    object \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    object \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 56.0+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T11:04:53.562Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "6afe8048-bdb6-4e53-8b25-68272de72201",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)"
    },
    "executionTime": "2020-09-17T11:04:53.575Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "b72773d4-7efb-425b-8281-b4f74a75505f",
     "hasError": false,
     "id": "5f26fc7a-d43a-4466-bf5b-7d0d46cb51bf",
     "outputs": [],
     "persistentId": "5705657a-3b17-4d57-887e-06150dc1d36a",
     "text": "data['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1)\n"
    },
    "executionTime": "2020-09-17T11:04:53.609Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "f5bc5d0f-57ee-4ab5-9917-6f443f29a6ef",
     "hasError": false,
     "id": "f05d0db0-856d-4707-9299-8d5d54b0be3e",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5417</td>\n      <td>4196.0</td>\n      <td>267.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2333</td>\n      <td>1516.0</td>\n      <td>95.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3036</td>\n      <td>2504.0</td>\n      <td>158.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4006</td>\n      <td>1526.0</td>\n      <td>168.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12841</td>\n      <td>10968.0</td>\n      <td>349.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "   Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0       0        0           0          1              0             5849   \n1       0        1           1          1              0             4583   \n2       0        1           0          1              1             3000   \n3       0        1           0          0              0             2583   \n4       0        0           0          1              0             6000   \n5       0        1           1          1              1             5417   \n6       0        1           0          0              0             2333   \n7       0        1           1          1              0             3036   \n8       0        1           1          1              0             4006   \n9       0        1           1          1              0            12841   \n\n   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                0.0  146.412162             360.0             1.0   \n1             1508.0  128.000000             360.0             1.0   \n2                0.0   66.000000             360.0             1.0   \n3             2358.0  120.000000             360.0             1.0   \n4                0.0  141.000000             360.0             1.0   \n5             4196.0  267.000000             360.0             1.0   \n6             1516.0   95.000000             360.0             1.0   \n7             2504.0  158.000000             360.0             0.0   \n8             1526.0  168.000000             360.0             1.0   \n9            10968.0  349.000000             360.0             1.0   \n\n  Property_Area  Loan_Status  \n0         Urban            1  \n1         Rural            0  \n2         Urban            1  \n3         Urban            1  \n4         Urban            1  \n5         Urban            1  \n6         Urban            1  \n7     Semiurban            0  \n8         Urban            1  \n9     Semiurban            0  "
       },
       "execution_count": 25,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "2835334d-03e7-4e82-b4fa-19b77f9ab917",
     "text": "data.head(10)"
    },
    "executionTime": "2020-09-17T11:04:53.649Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "d72d285a-7ce8-4615-9d16-08ca26f88ae3",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "def f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)"
    },
    "executionTime": "2020-09-17T11:04:53.705Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "67fdbdce-583c-4ca8-9125-9beb82b14311",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 573 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             573 non-null    int32  \n 1   Married            573 non-null    int32  \n 2   Dependents         573 non-null    int32  \n 3   Education          573 non-null    int32  \n 4   Self_Employed      573 non-null    int32  \n 5   ApplicantIncome    573 non-null    int64  \n 6   CoapplicantIncome  573 non-null    float64\n 7   LoanAmount         573 non-null    float64\n 8   Loan_Amount_Term   573 non-null    float64\n 9   Credit_History     573 non-null    float64\n 10  Property_Area      573 non-null    int64  \n 11  Loan_Status        573 non-null    int32  \ndtypes: float64(4), int32(6), int64(2)\nmemory usage: 44.8 KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T11:04:53.727Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "41385ad5-0849-418c-83f4-5b4dddd9acd9",
     "hasError": false,
     "id": "c0f77a52-4bef-4b6e-95e3-f5e7812867c0",
     "outputs": [],
     "persistentId": "60f98890-6d1b-4afe-823d-bb83f92fa871",
     "text": "#data.drop('Dependents', axis=1, inplace=True)\n#data.drop('Property_Area', axis=1, inplace=True)"
    },
    "executionTime": "2020-09-17T11:04:53.738Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "c10c5553-8a95-417e-b0ae-6f0a1ca96119",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:11]  #independent columns\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T11:04:54.571Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "6375234e-9ccf-44f1-96b4-783b59ea2a4a",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02156068 0.02292364 0.03289715 0.02374707 0.02164703 0.20054599\n 0.1293315  0.19736098 0.05354958 0.24341051 0.05302586]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T11:04:55.021Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "38734f2c-cf70-429c-b779-977a793d3732",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "   Name of the column         Score\n6   CoapplicantIncome  13483.850271\n5     ApplicantIncome   3509.190756\n7          LoanAmount     98.723124\n9      Credit_History     19.248679\n10      Property_Area      4.246537\n1             Married      2.015821\n3           Education      0.579009\n8    Loan_Amount_Term      0.363129\n0              Gender      0.306793\n4       Self_Employed      0.275664\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T11:04:55.065Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "536d5b91-ad84-4d54-90a1-35325112af8c",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02279886 0.02115072 0.03338338 0.02139866 0.02475799 0.20734696\n 0.11964771 0.19380249 0.05258208 0.24833016 0.054801  ]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T11:05:13.330Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "f9da2a97-699e-4202-9cde-099c47e98a7b",
     "hasError": false,
     "id": "a0a50455-bddc-4909-a749-451641fe509e",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x1849f2b83c8>,\n  <matplotlib.lines.Line2D at 0x1849f2b8780>],\n 'caps': [<matplotlib.lines.Line2D at 0x1849f2b8ac8>,\n  <matplotlib.lines.Line2D at 0x1849f2b8e10>],\n 'boxes': [<matplotlib.lines.Line2D at 0x1849f2a9f60>],\n 'medians': [<matplotlib.lines.Line2D at 0x1849f2b8ef0>],\n 'fliers': [<matplotlib.lines.Line2D at 0x1849f2c04e0>],\n 'means': []}"
       },
       "execution_count": 33,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "b1d54d7f-a7ab-4c2a-b3e6-3afd5a93403e",
     "text": "#First I will make a boxplot for the ApplicantIncome.\n\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T11:12:48.108Z"
   },
   {
    "cell": {
     "executionCount": 34,
     "executionEventId": "c68665fa-5998-4472-b6a6-24180da0f852",
     "hasError": false,
     "id": "67a1abc6-4297-4525-94d5-33705834ec46",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>333</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>63337</td>\n      <td>0.0</td>\n      <td>490.0</td>\n      <td>180.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>409</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>81000</td>\n      <td>0.0</td>\n      <td>360.0</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "     Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n333       0        1           0          1              0            63337   \n409       0        1           1          1              0            81000   \n\n     CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n333                0.0       490.0             180.0             1.0   \n409                0.0       360.0             360.0             0.0   \n\n     Property_Area  Loan_Status  \n333              0            1  \n409              1            0  "
       },
       "execution_count": 34,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "dc489f68-a1fe-40b3-a7b6-ec08e9ba2fd4",
     "text": "#We see that there are two great outliers here. \n#let's look closer to these two outliers\noutliers = data[data['ApplicantIncome'] > 50000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T11:14:00.091Z"
   },
   {
    "cell": {
     "executionCount": 35,
     "executionEventId": "769e9d8d-9183-425d-8c88-2669f2bdfe97",
     "hasError": false,
     "id": "99d7bddd-6a96-4308-93ef-e0c1c62284e7",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x1849f316d68>,\n  <matplotlib.lines.Line2D at 0x1849f316eb8>],\n 'caps': [<matplotlib.lines.Line2D at 0x1849f3264a8>,\n  <matplotlib.lines.Line2D at 0x1849f3267f0>],\n 'boxes': [<matplotlib.lines.Line2D at 0x1849f316940>],\n 'medians': [<matplotlib.lines.Line2D at 0x1849f326b38>],\n 'fliers': [<matplotlib.lines.Line2D at 0x1849f326e80>],\n 'means': []}"
       },
       "execution_count": 35,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "40f36946-096f-4ca4-92cd-5a3ee8bbfdf1",
     "text": "#As you can see that these are just two rows and the status is not for both approved, I will remove these two rows for the model. \ndata = data[data['ApplicantIncome'] < 50000]\n#let's plot the applicant income again in a boxplot\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T11:16:01.959Z"
   },
   {
    "cell": {
     "executionCount": 36,
     "executionEventId": "0c537f33-9d81-4401-8168-d38762b6a5c9",
     "hasError": false,
     "id": "7ab3bd02-3dc6-4e81-be30-a5659e415120",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>155</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>39999</td>\n      <td>0.0</td>\n      <td>600.0</td>\n      <td>180.0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>33846</td>\n      <td>0.0</td>\n      <td>260.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>39147</td>\n      <td>4750.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>443</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>37719</td>\n      <td>0.0</td>\n      <td>152.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "     Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n155       0        1           1          1              0            39999   \n183       0        1           1          1              0            33846   \n185       0        1           0          1              1            39147   \n443       0        0           1          1              0            37719   \n\n     CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n155                0.0       600.0             180.0             0.0   \n183                0.0       260.0             360.0             1.0   \n185             4750.0       120.0             360.0             1.0   \n443                0.0       152.0             360.0             1.0   \n\n     Property_Area  Loan_Status  \n155              2            1  \n183              2            0  \n185              2            1  \n443              2            1  "
       },
       "execution_count": 36,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "aa5c7432-0afa-4d3b-b934-ecfb87b7701c",
     "text": "#still a lot of outliers above the 25000. Let's look closer to those again to be sure we need to add them to get a good model performance\noutliers = data[data['ApplicantIncome'] > 25000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T11:17:01.872Z"
   },
   {
    "cell": {
     "executionCount": 37,
     "executionEventId": "555d117d-ef1a-4776-88c0-7936e80abdcc",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "C:\\Users\\Renate\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\ops\\array_ops.py:253: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n  res_values = method(rvalues)\n"
      }
     ],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T11:19:57.945Z"
   },
   {
    "cell": {
     "executionCount": 38,
     "executionEventId": "28a736e2-82a9-48cf-92d2-df5a70e2f041",
     "hasError": true,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "ename": "KeyError",
       "evalue": "\"['Loan_ID'] not found in axis\"",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-38-d356f00135aa>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Next we will drop the loan_ID column as this will only confuse the model later on\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Loan_ID'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   3995\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3996\u001b[0m             \u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3997\u001b[1;33m             \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3998\u001b[0m         )\n\u001b[0;32m   3999\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   3934\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3935\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3936\u001b[1;33m                 \u001b[0mobj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3937\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3938\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[1;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[0;32m   3968\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3969\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3970\u001b[1;33m                 \u001b[0mnew_axis\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3971\u001b[0m             \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3972\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32m~\\Anaconda3\\ANACONDA\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mdrop\u001b[1;34m(self, labels, errors)\u001b[0m\n\u001b[0;32m   5016\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0many\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5017\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;34m\"ignore\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5018\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5019\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5020\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mKeyError\u001b[0m: \"['Loan_ID'] not found in axis\""
       ]
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T11:20:00.583Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "c2a6d850-d687-40df-ac63-160426cc85c8",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots"
    },
    "executionTime": "2020-09-17T11:20:11.388Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "b8876834-a9d7-4586-9f92-e0261d2e910c",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T11:20:11.503Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "d48efa36-b23e-481a-a402-9a2439312a68",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T11:20:11.539Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "0f9610c8-6b04-4b4f-ad83-f0a36844e425",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T11:20:11.554Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "8af9b919-fa7f-49fc-a52d-64874b9d554d",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T11:20:11.607Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "43592fbf-fca1-4189-8c72-6c3b33cb10ac",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002447</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002447   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T11:20:11.642Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "85343b8a-a705-4ec2-9fc6-71afc0826928",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T11:20:11.696Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "49f132a4-5620-40dd-902e-feb98728d0b0",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T11:20:11.888Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "4802b13e-d606-47c6-bc5d-aa9027355256",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T11:20:11.996Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "bb7d085c-0954-4154-b39f-1ec086335f7f",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:20:12.012Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "ef644f99-cae8-45c2-921f-e3461a1c90c7",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x22dd611f240>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T11:20:12.198Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "406c16ce-24af-403c-8dcd-796e75e2f660",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T11:20:12.226Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "a42e059b-24a3-4966-b4b5-79f5c6abc302",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T11:20:12.281Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "c8a89060-7a15-45c6-b421-8e0f205eff12",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:20:12.307Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "92422375-0fda-426a-bce2-0003f7c6eb0e",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x22dd6184898>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T11:20:12.520Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "d5561d99-60f2-43c3-8838-04a778d4c3b9",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:20:12.544Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "3b3a91de-1dd7-4266-a4b8-a56a768a512d",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x22dd622ce48>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T11:20:12.748Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "742e18b3-e564-4001-af92-0ce4dc119820",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T11:20:12.769Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "3747af73-750e-4554-a451-18b381474b51",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T11:20:12.795Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "beaabdfb-32e8-4162-87c8-88b83afe47f2",
     "hasError": false,
     "id": "8c2fad05-28d0-4a39-a610-ecc739cf5dc4",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n    <tr>\n      <th>Loan_Status</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>N</th>\n      <td>3948</td>\n      <td>0.0</td>\n      <td>135.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>3756</td>\n      <td>1280.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "             ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\nLoan_Status                                                                     \nN                       3948                0.0       135.0             360.0   \nY                       3756             1280.0       128.0             360.0   \n\n             Credit_History  \nLoan_Status                  \nN                       1.0  \nY                       1.0  "
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "518e45c1-b195-4fa4-b885-6104591dc036",
     "text": "data.groupby('Loan_Status').median() #Check what numerical features are good predictors"
    },
    "executionTime": "2020-09-17T11:20:12.841Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "d59594b4-7dd4-4ae8-bbd7-88e1bc71d58f",
     "hasError": false,
     "id": "a0a50455-bddc-4909-a749-451641fe509e",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x22dd629aef0>,\n  <matplotlib.lines.Line2D at 0x22dd629af28>],\n 'caps': [<matplotlib.lines.Line2D at 0x22dd62a85f8>,\n  <matplotlib.lines.Line2D at 0x22dd62a8940>],\n 'boxes': [<matplotlib.lines.Line2D at 0x22dd629aac8>],\n 'medians': [<matplotlib.lines.Line2D at 0x22dd62a8c88>],\n 'fliers': [<matplotlib.lines.Line2D at 0x22dd62a8fd0>],\n 'means': []}"
       },
       "execution_count": 21,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "b1d54d7f-a7ab-4c2a-b3e6-3afd5a93403e",
     "text": "#First I will make a boxplot for the ApplicantIncome.\n\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T11:20:12.957Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "29c76251-2f29-404b-b6e7-e538730c30f2",
     "hasError": false,
     "id": "67a1abc6-4297-4525-94d5-33705834ec46",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>333</th>\n      <td>LP002101</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>63337</td>\n      <td>0.0</td>\n      <td>490.0</td>\n      <td>180.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>409</th>\n      <td>LP002317</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>81000</td>\n      <td>0.0</td>\n      <td>360.0</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n333  LP002101   Male     Yes          0  Graduate            No   \n409  LP002317   Male     Yes         3+  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n333            63337                0.0       490.0             180.0   \n409            81000                0.0       360.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n333             1.0         Urban           Y  \n409             0.0         Rural           N  "
       },
       "execution_count": 22,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "dc489f68-a1fe-40b3-a7b6-ec08e9ba2fd4",
     "text": "#We see that there are two great outliers here. \n#let's look closer to these two outliers\noutliers = data[data['ApplicantIncome'] > 50000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T11:20:13.000Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "8ec40354-cf8d-46a7-91a4-90f7cf4a7ed3",
     "hasError": false,
     "id": "99d7bddd-6a96-4308-93ef-e0c1c62284e7",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x22dd63154e0>,\n  <matplotlib.lines.Line2D at 0x22dd6315828>],\n 'caps': [<matplotlib.lines.Line2D at 0x22dd6315b70>,\n  <matplotlib.lines.Line2D at 0x22dd6315eb8>],\n 'boxes': [<matplotlib.lines.Line2D at 0x22dd63150f0>],\n 'medians': [<matplotlib.lines.Line2D at 0x22dd6315f98>],\n 'fliers': [<matplotlib.lines.Line2D at 0x22dd6320588>],\n 'means': []}"
       },
       "execution_count": 23,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "40f36946-096f-4ca4-92cd-5a3ee8bbfdf1",
     "text": "#As you can see that these are just two rows and the status is not for both approved, I will remove these two rows for the model. \ndata = data[data['ApplicantIncome'] < 50000]\n#let's plot the applicant income again in a boxplot\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T11:20:13.204Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "fa371cc5-3932-47c9-bcbb-2a0dea173a4b",
     "hasError": false,
     "id": "7ab3bd02-3dc6-4e81-be30-a5659e415120",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>155</th>\n      <td>LP001536</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>39999</td>\n      <td>0.0</td>\n      <td>600.0</td>\n      <td>180.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>LP001637</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>33846</td>\n      <td>0.0</td>\n      <td>260.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>LP001640</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>39147</td>\n      <td>4750.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>443</th>\n      <td>LP002422</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>37719</td>\n      <td>0.0</td>\n      <td>152.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n155  LP001536   Male     Yes         3+  Graduate            No   \n183  LP001637   Male     Yes          1  Graduate            No   \n185  LP001640   Male     Yes          0  Graduate           Yes   \n443  LP002422   Male      No          1  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n155            39999                0.0       600.0             180.0   \n183            33846                0.0       260.0             360.0   \n185            39147             4750.0       120.0             360.0   \n443            37719                0.0       152.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n155             0.0     Semiurban           Y  \n183             1.0     Semiurban           N  \n185             1.0     Semiurban           Y  \n443             1.0     Semiurban           Y  "
       },
       "execution_count": 24,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "aa5c7432-0afa-4d3b-b934-ecfb87b7701c",
     "text": "#still a lot of outliers above the 25000. Let's look closer to those again to be sure we need to add them to get a good model performance\noutliers = data[data['ApplicantIncome'] > 25000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T11:20:13.303Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "0a4c79d9-1892-40c1-85b4-0bcf0d558d26",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T11:20:13.336Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "a30ac7ae-8a46-48f1-9717-4a6c93f799a2",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    object \n 1   Married            571 non-null    object \n 2   Dependents         571 non-null    object \n 3   Education          571 non-null    object \n 4   Self_Employed      571 non-null    object \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    object \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 55.8+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T11:20:13.364Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "60dff412-5f73-4e00-a825-1442be6791cf",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \n#Be aware, now the nan's are also handled as 0. This we will change back later on. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)"
    },
    "executionTime": "2020-09-17T11:20:13.374Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "335f5228-7ec4-4928-b1bb-45a7fb2ef380",
     "hasError": false,
     "id": "5f26fc7a-d43a-4466-bf5b-7d0d46cb51bf",
     "outputs": [],
     "persistentId": "5705657a-3b17-4d57-887e-06150dc1d36a",
     "text": "data['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1)"
    },
    "executionTime": "2020-09-17T11:20:13.471Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "9958c38c-87c7-43c9-a4ef-479bf34337d7",
     "hasError": false,
     "id": "f05d0db0-856d-4707-9299-8d5d54b0be3e",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>146.412162</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5417</td>\n      <td>4196.0</td>\n      <td>267.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2333</td>\n      <td>1516.0</td>\n      <td>95.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3036</td>\n      <td>2504.0</td>\n      <td>158.000000</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4006</td>\n      <td>1526.0</td>\n      <td>168.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12841</td>\n      <td>10968.0</td>\n      <td>349.000000</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "   Gender  Married  Dependents  Education  Self_Employed  ApplicantIncome  \\\n0       0        0           0          1              0             5849   \n1       0        1           1          1              0             4583   \n2       0        1           0          1              1             3000   \n3       0        1           0          0              0             2583   \n4       0        0           0          1              0             6000   \n5       0        1           1          1              1             5417   \n6       0        1           0          0              0             2333   \n7       0        1           1          1              0             3036   \n8       0        1           1          1              0             4006   \n9       0        1           1          1              0            12841   \n\n   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n0                0.0  146.412162             360.0             1.0   \n1             1508.0  128.000000             360.0             1.0   \n2                0.0   66.000000             360.0             1.0   \n3             2358.0  120.000000             360.0             1.0   \n4                0.0  141.000000             360.0             1.0   \n5             4196.0  267.000000             360.0             1.0   \n6             1516.0   95.000000             360.0             1.0   \n7             2504.0  158.000000             360.0             0.0   \n8             1526.0  168.000000             360.0             1.0   \n9            10968.0  349.000000             360.0             1.0   \n\n  Property_Area  Loan_Status  \n0         Urban            1  \n1         Rural            0  \n2         Urban            1  \n3         Urban            1  \n4         Urban            1  \n5         Urban            1  \n6         Urban            1  \n7     Semiurban            0  \n8         Urban            1  \n9     Semiurban            0  "
       },
       "execution_count": 29,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "2835334d-03e7-4e82-b4fa-19b77f9ab917",
     "text": "data.head(10)"
    },
    "executionTime": "2020-09-17T11:20:13.495Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "e2237daf-571d-4ae2-bc00-ce36bd250428",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "def f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)"
    },
    "executionTime": "2020-09-17T11:20:13.530Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "d3d88a16-1a8e-488d-9df3-c240833673fa",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    int32  \n 1   Married            571 non-null    int32  \n 2   Dependents         571 non-null    int32  \n 3   Education          571 non-null    int32  \n 4   Self_Employed      571 non-null    int32  \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    int64  \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(6), int64(2)\nmemory usage: 44.6 KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T11:20:13.563Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "44f1712a-1e75-47df-ba01-eded7ce07935",
     "hasError": false,
     "id": "c0f77a52-4bef-4b6e-95e3-f5e7812867c0",
     "outputs": [],
     "persistentId": "60f98890-6d1b-4afe-823d-bb83f92fa871",
     "text": "#data.drop('Dependents', axis=1, inplace=True)\n#data.drop('Property_Area', axis=1, inplace=True)"
    },
    "executionTime": "2020-09-17T11:20:13.569Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "a5507cbb-ec28-4090-adde-4f991e85eda4",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:11]  #independent columns\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T11:20:14.773Z"
   },
   {
    "cell": {
     "executionCount": 34,
     "executionEventId": "98307b44-7b07-4cac-9d8b-fb9ebc72917c",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02468854 0.01823011 0.03388525 0.02203381 0.02545561 0.20693847\n 0.1250903  0.19637332 0.05130323 0.24352007 0.05248131]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T11:20:15.444Z"
   },
   {
    "cell": {
     "executionCount": 35,
     "executionEventId": "c6795d7c-8aff-42dc-b84c-e9f2ebe7c3b1",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "   Name of the column         Score\n6   CoapplicantIncome  13836.533023\n5     ApplicantIncome    263.335634\n7          LoanAmount     93.339569\n9      Credit_History     18.763822\n10      Property_Area      4.362055\n1             Married      2.073582\n3           Education      0.595530\n0              Gender      0.324309\n4       Self_Employed      0.289648\n8    Loan_Amount_Term      0.089362\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T11:20:15.488Z"
   },
   {
    "cell": {
     "executionCount": 36,
     "executionEventId": "e691fc1f-5441-47e8-9768-8965300c2abe",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "X = data.iloc[:,0:11]  #independent columns\ny = data.iloc[:,-1]    #target column = Status of the loan\n"
    },
    "executionTime": "2020-09-17T11:27:29.900Z"
   },
   {
    "cell": {
     "executionCount": 37,
     "executionEventId": "d6447226-fca5-4adf-b064-b8a33cb240bb",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02259064 0.02308817 0.03399192 0.0209106  0.02500263 0.20503836\n 0.12975065 0.19501596 0.05023196 0.24394199 0.05043712]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T11:27:37.367Z"
   },
   {
    "cell": {
     "executionCount": 38,
     "executionEventId": "a58c9ae6-6c3e-4514-ac53-8c93228d121d",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "   Name of the column         Score\n6   CoapplicantIncome  13836.533023\n5     ApplicantIncome    263.335634\n7          LoanAmount     93.339569\n9      Credit_History     18.763822\n10      Property_Area      4.362055\n1             Married      2.073582\n3           Education      0.595530\n0              Gender      0.324309\n4       Self_Employed      0.289648\n8    Loan_Amount_Term      0.089362\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T11:27:43.750Z"
   },
   {
    "cell": {
     "executionCount": 39,
     "executionEventId": "06803440-8f56-411b-b382-221c24fbf561",
     "hasError": false,
     "id": "2178be7b-42e5-4cb3-b0f5-f8e561f937c1",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 1440x1440 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "c21a791f-678a-4d4b-8bba-08c65762eae3",
     "text": "#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T11:27:54.510Z"
   },
   {
    "cell": {
     "executionCount": 40,
     "executionEventId": "4f533742-7c96-4c71-abe0-2fde87b54472",
     "hasError": false,
     "id": "2178be7b-42e5-4cb3-b0f5-f8e561f937c1",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 720x720 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "c21a791f-678a-4d4b-8bba-08c65762eae3",
     "text": "#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(10,10))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T11:28:04.947Z"
   },
   {
    "cell": {
     "executionCount": 41,
     "executionEventId": "03d6a342-fa93-4215-81ef-4497e71473fc",
     "hasError": false,
     "id": "087cd112-7bc0-470e-917d-ba6d1d6bb8d9",
     "outputs": [],
     "persistentId": "6f110222-537f-4e89-a34d-5b8760d02ff1",
     "text": "#Load the chosen models here\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#add the logistic regression for cross check\nfrom sklearn.linear_model import LogisticRegression"
    },
    "executionTime": "2020-09-17T11:42:05.794Z"
   },
   {
    "cell": {
     "executionCount": 42,
     "executionEventId": "14a54c1d-5706-4e60-ab90-6b89b0ea9dca",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split"
    },
    "executionTime": "2020-09-17T11:42:43.919Z"
   },
   {
    "cell": {
     "executionCount": 43,
     "executionEventId": "88684bda-5534-468d-b020-cd27d91f33b7",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns \ny_4 = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, Y_train, Y_test= train_test_split(X_4,y_4, test_size=0.4 , random_state = 8)"
    },
    "executionTime": "2020-09-17T11:46:36.649Z"
   },
   {
    "cell": {
     "executionCount": 44,
     "executionEventId": "8fc86cbd-a73e-46c6-b672-010041cd6fcd",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns \ny_4 = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y_4, test_size=0.4 , random_state = 8)"
    },
    "executionTime": "2020-09-17T11:47:12.866Z"
   },
   {
    "cell": {
     "executionCount": 45,
     "executionEventId": "8d959676-90cd-407d-a1d1-8edf2d525204",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (342, 4)\nShape of X_test is:  (229, 4)\nShape of Y_train is:  (342,)\nShape of y_test is:  (229,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T11:47:15.080Z"
   },
   {
    "cell": {
     "executionCount": 46,
     "executionEventId": "b09278f3-18d5-4d64-be13-5c1d1ae3082d",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "\nratio of target in y_train : [0.6871345 0.3128655]\nratio of target in y_test : [0.70742358 0.29257642]\nratio of target in original_data : [0.69527145 0.30472855]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "print('\\nratio of target in y_train :',y_train.value_counts().values/ len(y_train))\nprint('ratio of target in y_test :',y_test.value_counts().values/ len(y_test))\nprint('ratio of target in original_data :',data['Loan_Status'].value_counts().values/ len(data))"
    },
    "executionTime": "2020-09-17T11:49:07.751Z"
   },
   {
    "cell": {
     "executionCount": 47,
     "executionEventId": "ca39b62a-ce54-4951-b0fa-e44085434a37",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.6871345 0.3128655]\n\nThe % approved status versus not approved in in y_test : [0.70742358 0.29257642]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))\n"
    },
    "executionTime": "2020-09-17T11:51:20.869Z"
   },
   {
    "cell": {
     "executionCount": 48,
     "executionEventId": "92c41281-b654-47b6-955d-991a2d78df98",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.4 , random_state = 8)"
    },
    "executionTime": "2020-09-17T11:51:54.050Z"
   },
   {
    "cell": {
     "executionCount": 49,
     "executionEventId": "77e139b0-8c6b-4847-a67d-d4305e856029",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (342, 4)\nShape of X_test is:  (229, 4)\nShape of Y_train is:  (342,)\nShape of y_test is:  (229,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T11:51:55.517Z"
   },
   {
    "cell": {
     "executionCount": 50,
     "executionEventId": "2da43e7d-dbd8-43ee-96b8-8db043309b32",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.6871345 0.3128655]\n\nThe % approved status versus not approved in in y_test : [0.70742358 0.29257642]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T11:51:59.778Z"
   },
   {
    "cell": {
     "executionCount": 51,
     "executionEventId": "01a457b3-1ebf-49c0-a683-0921e7835d12",
     "hasError": true,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "ename": "NameError",
       "evalue": "name 'linear_model' is not defined",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-51-cc950dbb511c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# logistic_regression model\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mlogistic_mod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlinear_model\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mLogisticRegression\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mC\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1.0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mclass_weight\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m{\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m0.45\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m0.55\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mlogistic_mod\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mNameError\u001b[0m: name 'linear_model' is not defined"
       ]
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = linear_model.LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T11:57:52.662Z"
   },
   {
    "cell": {
     "executionCount": 52,
     "executionEventId": "a055164f-3255-4a19-b3dc-ace3e5538eb9",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "C:\\Users\\Renate\\Anaconda3\\ANACONDA\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
      },
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 52,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T11:58:15.238Z"
   },
   {
    "cell": {
     "executionCount": 53,
     "executionEventId": "9c6ea3b5-dbd6-400c-836c-7bfba6c440e4",
     "hasError": false,
     "id": "bda5fd70-37e2-43fe-a787-8154803026e5",
     "outputs": [],
     "persistentId": "4860ab0b-f0b8-4c66-a998-891258c46a6f",
     "text": "import sklearn.metrics as sklm\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import preprocessing\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import LinearSVC"
    },
    "executionTime": "2020-09-17T11:58:19.317Z"
   },
   {
    "cell": {
     "executionCount": 54,
     "executionEventId": "0682206e-6923-4a29-9cd0-3772b5073bc2",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                51\nActual negative         0               162\n\nAccuracy        0.78\nMacro precision 0.88\nMacro recall    0.62\n \n           Positive      Negative\nNum case       67           162\nPrecision    1.00          0.76\nRecall       0.24          1.00\nF1           0.39          0.86\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "def score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n#     print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])\n\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T11:58:21.417Z"
   },
   {
    "cell": {
     "executionCount": 55,
     "executionEventId": "3c9f77ce-d40b-4967-b05c-d03f47249763",
     "hasError": false,
     "id": "b0fd9007-3ea9-4379-a1ea-397eb620f133",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Mean Square Error      = 0.1703056768558952\nRoot Mean Square Error = 0.4126810837146467\nMean Absolute Error    = 0.1703056768558952\nMedian Absolute Error  = 0.0\nR^2                    = 0.17716970702045343\nAdjusted R^2           = 0.06664026467991732\n"
      }
     ],
     "persistentId": "0ceed3b4-49ff-442d-b024-d5b921358021",
     "text": "import math\ndef print_metrics(y_true, y_predicted, n_parameters):\n    ## First compute R^2 and the adjusted R^2\n    r2 = sklm.r2_score(y_true, y_predicted)\n    r2_adj = r2 - (n_parameters - 1)/(y_true.shape[0] - n_parameters) * (1 - r2)\n    \n    ## Print the usual metrics and the R^2 values\n    print('Mean Square Error      = ' + str(sklm.mean_squared_error(y_true, y_predicted)))\n    print('Root Mean Square Error = ' + str(math.sqrt(sklm.mean_squared_error(y_true, y_predicted))))\n    print('Mean Absolute Error    = ' + str(sklm.mean_absolute_error(y_true, y_predicted)))\n    print('Median Absolute Error  = ' + str(sklm.median_absolute_error(y_true, y_predicted)))\n    print('R^2                    = ' + str(r2))\n    print('Adjusted R^2           = ' + str(r2_adj))\n\n   \ny_score = logistic_mod.predict(X_test) \nprint_metrics(y_test, y_score, 28)"
    },
    "executionTime": "2020-09-17T12:00:35.311Z"
   },
   {
    "cell": {
     "executionCount": 56,
     "executionEventId": "578d1d33-e292-4979-afe8-b4e9c51e1823",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                51\nActual negative         0               162\n\nAccuracy        0.78\nAUC             0.74\nMacro precision 0.88\nMacro recall    0.62\n \n           Positive      Negative\nNum case       67           162\nPrecision    1.00          0.76\nRecall       0.24          1.00\nF1           0.39          0.86\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "def score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])\n\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:03:18.347Z"
   },
   {
    "cell": {
     "executionCount": 57,
     "executionEventId": "f301b50e-5954-4193-8804-f4a7b3e227b1",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                51\nActual negative         0               162\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.78\nAUC             0.74\nMacro precision 0.88\nMacro recall    0.62\n \n           Positive      Negative\nNum case       67           162\nPrecision    1.00          0.76\nRecall       0.24          1.00\nF1           0.39          0.86\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "def score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])\n\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:04:01.910Z"
   },
   {
    "cell": {
     "executionCount": 58,
     "executionEventId": "527301d7-a020-477d-a431-e2b4391aa5fe",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 58,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)\n"
    },
    "executionTime": "2020-09-17T12:05:18.888Z"
   },
   {
    "cell": {
     "executionCount": 59,
     "executionEventId": "827f1d2f-6e37-413a-bf77-1e39aa2baee0",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         7                60\nActual negative         1               161\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.57\nMacro precision 0.80\nMacro recall    0.55\n \n           Positive      Negative\nNum case       67           162\nPrecision    0.88          0.73\nRecall       0.10          0.99\nF1           0.19          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "prob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:06:38.524Z"
   },
   {
    "cell": {
     "executionCount": 60,
     "executionEventId": "2c904e52-f70e-4fef-9253-68617d7cf177",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 60,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:11:08.896Z"
   },
   {
    "cell": {
     "executionCount": 61,
     "executionEventId": "7a351641-c9a3-4bc9-8444-2c130b559b5d",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 8)"
    },
    "executionTime": "2020-09-17T12:11:53.952Z"
   },
   {
    "cell": {
     "executionCount": 62,
     "executionEventId": "ba64476f-69b0-45a0-a0d5-72ed86b16580",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 4)\nShape of X_test is:  (172, 4)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:11:55.787Z"
   },
   {
    "cell": {
     "executionCount": 63,
     "executionEventId": "6b6b45b0-c398-4c4a-a560-e3a204a897e0",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69172932 0.30827068]\n\nThe % approved status versus not approved in in y_test : [0.70348837 0.29651163]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:11:57.597Z"
   },
   {
    "cell": {
     "executionCount": 64,
     "executionEventId": "e4c787c7-feef-49f8-bd6e-032156430c68",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:12:00.812Z"
   },
   {
    "cell": {
     "executionCount": 65,
     "executionEventId": "3f2f4606-b8d6-4f2c-9452-e89e46e8104a",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 65,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:12:03.224Z"
   },
   {
    "cell": {
     "executionCount": 66,
     "executionEventId": "912c95a1-6873-4714-97b3-49efc6b5f0f6",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                45\nActual negative         1               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.63\nMacro precision 0.79\nMacro recall    0.55\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.86          0.73\nRecall       0.12          0.99\nF1           0.21          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:12:05.456Z"
   },
   {
    "cell": {
     "executionCount": 67,
     "executionEventId": "20d548b2-8c55-4e53-a6e3-ca3c33114027",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 67,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:12:27.844Z"
   },
   {
    "cell": {
     "executionCount": 68,
     "executionEventId": "1c6aa350-4ce0-47e3-b66a-f297f74a3579",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                45\nActual negative         1               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.63\nMacro precision 0.79\nMacro recall    0.55\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.86          0.73\nRecall       0.12          0.99\nF1           0.21          0.84\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3)"
    },
    "executionTime": "2020-09-17T12:12:31.279Z"
   },
   {
    "cell": {
     "executionCount": 69,
     "executionEventId": "0227791b-fa5b-4aec-8bbd-93c0569d08cc",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        22                29\nActual negative         1               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.83\nAUC             0.74\nMacro precision 0.88\nMacro recall    0.71\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.96          0.81\nRecall       0.43          0.99\nF1           0.59          0.89\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:12:49.003Z"
   },
   {
    "cell": {
     "executionCount": 70,
     "executionEventId": "9b6bb3b7-b52a-4764-8f36-fb3e01f7760a",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 70,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:13:47.149Z"
   },
   {
    "cell": {
     "executionCount": 71,
     "executionEventId": "4fb84709-613f-4275-9e8e-9125c7dcd40a",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        14                37\nActual negative         0               121\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.78\nAUC             0.75\nMacro precision 0.88\nMacro recall    0.64\n \n           Positive      Negative\nNum case       51           121\nPrecision    1.00          0.77\nRecall       0.27          1.00\nF1           0.43          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:14:12.340Z"
   },
   {
    "cell": {
     "executionCount": 72,
     "executionEventId": "630ff844-2f76-4d39-8e1e-72d76f497e09",
     "hasError": true,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "ename": "NameError",
       "evalue": "name 'nr' is not defined",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-72-771484a5387d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mnr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mseed\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1234\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mregressor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m100\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mregressor\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mNameError\u001b[0m: name 'nr' is not defined"
       ]
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "nr.seed(1234)\nregressor = RandomForestClassifier(n_estimators=100)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:16:38.744Z"
   },
   {
    "cell": {
     "executionCount": 73,
     "executionEventId": "b37d4fc6-bc84-432b-a189-8d2bb43ac7d9",
     "hasError": true,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "ename": "NameError",
       "evalue": "name 'RandomForestClassifier' is not defined",
       "output_type": "error",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-73-6b03df12bcd6>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mregressor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m100\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mregressor\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mNameError\u001b[0m: name 'RandomForestClassifier' is not defined"
       ]
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "regressor = RandomForestClassifier(n_estimators=100)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:16:47.980Z"
   },
   {
    "cell": {
     "executionCount": 74,
     "executionEventId": "4060d158-32b4-4b9f-96b3-1ee1ce77e365",
     "hasError": false,
     "id": "087cd112-7bc0-470e-917d-ba6d1d6bb8d9",
     "outputs": [],
     "persistentId": "6f110222-537f-4e89-a34d-5b8760d02ff1",
     "text": "#Load the chosen models here\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n#add the logistic regression for cross check\nfrom sklearn.linear_model import LogisticRegression"
    },
    "executionTime": "2020-09-17T12:16:59.405Z"
   },
   {
    "cell": {
     "executionCount": 75,
     "executionEventId": "3f7eeb61-edaa-4e7b-8a4d-1ffe402f1973",
     "hasError": false,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "data": {
        "text/plain": "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=100,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)"
       },
       "execution_count": 75,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "regressor = RandomForestClassifier(n_estimators=100)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:18:19.032Z"
   },
   {
    "cell": {
     "executionCount": 76,
     "executionEventId": "aa93d569-95aa-4d1d-981b-15f6f9d3e236",
     "hasError": false,
     "id": "1d868c0f-2a9b-4745-b875-68052a4d47ac",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                33\nActual negative         7               114\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.77\nAUC             0.76\nMacro precision 0.75\nMacro recall    0.65\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.72          0.78\nRecall       0.35          0.94\nF1           0.47          0.85\n"
      }
     ],
     "persistentId": "59d822ed-b301-4079-be9f-62a4450f50c9",
     "text": "#let's see it's performance\nprob_R = regressor.predict_proba(X_test)\nprint_metrics(y_test, prob_R, 0.3)"
    },
    "executionTime": "2020-09-17T12:18:42.067Z"
   },
   {
    "cell": {
     "executionCount": 77,
     "executionEventId": "2d33bce6-3804-4da7-aa4a-c4b431b0372c",
     "hasError": false,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "data": {
        "text/plain": "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=100,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)"
       },
       "execution_count": 77,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "regressor = RandomForestClassifier(n_estimators=100)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:18:48.523Z"
   },
   {
    "cell": {
     "executionCount": 78,
     "executionEventId": "95949073-a0e1-4c07-9327-d9ba478d616e",
     "hasError": false,
     "id": "1d868c0f-2a9b-4745-b875-68052a4d47ac",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        19                32\nActual negative         8               113\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.77\nAUC             0.76\nMacro precision 0.74\nMacro recall    0.65\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.70          0.78\nRecall       0.37          0.93\nF1           0.49          0.85\n"
      }
     ],
     "persistentId": "59d822ed-b301-4079-be9f-62a4450f50c9",
     "text": "#let's see it's performance\nprob_R = regressor.predict_proba(X_test)\nprint_metrics(y_test, prob_R, 0.3)"
    },
    "executionTime": "2020-09-17T12:18:50.525Z"
   },
   {
    "cell": {
     "executionCount": 79,
     "executionEventId": "15610465-f02a-46b3-8c67-1686701a199e",
     "hasError": false,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "data": {
        "text/plain": "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=100,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)"
       },
       "execution_count": 79,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "regressor = RandomForestClassifier(n_estimators=100)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:18:53.378Z"
   },
   {
    "cell": {
     "executionCount": 80,
     "executionEventId": "dd95878c-7001-4ed8-bc3a-bfbea5d19dfd",
     "hasError": false,
     "id": "1d868c0f-2a9b-4745-b875-68052a4d47ac",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        20                31\nActual negative         9               112\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.77\nAUC             0.75\nMacro precision 0.74\nMacro recall    0.66\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.69          0.78\nRecall       0.39          0.93\nF1           0.50          0.85\n"
      }
     ],
     "persistentId": "59d822ed-b301-4079-be9f-62a4450f50c9",
     "text": "#let's see it's performance\nprob_R = regressor.predict_proba(X_test)\nprint_metrics(y_test, prob_R, 0.3)"
    },
    "executionTime": "2020-09-17T12:18:55.232Z"
   },
   {
    "cell": {
     "executionCount": 81,
     "executionEventId": "ae64bfb9-b564-4df2-a700-3b7a51c8a4cc",
     "hasError": false,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "data": {
        "text/plain": "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=100,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)"
       },
       "execution_count": 81,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "regressor = RandomForestClassifier(n_estimators=100)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:18:58.646Z"
   },
   {
    "cell": {
     "executionCount": 82,
     "executionEventId": "eab5752e-33ed-4dcc-b999-df0476d59224",
     "hasError": false,
     "id": "1d868c0f-2a9b-4745-b875-68052a4d47ac",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                33\nActual negative         7               114\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.77\nAUC             0.75\nMacro precision 0.75\nMacro recall    0.65\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.72          0.78\nRecall       0.35          0.94\nF1           0.47          0.85\n"
      }
     ],
     "persistentId": "59d822ed-b301-4079-be9f-62a4450f50c9",
     "text": "#let's see it's performance\nprob_R = regressor.predict_proba(X_test)\nprint_metrics(y_test, prob_R, 0.3)"
    },
    "executionTime": "2020-09-17T12:19:00.428Z"
   },
   {
    "cell": {
     "executionCount": 83,
     "executionEventId": "a9c24240-898f-4739-adbf-3f0945b5742e",
     "hasError": false,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "data": {
        "text/plain": "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=200,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)"
       },
       "execution_count": 83,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "regressor = RandomForestClassifier(n_estimators=200)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:19:05.058Z"
   },
   {
    "cell": {
     "executionCount": 84,
     "executionEventId": "dd3451f1-5ae4-422f-abd4-3599ce76607e",
     "hasError": false,
     "id": "1d868c0f-2a9b-4745-b875-68052a4d47ac",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        19                32\nActual negative         6               115\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.78\nAUC             0.76\nMacro precision 0.77\nMacro recall    0.66\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.76          0.78\nRecall       0.37          0.95\nF1           0.50          0.86\n"
      }
     ],
     "persistentId": "59d822ed-b301-4079-be9f-62a4450f50c9",
     "text": "#let's see it's performance\nprob_R = regressor.predict_proba(X_test)\nprint_metrics(y_test, prob_R, 0.3)"
    },
    "executionTime": "2020-09-17T12:19:06.866Z"
   },
   {
    "cell": {
     "executionCount": 85,
     "executionEventId": "2ef7194b-96b0-4bb1-a008-10d0c9d9fbe7",
     "hasError": false,
     "id": "d0b76e76-2828-455e-855b-72000a379a28",
     "outputs": [
      {
       "data": {
        "text/plain": "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=200,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)"
       },
       "execution_count": 85,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "8e806416-1153-408d-a0d2-92302419610e",
     "text": "regressor = RandomForestClassifier(n_estimators=200)\nregressor.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:19:11.419Z"
   },
   {
    "cell": {
     "executionCount": 86,
     "executionEventId": "8d2d2098-af2b-401c-ba1f-cdbc8f3370e0",
     "hasError": false,
     "id": "1d868c0f-2a9b-4745-b875-68052a4d47ac",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                33\nActual negative         7               114\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.77\nAUC             0.76\nMacro precision 0.75\nMacro recall    0.65\n \n           Positive      Negative\nNum case       51           121\nPrecision    0.72          0.78\nRecall       0.35          0.94\nF1           0.47          0.85\n"
      }
     ],
     "persistentId": "59d822ed-b301-4079-be9f-62a4450f50c9",
     "text": "#let's see it's performance\nprob_R = regressor.predict_proba(X_test)\nprint_metrics(y_test, prob_R, 0.3)"
    },
    "executionTime": "2020-09-17T12:19:13.209Z"
   },
   {
    "cell": {
     "executionCount": 87,
     "executionEventId": "0e81ad9a-f400-4436-8c23-f9ab12be5fb7",
     "hasError": false,
     "id": "087cd112-7bc0-470e-917d-ba6d1d6bb8d9",
     "outputs": [],
     "persistentId": "6f110222-537f-4e89-a34d-5b8760d02ff1",
     "text": "#Load the chosen models here\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#add the logistic regression for cross check\nfrom sklearn.linear_model import LogisticRegression"
    },
    "executionTime": "2020-09-17T12:20:41.563Z"
   },
   {
    "cell": {
     "executionCount": 88,
     "executionEventId": "eedd23c0-97ec-4167-9498-039ba27082fd",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.25 , random_state = 8)"
    },
    "executionTime": "2020-09-17T12:20:43.756Z"
   },
   {
    "cell": {
     "executionCount": 89,
     "executionEventId": "2d381b06-fd46-4612-8a52-593d61aa76b1",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (428, 4)\nShape of X_test is:  (143, 4)\nShape of Y_train is:  (428,)\nShape of y_test is:  (143,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:20:45.319Z"
   },
   {
    "cell": {
     "executionCount": 90,
     "executionEventId": "3f64dbe0-c9f3-4b02-9014-8c68421f7c67",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69626168 0.30373832]\n\nThe % approved status versus not approved in in y_test : [0.69230769 0.30769231]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:20:48.301Z"
   },
   {
    "cell": {
     "executionCount": 91,
     "executionEventId": "6cc4d58b-a835-45ad-9bcf-1e1df7ef6985",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:20:50.061Z"
   },
   {
    "cell": {
     "executionCount": 92,
     "executionEventId": "8cc3e611-63cf-4d0d-8526-d645712e1b4a",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 92,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:20:54.393Z"
   },
   {
    "cell": {
     "executionCount": 93,
     "executionEventId": "4c136522-14e2-49ac-b06b-4bdd20a1a842",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                38\nActual negative         1                98\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.60\nMacro precision 0.79\nMacro recall    0.56\n \n           Positive      Negative\nNum case       44            99\nPrecision    0.86          0.72\nRecall       0.14          0.99\nF1           0.24          0.83\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:20:56.670Z"
   },
   {
    "cell": {
     "executionCount": 94,
     "executionEventId": "7c8b8536-a829-463c-9868-40cad14ef076",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 94,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:21:21.763Z"
   },
   {
    "cell": {
     "executionCount": 95,
     "executionEventId": "e6cb1c6f-a1a5-4a95-a79a-21aba4ef2454",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        17                27\nActual negative         2                97\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.70\nMacro precision 0.84\nMacro recall    0.68\n \n           Positive      Negative\nNum case       44            99\nPrecision    0.89          0.78\nRecall       0.39          0.98\nF1           0.54          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:21:24.115Z"
   },
   {
    "cell": {
     "executionCount": 96,
     "executionEventId": "5578d977-31ca-4e0e-be8c-80f9690b99f9",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 10)"
    },
    "executionTime": "2020-09-17T12:21:43.607Z"
   },
   {
    "cell": {
     "executionCount": 97,
     "executionEventId": "495c9efc-808a-40f2-9dd7-d09ece3e1eae",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.70927318 0.29072682]\n\nThe % approved status versus not approved in in y_test : [0.6627907 0.3372093]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:21:46.753Z"
   },
   {
    "cell": {
     "executionCount": 98,
     "executionEventId": "4afe1f84-dee6-4e3f-a521-1774294d4bfa",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:21:54.700Z"
   },
   {
    "cell": {
     "executionCount": 99,
     "executionEventId": "163dfc6c-9a8e-4b12-9c01-4cc80f5c16ce",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:21:56.720Z"
   },
   {
    "cell": {
     "executionCount": 100,
     "executionEventId": "c480750b-f9a3-4ec3-b6a3-efcc6391c8fb",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 4)\nShape of X_test is:  (172, 4)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:21:59.593Z"
   },
   {
    "cell": {
     "executionCount": 101,
     "executionEventId": "1af94d74-434e-4485-8378-d011895a8a90",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:22:02.101Z"
   },
   {
    "cell": {
     "executionCount": 102,
     "executionEventId": "8cf50419-296f-4188-bf97-b29b8db1fd0d",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 102,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:22:04.246Z"
   },
   {
    "cell": {
     "executionCount": 103,
     "executionEventId": "8a3af09f-28d9-4fc0-b83a-a2dd4f18ae5c",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.63\nMacro precision 0.79\nMacro recall    0.55\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.86          0.72\nRecall       0.12          0.99\nF1           0.20          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:22:05.970Z"
   },
   {
    "cell": {
     "executionCount": 104,
     "executionEventId": "21a312a3-f857-4cd8-ae60-fe6b79544cb4",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 104,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:22:18.461Z"
   },
   {
    "cell": {
     "executionCount": 105,
     "executionEventId": "f08c71b1-c083-46c4-a95d-ce6b187d0835",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:22:20.455Z"
   },
   {
    "cell": {
     "executionCount": 106,
     "executionEventId": "805ca03a-fd1e-4e94-b4c6-eed74cc41612",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:22:30.106Z"
   },
   {
    "cell": {
     "executionCount": 107,
     "executionEventId": "b781ad37-b7a4-42bf-8ba6-5ca081b361fb",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 107,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:22:40.905Z"
   },
   {
    "cell": {
     "executionCount": 108,
     "executionEventId": "79ad3cdd-7dab-4e72-800f-54ac64d6a52d",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                36\nActual negative         0               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.79\nAUC             0.70\nMacro precision 0.88\nMacro recall    0.65\n \n           Positive      Negative\nNum case       52           120\nPrecision    1.00          0.77\nRecall       0.31          1.00\nF1           0.47          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:22:43.232Z"
   },
   {
    "cell": {
     "executionCount": 109,
     "executionEventId": "2d26b770-00bf-4e20-b401-c6d30dbc573c",
     "hasError": false,
     "id": "78a9602c-7fef-45b0-a492-4de069624a1f",
     "outputs": [],
     "persistentId": "76ed6d3a-cbbd-43bc-a67d-8a958a85d8a3",
     "text": "X = data.iloc[:, :10]  # all independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:25:37.550Z"
   },
   {
    "cell": {
     "executionCount": 110,
     "executionEventId": "7025ef10-9fe5-4f5a-adda-b6f166a93ab6",
     "hasError": false,
     "id": "7213144a-aec4-4b15-9382-94b7dfccc068",
     "outputs": [
      {
       "name": "stderr",
       "output_type": "stream",
       "text": "C:\\Users\\Renate\\Anaconda3\\ANACONDA\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
      },
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 110,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "b6040e90-0644-4121-b0e6-99afc08136d5",
     "text": "logistic_mod.fit(X_train, y_train)\nD_tree.fit(X_train, y_train)\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:25:38.407Z"
   },
   {
    "cell": {
     "executionCount": 111,
     "executionEventId": "aca97f14-1957-468f-bc87-8b4c510c7269",
     "hasError": false,
     "id": "ede7845d-4802-493c-a384-f56d4cb8b90c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         7               113\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.69\nAUC             0.58\nMacro precision 0.59\nMacro recall    0.53\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.46          0.71\nRecall       0.12          0.94\nF1           0.18          0.81\n"
      }
     ],
     "persistentId": "59d822ed-b301-4079-be9f-62a4450f50c9",
     "text": "#Now let's see how this model performs\nprob_K_all = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K_all, 0.3) "
    },
    "executionTime": "2020-09-17T12:26:05.542Z"
   },
   {
    "cell": {
     "executionCount": 112,
     "executionEventId": "8e23ab01-91f2-4132-82c0-3e2493a6ce7a",
     "hasError": false,
     "id": "ed6b177e-d007-4b86-b4a1-4fd29754bac2",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.69\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "fd2c2305-0c78-4091-ae2c-5172e0592fde",
     "text": "#let's see how Decision Tree performs\nprob_D_all = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D_all, 0.3)"
    },
    "executionTime": "2020-09-17T12:27:02.232Z"
   },
   {
    "cell": {
     "executionCount": 113,
     "executionEventId": "b0d86821-0002-473f-baa7-9b5542d1e30b",
     "hasError": false,
     "id": "75bf435b-d6b2-4808-8117-87a0d01220c5",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        11                41\nActual negative         2               118\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.75\nAUC             0.68\nMacro precision 0.79\nMacro recall    0.60\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.85          0.74\nRecall       0.21          0.98\nF1           0.34          0.85\n"
      }
     ],
     "persistentId": "3c53b2f7-14cb-4161-aa69-b06b9f317ccc",
     "text": "#Check the performance of the logistic regression model\nprob_L_all = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, prob_L_all, 0.3)"
    },
    "executionTime": "2020-09-17T12:27:52.802Z"
   },
   {
    "cell": {
     "executionCount": 114,
     "executionEventId": "930f1aa2-9379-4604-a78b-11d8e619da5b",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Education', 'Married']]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:34:48.396Z"
   },
   {
    "cell": {
     "executionCount": 115,
     "executionEventId": "afc5e56c-d49d-438b-a6ff-0e7c63443ff1",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 5)\nShape of X_test is:  (172, 5)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:34:49.142Z"
   },
   {
    "cell": {
     "executionCount": 116,
     "executionEventId": "44ff5865-8185-43df-808f-2052b3f92dba",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:34:49.732Z"
   },
   {
    "cell": {
     "executionCount": 117,
     "executionEventId": "53747a2c-72b3-468a-8250-6a0500d13508",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:34:51.928Z"
   },
   {
    "cell": {
     "executionCount": 118,
     "executionEventId": "46e9129a-5b25-4009-809f-bb1ddd5136b1",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 118,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:34:53.020Z"
   },
   {
    "cell": {
     "executionCount": 119,
     "executionEventId": "80f4fa2b-e639-491b-a8bb-af9810de87d7",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         2               118\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.72\nAUC             0.64\nMacro precision 0.73\nMacro recall    0.55\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.75          0.72\nRecall       0.12          0.98\nF1           0.20          0.83\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:34:53.581Z"
   },
   {
    "cell": {
     "executionCount": 120,
     "executionEventId": "ccd470ba-6697-4441-812a-c5608cc3fddd",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 120,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:34:57.159Z"
   },
   {
    "cell": {
     "executionCount": 121,
     "executionEventId": "1a3d8412-e580-4af5-acf1-f8488cb82d71",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:34:57.736Z"
   },
   {
    "cell": {
     "executionCount": 122,
     "executionEventId": "60241e0d-38a5-464a-987f-0fe4130e9e49",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'ApplicantIncome', 'Married']]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:35:18.705Z"
   },
   {
    "cell": {
     "executionCount": 123,
     "executionEventId": "b6daee23-62c0-4d9d-964e-32abb5315243",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 5)\nShape of X_test is:  (172, 5)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:35:19.397Z"
   },
   {
    "cell": {
     "executionCount": 124,
     "executionEventId": "544e81e7-cfe8-4707-9580-3ad6f733bc39",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:35:19.866Z"
   },
   {
    "cell": {
     "executionCount": 125,
     "executionEventId": "75f9d661-1254-49ee-bb38-3c8d59a13d65",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:35:21.213Z"
   },
   {
    "cell": {
     "executionCount": 126,
     "executionEventId": "cea8caad-f198-4809-903c-248d8ac799c8",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 126,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:35:22.218Z"
   },
   {
    "cell": {
     "executionCount": 127,
     "executionEventId": "8d55eaf1-3114-48fa-98f9-5a4715105b66",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         6               114\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.70\nAUC             0.59\nMacro precision 0.61\nMacro recall    0.53\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.50          0.71\nRecall       0.12          0.95\nF1           0.19          0.81\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:35:22.789Z"
   },
   {
    "cell": {
     "executionCount": 128,
     "executionEventId": "f0ae8814-9a15-4b59-b17a-660e27df923a",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 128,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:35:25.375Z"
   },
   {
    "cell": {
     "executionCount": 129,
     "executionEventId": "facebfa8-57cf-4e6c-aea4-923f5f4ee590",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.70\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:35:26.856Z"
   },
   {
    "cell": {
     "executionCount": 130,
     "executionEventId": "649186cd-45b9-44b2-b00f-707431fa7e8e",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 130,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:35:32.483Z"
   },
   {
    "cell": {
     "executionCount": 131,
     "executionEventId": "bcb01677-52bb-4e7c-8151-79ce051ba99b",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         2                50\nActual negative         2               118\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.70\nAUC             0.69\nMacro precision 0.60\nMacro recall    0.51\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.50          0.70\nRecall       0.04          0.98\nF1           0.07          0.82\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:35:33.104Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "015dbdcf-1fd1-4d59-8821-b2266ebd5545",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots\nimport sklearn.metrics as sklm #This is to test the models"
    },
    "executionTime": "2020-09-17T12:37:14.539Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "33c0a560-91bb-48a8-93a0-9ef033a8a031",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T12:37:14.637Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "0da5d8fb-c8b5-41ad-9dae-b32201341006",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T12:37:14.677Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "9fb72ac3-41b8-4fb7-a4fa-37ba07444f1d",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T12:37:14.690Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "739db180-c766-4298-a358-8abe124296b5",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T12:37:14.812Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "568a3fbe-0e94-4d9a-be86-da4c3dea09ea",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002529</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002529   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T12:37:14.982Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "13120c27-5773-48e6-8b45-85c4a2376c51",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T12:37:15.013Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "7c0ed96e-3133-45ed-b752-39ac31dc5053",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T12:37:15.249Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "22ae93fe-4936-4ea0-8735-314924834960",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T12:37:15.311Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "11795aa4-1daa-44b6-805d-218d680a6cd4",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:37:15.318Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "42181657-fd9f-4d44-8c0a-4a3d4fda35d3",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x22d32b12160>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T12:37:15.444Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "ff6d1646-7dae-410c-8aa1-db72594a8ec4",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T12:37:15.505Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "41d56ed8-1a2f-4af1-818b-2e12b464d280",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T12:37:15.520Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "fe9ebbec-1a66-4d8d-96d3-526bf5f33641",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:37:15.533Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "9643a2af-e7c0-44a2-b4a2-4a28381066cd",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x22d32bcb6d8>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T12:37:15.725Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "0237dd1d-870b-446d-82a5-ae98ca19ea4f",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:37:15.774Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "e0ec3c48-fd8c-49b9-a188-6da8a86301e0",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x22d32c6f860>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T12:37:15.870Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "c4205aae-48b6-4a66-8593-b9dd97f539d1",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:37:15.922Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "46724cd4-a946-444f-9ee3-b1c8e3a9249a",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T12:37:15.947Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "57141012-0dc9-48c1-a9df-3b27c390e92b",
     "hasError": false,
     "id": "8c2fad05-28d0-4a39-a610-ecc739cf5dc4",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n    <tr>\n      <th>Loan_Status</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>N</th>\n      <td>3948</td>\n      <td>0.0</td>\n      <td>135.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>3756</td>\n      <td>1280.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "             ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\nLoan_Status                                                                     \nN                       3948                0.0       135.0             360.0   \nY                       3756             1280.0       128.0             360.0   \n\n             Credit_History  \nLoan_Status                  \nN                       1.0  \nY                       1.0  "
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "518e45c1-b195-4fa4-b885-6104591dc036",
     "text": "data.groupby('Loan_Status').median() #Check what numerical features are good predictors"
    },
    "executionTime": "2020-09-17T12:37:15.995Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "ae07ac5b-3770-4694-ada7-589bf1928ec9",
     "hasError": false,
     "id": "a0a50455-bddc-4909-a749-451641fe509e",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x22d32ce6940>,\n  <matplotlib.lines.Line2D at 0x22d32ce6cf8>],\n 'caps': [<matplotlib.lines.Line2D at 0x22d32ce6da0>,\n  <matplotlib.lines.Line2D at 0x22d32cf23c8>],\n 'boxes': [<matplotlib.lines.Line2D at 0x22d32ce6518>],\n 'medians': [<matplotlib.lines.Line2D at 0x22d32cf2710>],\n 'fliers': [<matplotlib.lines.Line2D at 0x22d32cf2a58>],\n 'means': []}"
       },
       "execution_count": 21,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "b1d54d7f-a7ab-4c2a-b3e6-3afd5a93403e",
     "text": "#First I will make a boxplot for the ApplicantIncome.\n\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T12:37:16.139Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "4c3812ec-b470-4e79-b681-08057845e677",
     "hasError": false,
     "id": "67a1abc6-4297-4525-94d5-33705834ec46",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>333</th>\n      <td>LP002101</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>63337</td>\n      <td>0.0</td>\n      <td>490.0</td>\n      <td>180.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>409</th>\n      <td>LP002317</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>81000</td>\n      <td>0.0</td>\n      <td>360.0</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n333  LP002101   Male     Yes          0  Graduate            No   \n409  LP002317   Male     Yes         3+  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n333            63337                0.0       490.0             180.0   \n409            81000                0.0       360.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n333             1.0         Urban           Y  \n409             0.0         Rural           N  "
       },
       "execution_count": 22,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "dc489f68-a1fe-40b3-a7b6-ec08e9ba2fd4",
     "text": "#We see that there are two great outliers here. \n#let's look closer to these two outliers\noutliers = data[data['ApplicantIncome'] > 50000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T12:37:16.179Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "aa6ec559-cc76-4fbc-babd-c2e6a46492d8",
     "hasError": false,
     "id": "99d7bddd-6a96-4308-93ef-e0c1c62284e7",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x22d32d52cf8>,\n  <matplotlib.lines.Line2D at 0x22d32d52e10>],\n 'caps': [<matplotlib.lines.Line2D at 0x22d32d5e438>,\n  <matplotlib.lines.Line2D at 0x22d32d5e780>],\n 'boxes': [<matplotlib.lines.Line2D at 0x22d32d528d0>],\n 'medians': [<matplotlib.lines.Line2D at 0x22d32d5eac8>],\n 'fliers': [<matplotlib.lines.Line2D at 0x22d32d5ee10>],\n 'means': []}"
       },
       "execution_count": 23,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "40f36946-096f-4ca4-92cd-5a3ee8bbfdf1",
     "text": "#As you can see that these are just two rows and the status is not for both approved, I will remove these two rows for the model. \ndata = data[data['ApplicantIncome'] < 50000]\n#let's plot the applicant income again in a boxplot\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T12:37:16.298Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "a4b6fc62-e916-4e3e-813c-dbb5b5d63f53",
     "hasError": false,
     "id": "7ab3bd02-3dc6-4e81-be30-a5659e415120",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>155</th>\n      <td>LP001536</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>39999</td>\n      <td>0.0</td>\n      <td>600.0</td>\n      <td>180.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>LP001637</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>33846</td>\n      <td>0.0</td>\n      <td>260.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>LP001640</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>39147</td>\n      <td>4750.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>443</th>\n      <td>LP002422</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>37719</td>\n      <td>0.0</td>\n      <td>152.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n155  LP001536   Male     Yes         3+  Graduate            No   \n183  LP001637   Male     Yes          1  Graduate            No   \n185  LP001640   Male     Yes          0  Graduate           Yes   \n443  LP002422   Male      No          1  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n155            39999                0.0       600.0             180.0   \n183            33846                0.0       260.0             360.0   \n185            39147             4750.0       120.0             360.0   \n443            37719                0.0       152.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n155             0.0     Semiurban           Y  \n183             1.0     Semiurban           N  \n185             1.0     Semiurban           Y  \n443             1.0     Semiurban           Y  "
       },
       "execution_count": 24,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "aa5c7432-0afa-4d3b-b934-ecfb87b7701c",
     "text": "#still a lot of outliers above the 25000. Let's look closer to those again to be sure we need to add them to get a good model performance\noutliers = data[data['ApplicantIncome'] > 25000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T12:37:16.329Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "bfae3388-7bfa-4796-9f7e-3a46d0861040",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T12:37:16.362Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "c3bd53b3-aafc-40fe-8513-d76c9a9fe8a7",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    object \n 1   Married            571 non-null    object \n 2   Dependents         571 non-null    object \n 3   Education          571 non-null    object \n 4   Self_Employed      571 non-null    object \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    object \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 55.8+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T12:37:16.412Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "f51b5236-dc52-47cf-adf2-01a29037b9ee",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1) #I saw that there was no big difference between the number of dependents if there are any. So I made no dependents = 0  and yes dependents = 1"
    },
    "executionTime": "2020-09-17T12:37:16.427Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "15063531-4669-4640-883c-87af3245d975",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "#Lastly I want to change the Property_Area column, but I want to keep all three options. Therefore this I will do differently. \n\ndef f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)"
    },
    "executionTime": "2020-09-17T12:37:16.483Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "d38ad504-4a05-442c-8ff4-442a20bc86ad",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    int32  \n 1   Married            571 non-null    int32  \n 2   Dependents         571 non-null    int32  \n 3   Education          571 non-null    int32  \n 4   Self_Employed      571 non-null    int32  \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    int64  \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(6), int64(2)\nmemory usage: 44.6 KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T12:37:16.501Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "02ada3e3-7c05-40d7-9604-55c8f7377e1d",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "#First we need to split the dataset in the y-column (the target) and the components (X), the independent columns. \n#This is needed as we need to use the X columns to predict the y in the model. \n\nX = data.iloc[:,0:11]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n"
    },
    "executionTime": "2020-09-17T12:37:16.533Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "a7de91c7-0f6d-49d9-bcae-1fd0ce33863c",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02377291 0.0226249  0.03349805 0.02363037 0.02314475 0.2048389\n 0.12544274 0.1990811  0.05166977 0.24345735 0.04883916]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T12:37:16.898Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "dba910c6-9f96-469f-8f49-1f549c2da8ea",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "   Name of the column         Score\n6   CoapplicantIncome  13836.533023\n5     ApplicantIncome    263.335634\n7          LoanAmount     93.339569\n9      Credit_History     18.763822\n10      Property_Area      4.362055\n1             Married      2.073582\n3           Education      0.595530\n0              Gender      0.324309\n4       Self_Employed      0.289648\n8    Loan_Amount_Term      0.089362\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T12:37:16.926Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "2dff1fe9-e106-4543-a09c-36e1aa68bbf5",
     "hasError": false,
     "id": "2178be7b-42e5-4cb3-b0f5-f8e561f937c1",
     "outputs": [
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 720x720 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "c21a791f-678a-4d4b-8bba-08c65762eae3",
     "text": "#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(10,10))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T12:37:17.656Z"
   },
   {
    "cell": {
     "executionCount": 34,
     "executionEventId": "b29df4b0-81c1-4d62-869f-5b025c82b7be",
     "hasError": false,
     "id": "087cd112-7bc0-470e-917d-ba6d1d6bb8d9",
     "outputs": [],
     "persistentId": "6f110222-537f-4e89-a34d-5b8760d02ff1",
     "text": "#Load the chosen models here\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#add the logistic regression for cross check\nfrom sklearn.linear_model import LogisticRegression"
    },
    "executionTime": "2020-09-17T12:37:17.707Z"
   },
   {
    "cell": {
     "executionCount": 35,
     "executionEventId": "60866569-0998-4de5-8413-db7d0bd0cf2a",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns chosen\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:37:17.713Z"
   },
   {
    "cell": {
     "executionCount": 36,
     "executionEventId": "05ba9716-26c9-4112-bae6-89b7029a3947",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 4)\nShape of X_test is:  (172, 4)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:37:17.798Z"
   },
   {
    "cell": {
     "executionCount": 37,
     "executionEventId": "3c7b4804-518f-43ab-bac3-af35730023f2",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:37:17.812Z"
   },
   {
    "cell": {
     "executionCount": 38,
     "executionEventId": "dabebb87-e192-421c-a5b8-ec506846b4fb",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:37:17.824Z"
   },
   {
    "cell": {
     "executionCount": 39,
     "executionEventId": "268601fc-8b05-4064-a7b5-ad6703173a34",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 39,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:37:17.858Z"
   },
   {
    "cell": {
     "executionCount": 40,
     "executionEventId": "d205b5f3-c558-4da2-ae4a-7b2dd056fb1e",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.63\nMacro precision 0.79\nMacro recall    0.55\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.86          0.72\nRecall       0.12          0.99\nF1           0.20          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:37:17.873Z"
   },
   {
    "cell": {
     "executionCount": 41,
     "executionEventId": "580ab3ad-8888-446a-9cde-bf2489356c41",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 41,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:37:17.885Z"
   },
   {
    "cell": {
     "executionCount": 42,
     "executionEventId": "a1c301d3-c086-495e-9069-a5c925b49806",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:37:17.934Z"
   },
   {
    "cell": {
     "executionCount": 43,
     "executionEventId": "61d100c0-a01c-421f-af77-071283237ee0",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 43,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:37:17.949Z"
   },
   {
    "cell": {
     "executionCount": 44,
     "executionEventId": "7e45c22f-b466-4b3c-9ff2-1bca84fcb72d",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                36\nActual negative         0               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.79\nAUC             0.70\nMacro precision 0.88\nMacro recall    0.65\n \n           Positive      Negative\nNum case       52           120\nPrecision    1.00          0.77\nRecall       0.31          1.00\nF1           0.47          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:37:17.964Z"
   },
   {
    "cell": {
     "executionCount": 45,
     "executionEventId": "9d3f4f07-4691-4b7f-9495-3efbe17baa8c",
     "hasError": false,
     "id": "a0a50455-bddc-4909-a749-451641fe509e",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x22d332e94a8>,\n  <matplotlib.lines.Line2D at 0x22d332e97f0>],\n 'caps': [<matplotlib.lines.Line2D at 0x22d332e9b38>,\n  <matplotlib.lines.Line2D at 0x22d332e9e80>],\n 'boxes': [<matplotlib.lines.Line2D at 0x22d332e9080>],\n 'medians': [<matplotlib.lines.Line2D at 0x22d332e9f28>],\n 'fliers': [<matplotlib.lines.Line2D at 0x22d332f3550>],\n 'means': []}"
       },
       "execution_count": 45,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "b1d54d7f-a7ab-4c2a-b3e6-3afd5a93403e",
     "text": "#First I will make a boxplot for the ApplicantIncome.\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T12:40:18.129Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "d41133ef-a225-459a-be58-b889203c7688",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots\nimport sklearn.metrics as sklm #This is to test the models"
    },
    "executionTime": "2020-09-17T12:40:28.953Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "d5894ca5-7ac7-4fc8-af36-a38fe7669432",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T12:40:29.066Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "ec39b7f4-bfac-4241-8cb2-5f699ef9a9f1",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T12:40:29.097Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "ba0e697c-99d3-4ced-91d5-bc1df4441fea",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T12:40:29.105Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "a4caa9df-05e6-488f-b55c-ddc9faa598ca",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T12:40:29.114Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "cebf8962-ceb2-4501-8034-41e370e3876e",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002586</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002586   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T12:40:29.182Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "1d401f50-115d-4819-a761-0f64c9b84786",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T12:40:29.208Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "0a73018c-082d-4db4-9897-a8af4fe0f57f",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T12:40:29.336Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "c721b3a4-6c76-4757-812d-2734d8adba30",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T12:40:29.448Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "a5f9c1ba-a625-461c-96db-bafad1463a70",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:40:29.458Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "25924e9d-05fc-4983-b609-50d73307d5b7",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x16669d64cc0>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T12:40:29.591Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "8e6cb34b-348c-454f-b5a4-a2378edc23ff",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T12:40:29.611Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "82a4d798-c081-4899-befa-fb2c1ad90b93",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T12:40:29.627Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "3974c883-542b-4180-85b5-8013c05075ad",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:40:29.677Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "64e22419-035a-4dea-bebf-1748ceaf379f",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x16669e1b748>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T12:40:29.839Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "88363e83-8a2c-4fed-88e4-72735aaa09c2",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:40:29.854Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "949ee587-38e6-481e-9f58-c364887522ae",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x16669ec4780>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T12:40:30.020Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "6c50d350-28d0-4096-9902-89e420e618c5",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:40:30.038Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "03243e01-d865-45c1-8d18-6bf6b93043a9",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T12:40:30.052Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "ffbf2bac-3735-4809-9efa-a364c4ae899c",
     "hasError": false,
     "id": "a0a50455-bddc-4909-a749-451641fe509e",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x16669f31438>,\n  <matplotlib.lines.Line2D at 0x16669f317b8>],\n 'caps': [<matplotlib.lines.Line2D at 0x16669f31b00>,\n  <matplotlib.lines.Line2D at 0x16669f31e48>],\n 'boxes': [<matplotlib.lines.Line2D at 0x16669f31048>],\n 'medians': [<matplotlib.lines.Line2D at 0x16669f31f28>],\n 'fliers': [<matplotlib.lines.Line2D at 0x16669f3d518>],\n 'means': []}"
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "b1d54d7f-a7ab-4c2a-b3e6-3afd5a93403e",
     "text": "#First I will make a boxplot for the ApplicantIncome.\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T12:40:30.159Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "e50e12de-b8cc-497c-ab01-8c544c48a83d",
     "hasError": false,
     "id": "67a1abc6-4297-4525-94d5-33705834ec46",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>333</th>\n      <td>LP002101</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>63337</td>\n      <td>0.0</td>\n      <td>490.0</td>\n      <td>180.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>409</th>\n      <td>LP002317</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>81000</td>\n      <td>0.0</td>\n      <td>360.0</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n333  LP002101   Male     Yes          0  Graduate            No   \n409  LP002317   Male     Yes         3+  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n333            63337                0.0       490.0             180.0   \n409            81000                0.0       360.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n333             1.0         Urban           Y  \n409             0.0         Rural           N  "
       },
       "execution_count": 21,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "dc489f68-a1fe-40b3-a7b6-ec08e9ba2fd4",
     "text": "#We see that there are two great outliers here. \n#let's look closer to these two outliers\noutliers = data[data['ApplicantIncome'] > 50000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T12:40:30.251Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "411d3af0-9b06-4b93-b8a8-0edcdd24d1b0",
     "hasError": false,
     "id": "99d7bddd-6a96-4308-93ef-e0c1c62284e7",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x16669f9f7f0>,\n  <matplotlib.lines.Line2D at 0x16669f9fba8>],\n 'caps': [<matplotlib.lines.Line2D at 0x16669f9fef0>,\n  <matplotlib.lines.Line2D at 0x16669f9ffd0>],\n 'boxes': [<matplotlib.lines.Line2D at 0x16669f9f400>],\n 'medians': [<matplotlib.lines.Line2D at 0x16669fac5c0>],\n 'fliers': [<matplotlib.lines.Line2D at 0x16669fac908>],\n 'means': []}"
       },
       "execution_count": 22,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "40f36946-096f-4ca4-92cd-5a3ee8bbfdf1",
     "text": "#As you can see that these are just two rows and the status is not for both approved, I will remove these two rows for the model. \ndata = data[data['ApplicantIncome'] < 50000]\n#let's plot the applicant income again in a boxplot\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T12:40:30.346Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "09734e59-9892-4fb0-97c5-69a871f07284",
     "hasError": false,
     "id": "7ab3bd02-3dc6-4e81-be30-a5659e415120",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>155</th>\n      <td>LP001536</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>39999</td>\n      <td>0.0</td>\n      <td>600.0</td>\n      <td>180.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>LP001637</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>33846</td>\n      <td>0.0</td>\n      <td>260.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>LP001640</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>39147</td>\n      <td>4750.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>443</th>\n      <td>LP002422</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>37719</td>\n      <td>0.0</td>\n      <td>152.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n155  LP001536   Male     Yes         3+  Graduate            No   \n183  LP001637   Male     Yes          1  Graduate            No   \n185  LP001640   Male     Yes          0  Graduate           Yes   \n443  LP002422   Male      No          1  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n155            39999                0.0       600.0             180.0   \n183            33846                0.0       260.0             360.0   \n185            39147             4750.0       120.0             360.0   \n443            37719                0.0       152.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n155             0.0     Semiurban           Y  \n183             1.0     Semiurban           N  \n185             1.0     Semiurban           Y  \n443             1.0     Semiurban           Y  "
       },
       "execution_count": 23,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "aa5c7432-0afa-4d3b-b934-ecfb87b7701c",
     "text": "#still a lot of outliers above the 25000. Let's look closer to those again to be sure we need to add them to get a good model performance\noutliers = data[data['ApplicantIncome'] > 25000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T12:40:30.366Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "24a87c5b-f244-4213-94a6-cd6a5f289abf",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T12:40:30.431Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "7d1ee18a-5174-4dd2-84cf-255217b44124",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    object \n 1   Married            571 non-null    object \n 2   Dependents         571 non-null    object \n 3   Education          571 non-null    object \n 4   Self_Employed      571 non-null    object \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    object \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 55.8+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T12:40:30.452Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "19f9ed98-3e0a-4039-aa96-fbca65668c40",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1) #I saw that there was no big difference between the number of dependents if there are any. So I made no dependents = 0  and yes dependents = 1"
    },
    "executionTime": "2020-09-17T12:40:30.462Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "99ecec29-cc38-4d26-a821-2d5b3d71b806",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "#Lastly I want to change the Property_Area column, but I want to keep all three options. Therefore this I will do differently. \n\ndef f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)"
    },
    "executionTime": "2020-09-17T12:40:30.555Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "043e5041-23bd-4557-9791-8459a1181ae1",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    int32  \n 1   Married            571 non-null    int32  \n 2   Dependents         571 non-null    int32  \n 3   Education          571 non-null    int32  \n 4   Self_Employed      571 non-null    int32  \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    int64  \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(6), int64(2)\nmemory usage: 44.6 KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T12:40:30.584Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "162fabef-29ed-4d5a-ab86-38994e557d45",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "#First we need to split the dataset in the y-column (the target) and the components (X), the independent columns. \n#This is needed as we need to use the X columns to predict the y in the model. \n\nX = data.iloc[:,0:11]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n"
    },
    "executionTime": "2020-09-17T12:40:30.589Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "ee78d74e-6554-424e-9fb8-b76a62f3f17d",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02280922 0.02130363 0.03306035 0.02205959 0.02124706 0.20818096\n 0.12649493 0.19657538 0.05210256 0.24381539 0.05235091]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T12:40:30.939Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "827e74d7-6ff5-459b-b8f3-f78dcd5269ae",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "   Name of the column         Score\n6   CoapplicantIncome  13836.533023\n5     ApplicantIncome    263.335634\n7          LoanAmount     93.339569\n9      Credit_History     18.763822\n10      Property_Area      4.362055\n1             Married      2.073582\n3           Education      0.595530\n0              Gender      0.324309\n4       Self_Employed      0.289648\n8    Loan_Amount_Term      0.089362\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T12:40:30.966Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "8ba6870e-5782-47b0-9989-eb4db4dabb0f",
     "hasError": false,
     "id": "2178be7b-42e5-4cb3-b0f5-f8e561f937c1",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 720x720 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "c21a791f-678a-4d4b-8bba-08c65762eae3",
     "text": "#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(10,10))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T12:40:31.845Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "934f6a40-3429-4c64-833b-4151c296fc6c",
     "hasError": false,
     "id": "087cd112-7bc0-470e-917d-ba6d1d6bb8d9",
     "outputs": [],
     "persistentId": "6f110222-537f-4e89-a34d-5b8760d02ff1",
     "text": "#Load the chosen models here\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#add the logistic regression for cross check\nfrom sklearn.linear_model import LogisticRegression"
    },
    "executionTime": "2020-09-17T12:40:31.920Z"
   },
   {
    "cell": {
     "executionCount": 34,
     "executionEventId": "08a15c42-9e7c-4832-8690-8bf4852934fa",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area', 'Married']]  #independent columns chosen\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:40:31.927Z"
   },
   {
    "cell": {
     "executionCount": 35,
     "executionEventId": "994ad83c-7a9a-4962-ae66-d0ec6a83a05c",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 4)\nShape of X_test is:  (172, 4)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:40:32.044Z"
   },
   {
    "cell": {
     "executionCount": 36,
     "executionEventId": "e7d33a11-0561-4cc8-b563-0979c4e9d81f",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:40:32.059Z"
   },
   {
    "cell": {
     "executionCount": 37,
     "executionEventId": "b8456b6f-5ed3-4bf2-9609-fd7674436fac",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:40:32.070Z"
   },
   {
    "cell": {
     "executionCount": 38,
     "executionEventId": "0f6b3b2b-c640-4b4a-b0eb-6a6e66e8b8df",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 38,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:40:32.126Z"
   },
   {
    "cell": {
     "executionCount": 39,
     "executionEventId": "d1ff14c2-c99e-4c00-a0f1-838c329cdcb0",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.63\nMacro precision 0.79\nMacro recall    0.55\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.86          0.72\nRecall       0.12          0.99\nF1           0.20          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:40:32.188Z"
   },
   {
    "cell": {
     "executionCount": 40,
     "executionEventId": "36f59daf-da07-4213-9c9a-8bceb6123fa7",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 40,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:40:32.208Z"
   },
   {
    "cell": {
     "executionCount": 41,
     "executionEventId": "058cdd81-0cff-4af7-9421-f5a7db704bb2",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:40:32.227Z"
   },
   {
    "cell": {
     "executionCount": 42,
     "executionEventId": "15201ad5-1de4-4cdd-ad43-cf09ff1b2baf",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 42,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:40:32.244Z"
   },
   {
    "cell": {
     "executionCount": 43,
     "executionEventId": "90e8e129-0291-4c9a-a7a5-df8efad48313",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                36\nActual negative         0               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.79\nAUC             0.70\nMacro precision 0.88\nMacro recall    0.65\n \n           Positive      Negative\nNum case       52           120\nPrecision    1.00          0.77\nRecall       0.31          1.00\nF1           0.47          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:40:32.259Z"
   },
   {
    "cell": {
     "executionCount": 44,
     "executionEventId": "b5bb0158-60ab-4b81-9a54-f7c388dc475c",
     "hasError": false,
     "id": "ca136e5a-df0c-4981-b64c-e964ed9ae894",
     "outputs": [
      {
       "data": {
        "text/plain": "array([1., 0.])"
       },
       "execution_count": 44,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "98b9fbfa-68a0-4ad0-a2a4-9bc15081ca3a",
     "text": "data['Credit_History'].unique()"
    },
    "executionTime": "2020-09-17T12:41:29.338Z"
   },
   {
    "cell": {
     "executionCount": 45,
     "executionEventId": "cc5172a6-6dab-4320-bd67-c181cc4a7ec8",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Married']]  #independent columns chosen  'Property_Area',\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:42:28.198Z"
   },
   {
    "cell": {
     "executionCount": 46,
     "executionEventId": "5a78eb52-4ca9-4ef3-a93b-f91085523c1e",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 3)\nShape of X_test is:  (172, 3)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:42:30.155Z"
   },
   {
    "cell": {
     "executionCount": 47,
     "executionEventId": "aac2a6fd-9a65-475a-b41a-cb0bb7b7ea77",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:42:31.451Z"
   },
   {
    "cell": {
     "executionCount": 48,
     "executionEventId": "bf962664-5d28-4d78-b184-909119b029ee",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:42:33.547Z"
   },
   {
    "cell": {
     "executionCount": 49,
     "executionEventId": "9d3bfc86-c14d-4c94-b827-20e3e4bbdd02",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 49,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:42:35.361Z"
   },
   {
    "cell": {
     "executionCount": 50,
     "executionEventId": "eb2db1b7-aa3d-4a53-b079-babd8136247d",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         9                43\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.74\nAUC             0.62\nMacro precision 0.82\nMacro recall    0.58\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.90          0.73\nRecall       0.17          0.99\nF1           0.29          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:42:36.449Z"
   },
   {
    "cell": {
     "executionCount": 51,
     "executionEventId": "95dc6ea3-9e8e-4f43-8513-ef767dbb137f",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 51,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:42:40.333Z"
   },
   {
    "cell": {
     "executionCount": 52,
     "executionEventId": "32315e28-c3aa-4f69-909c-38111dee45ad",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:42:40.827Z"
   },
   {
    "cell": {
     "executionCount": 53,
     "executionEventId": "d812b652-b75e-4603-b73a-4d275cb94d1a",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 53,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:42:44.320Z"
   },
   {
    "cell": {
     "executionCount": 54,
     "executionEventId": "5843d2b7-4e7b-4534-b603-b8d9d79f7944",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:42:44.829Z"
   },
   {
    "cell": {
     "executionCount": 55,
     "executionEventId": "028e0527-9621-4029-bdee-beabd5a29672",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Property_Area']]  #independent columns chosen  'Property_Area',\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:43:06.025Z"
   },
   {
    "cell": {
     "executionCount": 56,
     "executionEventId": "14fe4b5c-f6b7-4b70-a93c-ff22524fb82d",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 3)\nShape of X_test is:  (172, 3)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:43:06.736Z"
   },
   {
    "cell": {
     "executionCount": 57,
     "executionEventId": "c6ca33f3-71e1-4244-8e73-bbb5e3b03455",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:43:07.074Z"
   },
   {
    "cell": {
     "executionCount": 58,
     "executionEventId": "f326e3a9-9ffe-4eab-98a1-559f4acb92a7",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:43:07.887Z"
   },
   {
    "cell": {
     "executionCount": 59,
     "executionEventId": "9900dfa6-4195-40f2-9d35-6b98003fbe9f",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 59,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:43:08.426Z"
   },
   {
    "cell": {
     "executionCount": 60,
     "executionEventId": "3f34554b-d0e1-4042-86a7-0be47b4f8124",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         9                43\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.74\nAUC             0.65\nMacro precision 0.82\nMacro recall    0.58\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.90          0.73\nRecall       0.17          0.99\nF1           0.29          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:43:08.721Z"
   },
   {
    "cell": {
     "executionCount": 61,
     "executionEventId": "2ee8c13f-989a-4374-838e-9e45146cfbae",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 61,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:43:09.631Z"
   },
   {
    "cell": {
     "executionCount": 62,
     "executionEventId": "510a38dd-5d7f-4ed0-9d4a-1a902edc52b6",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.75\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:43:10.105Z"
   },
   {
    "cell": {
     "executionCount": 63,
     "executionEventId": "f6edc97f-4fbd-4620-9632-2244d590c625",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 63,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:43:12.818Z"
   },
   {
    "cell": {
     "executionCount": 64,
     "executionEventId": "3504ec27-1ecd-43f3-867c-3d61ccf844c6",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.68\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:43:13.380Z"
   },
   {
    "cell": {
     "executionCount": 65,
     "executionEventId": "8778d569-d8f8-47ff-86bf-6ed19bf7adde",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History']]  #independent columns chosen  'Property_Area',\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:43:34.426Z"
   },
   {
    "cell": {
     "executionCount": 66,
     "executionEventId": "9f8f3550-7bbd-44ea-b513-e517aef23c45",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 1)\nShape of X_test is:  (172, 1)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:43:34.864Z"
   },
   {
    "cell": {
     "executionCount": 67,
     "executionEventId": "0048903a-557e-464d-bc3c-281faa70581d",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:43:35.120Z"
   },
   {
    "cell": {
     "executionCount": 68,
     "executionEventId": "404aedbf-1e35-4cf6-97f0-6463a5987611",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:43:35.644Z"
   },
   {
    "cell": {
     "executionCount": 69,
     "executionEventId": "39491ce8-a382-442d-bc55-737b867d7385",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 69,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:43:36.252Z"
   },
   {
    "cell": {
     "executionCount": 70,
     "executionEventId": "b05053b4-d79f-47f2-8e35-433eca5719b8",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:43:37.014Z"
   },
   {
    "cell": {
     "executionCount": 71,
     "executionEventId": "9bda5cf2-473c-4257-9bdf-c20867a95c4f",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 71,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:43:40.816Z"
   },
   {
    "cell": {
     "executionCount": 72,
     "executionEventId": "1c3d3cab-bad4-4fae-adb6-bd777d95fbcb",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:43:41.311Z"
   },
   {
    "cell": {
     "executionCount": 73,
     "executionEventId": "c372d8cc-58d1-4964-8bea-02fe9df41e45",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 73,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:43:43.002Z"
   },
   {
    "cell": {
     "executionCount": 74,
     "executionEventId": "df6b769b-f005-4675-8730-d8470c3b6b9a",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:43:43.416Z"
   },
   {
    "cell": {
     "executionCount": 75,
     "executionEventId": "7f5fdd6c-e3f8-4d60-accd-d3479236edd1",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome']]  #independent columns chosen  'Property_Area',\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:44:12.307Z"
   },
   {
    "cell": {
     "executionCount": 76,
     "executionEventId": "2d385710-987c-43a5-9333-0872ffc4215d",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 2)\nShape of X_test is:  (172, 2)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:44:12.830Z"
   },
   {
    "cell": {
     "executionCount": 77,
     "executionEventId": "552a5429-3cc8-4569-bfda-04476e9b861b",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:44:13.107Z"
   },
   {
    "cell": {
     "executionCount": 78,
     "executionEventId": "b0adf2ea-e95c-47d0-b733-f82c31858bf0",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:44:14.048Z"
   },
   {
    "cell": {
     "executionCount": 79,
     "executionEventId": "5ec58f11-65f1-4021-a8d4-e6c9571aeab9",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 79,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:44:15.250Z"
   },
   {
    "cell": {
     "executionCount": 80,
     "executionEventId": "dfc1f399-bf29-44c3-b2f0-c23629d874fa",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         9                43\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.74\nAUC             0.61\nMacro precision 0.82\nMacro recall    0.58\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.90          0.73\nRecall       0.17          0.99\nF1           0.29          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:44:15.749Z"
   },
   {
    "cell": {
     "executionCount": 81,
     "executionEventId": "f24666ea-d4ce-402f-8556-43e3908a847c",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 81,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:44:18.976Z"
   },
   {
    "cell": {
     "executionCount": 82,
     "executionEventId": "0b30a616-e5fd-48f6-bcb5-15dc687661d2",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.70\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:44:19.644Z"
   },
   {
    "cell": {
     "executionCount": 83,
     "executionEventId": "c735144e-44d6-4986-9bc6-39b236315a08",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 83,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:44:21.328Z"
   },
   {
    "cell": {
     "executionCount": 84,
     "executionEventId": "78e0fa0f-be70-4c20-8cd0-57c68d9f8af5",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.69\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:44:21.853Z"
   },
   {
    "cell": {
     "executionCount": 85,
     "executionEventId": "b0270b70-f48f-44dd-8960-302fec331e5c",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Married']]  #independent columns chosen  'Property_Area',\ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:44:49.717Z"
   },
   {
    "cell": {
     "executionCount": 86,
     "executionEventId": "ddcae3b1-1956-43b9-bd29-7505b5e7aeb3",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 3)\nShape of X_test is:  (172, 3)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:44:49.997Z"
   },
   {
    "cell": {
     "executionCount": 87,
     "executionEventId": "add8f646-1a31-4c06-9cfa-1860d0033cf0",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:44:50.189Z"
   },
   {
    "cell": {
     "executionCount": 88,
     "executionEventId": "a374306d-3747-4e0d-b54d-ffe66425cc7f",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:44:50.623Z"
   },
   {
    "cell": {
     "executionCount": 89,
     "executionEventId": "a0ac35de-f1ec-42d8-bb8d-23e3aed320e6",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 89,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:44:51.247Z"
   },
   {
    "cell": {
     "executionCount": 90,
     "executionEventId": "bbfcff65-3964-4b37-bf46-c6989b2a5b59",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         9                43\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.74\nAUC             0.62\nMacro precision 0.82\nMacro recall    0.58\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.90          0.73\nRecall       0.17          0.99\nF1           0.29          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:44:51.599Z"
   },
   {
    "cell": {
     "executionCount": 91,
     "executionEventId": "b3c3cb9f-ff15-482d-b4e3-362d2946b364",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 91,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:44:53.361Z"
   },
   {
    "cell": {
     "executionCount": 92,
     "executionEventId": "414dfae8-a956-4d13-9dcf-249da6ec2295",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:44:53.589Z"
   },
   {
    "cell": {
     "executionCount": 93,
     "executionEventId": "e1f817f6-868d-421b-9850-7fa4919e464f",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 93,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:44:54.568Z"
   },
   {
    "cell": {
     "executionCount": 94,
     "executionEventId": "8aff4c28-0fbb-46ee-8342-531137e3b272",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:44:54.738Z"
   },
   {
    "cell": {
     "executionCount": 95,
     "executionEventId": "0a7a8600-29df-41cc-bf41-5d113d343726",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Married', 'Property_Area']] #independent columns chosen \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:45:19.289Z"
   },
   {
    "cell": {
     "executionCount": 96,
     "executionEventId": "50467bc7-006b-4936-8cb0-18bb32c73ff5",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 4)\nShape of X_test is:  (172, 4)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:45:19.509Z"
   },
   {
    "cell": {
     "executionCount": 97,
     "executionEventId": "3edcb1ae-bec3-495a-bceb-7cd30d7f7005",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:45:19.830Z"
   },
   {
    "cell": {
     "executionCount": 98,
     "executionEventId": "d94ae0cd-425c-48fa-b2b1-c45f8b343ed2",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:45:20.326Z"
   },
   {
    "cell": {
     "executionCount": 99,
     "executionEventId": "e7e17419-fa7e-4284-b6a7-bfbb31c57dd7",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 99,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:45:20.633Z"
   },
   {
    "cell": {
     "executionCount": 100,
     "executionEventId": "19df98f7-8b1f-4b21-ae14-b80b15de8017",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.63\nMacro precision 0.79\nMacro recall    0.55\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.86          0.72\nRecall       0.12          0.99\nF1           0.20          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:45:20.792Z"
   },
   {
    "cell": {
     "executionCount": 101,
     "executionEventId": "6df5d419-17f8-4e8e-838d-88561ed03ff5",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 101,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:45:22.509Z"
   },
   {
    "cell": {
     "executionCount": 102,
     "executionEventId": "30f0742a-6003-4013-968d-dea30d57b6ee",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:45:23.085Z"
   },
   {
    "cell": {
     "executionCount": 103,
     "executionEventId": "20876fdd-46be-48c9-802f-eba7e5d109da",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 103,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:45:24.295Z"
   },
   {
    "cell": {
     "executionCount": 104,
     "executionEventId": "1fd27465-f33e-4078-b432-6ad6ee83889a",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                36\nActual negative         0               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.79\nAUC             0.70\nMacro precision 0.88\nMacro recall    0.65\n \n           Positive      Negative\nNum case       52           120\nPrecision    1.00          0.77\nRecall       0.31          1.00\nF1           0.47          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:45:24.808Z"
   },
   {
    "cell": {
     "executionCount": 1,
     "executionEventId": "b54b2f9c-7112-412f-b815-0905fd6ebedd",
     "hasError": false,
     "id": "5c286c4b-2016-49ff-a9cd-80b079d32c73",
     "outputs": [],
     "persistentId": "345f9805-89cc-453b-8133-3e9654f131c1",
     "text": "import pandas as pd #we use this to load, read and transform the dataset\nimport numpy as np #we use this for statistical analysis\nimport matplotlib.pyplot as plt #we use this to visualize the dataset\nimport seaborn as sns #we use this to make countplots\nimport sklearn.metrics as sklm #This is to test the models"
    },
    "executionTime": "2020-09-17T12:45:42.459Z"
   },
   {
    "cell": {
     "executionCount": 2,
     "executionEventId": "df399486-302f-4217-8878-4d9d5c4d10ca",
     "hasError": false,
     "id": "97faa389-5e77-4b1e-b09c-3382d8c27a2c",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>LP001002</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>5849</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LP001003</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>4583</td>\n      <td>1508.0</td>\n      <td>128.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LP001005</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>3000</td>\n      <td>0.0</td>\n      <td>66.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>LP001006</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Not Graduate</td>\n      <td>No</td>\n      <td>2583</td>\n      <td>2358.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LP001008</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>6000</td>\n      <td>0.0</td>\n      <td>141.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n0  LP001002   Male      No          0      Graduate            No   \n1  LP001003   Male     Yes          1      Graduate            No   \n2  LP001005   Male     Yes          0      Graduate           Yes   \n3  LP001006   Male     Yes          0  Not Graduate            No   \n4  LP001008   Male      No          0      Graduate            No   \n\n   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n0             5849                0.0         NaN             360.0   \n1             4583             1508.0       128.0             360.0   \n2             3000                0.0        66.0             360.0   \n3             2583             2358.0       120.0             360.0   \n4             6000                0.0       141.0             360.0   \n\n   Credit_History Property_Area Loan_Status  \n0             1.0         Urban           Y  \n1             1.0         Rural           N  \n2             1.0         Urban           Y  \n3             1.0         Urban           Y  \n4             1.0         Urban           Y  "
       },
       "execution_count": 2,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d498c45b-aabb-4b81-96b4-449a04b50d3a",
     "text": "#here we load the train data\ndata = pd.read_csv(r'C:\\Users\\Renate\\Documents\\GitHub\\Data-Projects\\Kaggle\\Kaggle - Bank Loan Status prediction\\Train.csv')\n\n#and immediately I would like to see how this dataset looks like\ndata.head()"
    },
    "executionTime": "2020-09-17T12:45:42.587Z"
   },
   {
    "cell": {
     "executionCount": 3,
     "executionEventId": "b07107e9-3e37-46dc-ba53-689781402cdc",
     "hasError": false,
     "id": "ab463ab2-0c48-4a32-9968-8ed4d75dabe1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 614 entries, 0 to 613\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Loan_ID            614 non-null    object \n 1   Gender             601 non-null    object \n 2   Married            611 non-null    object \n 3   Dependents         599 non-null    object \n 4   Education          614 non-null    object \n 5   Self_Employed      582 non-null    object \n 6   ApplicantIncome    614 non-null    int64  \n 7   CoapplicantIncome  614 non-null    float64\n 8   LoanAmount         592 non-null    float64\n 9   Loan_Amount_Term   600 non-null    float64\n 10  Credit_History     564 non-null    float64\n 11  Property_Area      614 non-null    object \n 12  Loan_Status        614 non-null    object \ndtypes: float64(4), int64(1), object(8)\nmemory usage: 62.5+ KB\n"
      }
     ],
     "persistentId": "b82ab890-3391-4629-b3fc-a726a5f4a55d",
     "text": "#now let's look closer at the dataset we got\ndata.info()"
    },
    "executionTime": "2020-09-17T12:45:42.608Z"
   },
   {
    "cell": {
     "executionCount": 4,
     "executionEventId": "41f377e6-b7ac-4f3d-851c-9f34d617926d",
     "hasError": false,
     "id": "adad8d48-1395-4d51-9898-3d4fcc72c50f",
     "outputs": [
      {
       "data": {
        "text/plain": "(614, 13)"
       },
       "execution_count": 4,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "5ce40e44-be5e-43bf-86ff-2b49d7f88ac7",
     "text": "data.shape"
    },
    "executionTime": "2020-09-17T12:45:42.619Z"
   },
   {
    "cell": {
     "executionCount": 5,
     "executionEventId": "68758439-f5fa-40ed-9b54-3a3e7eeec732",
     "hasError": false,
     "id": "2749dc1e-81cd-4496-9a66-c468ec133432",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614.000000</td>\n      <td>614.000000</td>\n      <td>592.000000</td>\n      <td>600.00000</td>\n      <td>564.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5403.459283</td>\n      <td>1621.245798</td>\n      <td>146.412162</td>\n      <td>342.00000</td>\n      <td>0.842199</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6109.041673</td>\n      <td>2926.248369</td>\n      <td>85.587325</td>\n      <td>65.12041</td>\n      <td>0.364878</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>150.000000</td>\n      <td>0.000000</td>\n      <td>9.000000</td>\n      <td>12.00000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2877.500000</td>\n      <td>0.000000</td>\n      <td>100.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3812.500000</td>\n      <td>1188.500000</td>\n      <td>128.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5795.000000</td>\n      <td>2297.250000</td>\n      <td>168.000000</td>\n      <td>360.00000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>81000.000000</td>\n      <td>41667.000000</td>\n      <td>700.000000</td>\n      <td>480.00000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\ncount       614.000000         614.000000  592.000000         600.00000   \nmean       5403.459283        1621.245798  146.412162         342.00000   \nstd        6109.041673        2926.248369   85.587325          65.12041   \nmin         150.000000           0.000000    9.000000          12.00000   \n25%        2877.500000           0.000000  100.000000         360.00000   \n50%        3812.500000        1188.500000  128.000000         360.00000   \n75%        5795.000000        2297.250000  168.000000         360.00000   \nmax       81000.000000       41667.000000  700.000000         480.00000   \n\n       Credit_History  \ncount      564.000000  \nmean         0.842199  \nstd          0.364878  \nmin          0.000000  \n25%          1.000000  \n50%          1.000000  \n75%          1.000000  \nmax          1.000000  "
       },
       "execution_count": 5,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "041b303f-3a03-4e2f-9c0f-531c960294e7",
     "text": "data.describe()"
    },
    "executionTime": "2020-09-17T12:45:42.628Z"
   },
   {
    "cell": {
     "executionCount": 6,
     "executionEventId": "3124bb7e-e33c-4fc1-98d9-5a2a288d93df",
     "hasError": false,
     "id": "1a30b679-ef73-4211-8f39-5cb3b8098015",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>614</td>\n      <td>601</td>\n      <td>611</td>\n      <td>599</td>\n      <td>614</td>\n      <td>582</td>\n      <td>614</td>\n      <td>614</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>614</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>LP002840</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1</td>\n      <td>489</td>\n      <td>398</td>\n      <td>345</td>\n      <td>480</td>\n      <td>500</td>\n      <td>233</td>\n      <td>422</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "         Loan_ID Gender Married Dependents Education Self_Employed  \\\ncount        614    601     611        599       614           582   \nunique       614      2       2          4         2             2   \ntop     LP002840   Male     Yes          0  Graduate            No   \nfreq           1    489     398        345       480           500   \n\n       Property_Area Loan_Status  \ncount            614         614  \nunique             3           2  \ntop        Semiurban           Y  \nfreq             233         422  "
       },
       "execution_count": 6,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "baf1bab0-09ea-493f-9112-cb067913ded9",
     "text": "data.describe(include='O')"
    },
    "executionTime": "2020-09-17T12:45:42.701Z"
   },
   {
    "cell": {
     "executionCount": 7,
     "executionEventId": "d8daa074-c730-4fd9-b257-856a25651866",
     "hasError": false,
     "id": "d103881a-577a-423b-a2df-042c7f444ade",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Gender: ['Male' 'Female' nan]\nMarried: ['No' 'Yes' nan]\nDependents: ['0' '1' '2' '3+' nan]\nEducation: ['Graduate' 'Not Graduate']\nSelf_Employed: ['No' 'Yes' nan]\nProperty_Area: ['Urban' 'Rural' 'Semiurban']\n"
      }
     ],
     "persistentId": "492dfd63-dbbf-4331-b138-144b49b5aab2",
     "text": "#Let's see what the options are in the text columns (the objects)\nprint('Gender: ' + str(data['Gender'].unique()))\nprint('Married: ' + str(data['Married'].unique()))\nprint('Dependents: '+ str(data['Dependents'].unique()))\nprint('Education: '+ str(data['Education'].unique()))\nprint('Self_Employed: '+ str(data['Self_Employed'].unique()))\nprint('Property_Area: '+ str(data['Property_Area'].unique()))"
    },
    "executionTime": "2020-09-17T12:45:42.712Z"
   },
   {
    "cell": {
     "executionCount": 8,
     "executionEventId": "86661023-728e-4698-90b7-decf13882cbb",
     "hasError": false,
     "id": "ab454ea7-79c7-4b76-ab0a-a27b1548b39f",
     "outputs": [
      {
       "data": {
        "image/png": "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ZtaIRYsWceSRR+7Uft9997FgwQJeeukl3nvvPY466ii+8IUvNPp8gwcPZv78+fz617/mhhtu4De/+Q2XXnopffr04Qc/+EGr1OyRu5lZMz399NNMnDiRrl27MmTIEE444QTmzp3b6HZnnnkmAEceeSQrVqxok9oc7mZmjTjkkEOYN2/eTu27ugZ1t27d2LZt2/bl+vuo9+zZE4CuXbuydevWVqx0B4e7mVkjxo0bx5YtW5g6der2trlz5zJgwABmzJhBbW0tNTU1PPnkkxx99NHsu+++LFmyhC1btvD+++8zZ86cRl+jb9++bNq0qdVq9py7mXU47b2nlSTuv/9+rrzySq677jqKioq27wq5efNmDj/8cCTxy1/+kr322guAc889l9GjRzNixAjGjBnT6GuceuqpnH322TzwwAPceuutHH/88S2reVe/VuR4c12BKuCdiDhF0nBgOjAQmA9cEBGfSOoJ/B44ElgHnBcRKxp67srKyugIF+voaLtC9uzWhYevOJ79S/ow7ZkV3DT7NW4+r4JDh/WnT89uLF39Af86axGL3vmA8kF78G9njmbUXn3p3q0LL769gZ/cv4i313/UZvV5V0jL19KlSznooIMKXUZB5foMJM2LiMpc/ZsyLXMFsDRr+XpgckSMADYAlyTtlwAbIuIAYHLSzwrg/5w4gqH9i7Yv9y3qxl79i7j9iTe4/Yk3qCgr5rbzM3sA7NW/iC6CyX97jburVnL8iBKuP2t0oUo3sxbKa1pGUilwMnAt8P+UOdHBOOAbSZdpwE+B24DTkscA9wC/kqTI91cEaxWj9urLJccN56bZr/HjkzI/7Ve//zEn3fIUdf8SXz5oCIeV9qeoexfmvbWB86Y8t3370yuGMWJIn0KUbmatIN+R+83APwN1f/4dBGyMiLo/81YDw5LHw4CVAMn695P+1k4kuO6s0fz+2bdYWL1xe3vtttge7MOKe7H/nr1ZWL2Rjz/dxqe1O372HjasPwN69+CF5evbu3SzXerM48PmvPdGw13SKcDaiMjeDyjXKcoij3XZzztJUpWkqpqamryKtfycc2QZpQN6cd/8aob0y0zL9C3qxsDePQAo6dOT3118FJ9s3cb3Z770mW33G9ybqRdWsnL9R1wza3G7126WS1FREevWreuUAV93PveioqLGO2fJZ1rmWODrkk4CioB+ZEbyxZK6JaPzUmBV0r8aKAOqJXUD+gM7DQEjYgowBTJ/UG1S1dagvYuLGNynJ/9z5Y4j5c48opRPardx0yOvcde3xzKoTw8uuOMFXl+7eXufA/bsw13fPoYtW7cxcepz1GzaUojyzXZSWlpKdXU1nXUgWHclpqZoNNwj4mrgagBJXwR+EBHnS7obOJvMHjMXAQ8km8xKlp9N1j/q+fb29dDC1bz6bmZ/2ZFD+vJ/vzKSx19dy/3z32HGdz7H8MG9uf2JNygftAflg/bgb0vXUrxHd6ZPGktxr+7c+MhrjCkrZkxZMQ8uXF3gd2MG3bt3b9JViKxl+7n/CJgu6RfAi8AdSfsdwB8kLSMzYp/QshKtqZat3cyyZES+4aNPAHhr3Ue8s/EfDB/cG4BLT9h/e//jrn+U0gG9GNwnc9Tcj8aP2r7uwYUda/dPM8vIez/3tuT93Dsn7+du1jKttZ+7mZl1EA53M7MUcribmaWQw93MLIUc7mZmKeRwNzNLIYe7mVkKOdzNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFHO5mZinkcDczSyGHu5lZCjnczcxSKJ8LZBdJekHSS5IWS/pZ0n6npOWSFiS3iqRdkm6RtEzSQklHtPWbMDOzz8rnMntbgHERsVlSd+BpSf+drPthRNxTr/94YERyOwa4Lbk3M7N20ujIPTI2J4vdk1tD1+Y7Dfh9st1zQLGkoS0v1czM8pXXnLukrpIWAGuB2RHxfLLq2mTqZbKknknbMGBl1ubVSVv955wkqUpSVU1NTQvegpmZ1ZdXuEdEbURUAKXA0ZIOBa4GRgFHAQOBHyXdlespcjznlIiojIjKkpKSZhVvZma5NWlvmYjYCDwOfC0iVidTL1uA3wFHJ92qgbKszUqBVa1Qq5mZ5SmfvWVKJBUnj3sBXwZeqZtHlyTgdGBRssks4MJkr5mxwPsRsbpNqjczs5zy2VtmKDBNUlcyPwxmRsRDkh6VVEJmGmYBcGnS/2HgJGAZ8BFwceuXbWZmDWk03CNiITAmR/u4XfQP4LKWl2ZmZs3lI1TNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFHO5mZinkcDczSyGHu5lZCjnczcxSyOFuZpZCDnczsxRyuJuZpZDD3cwshRzuZmYp5HA3M0uhfK7EVCTpBUkvSVos6WdJ+3BJz0t6XdIMST2S9p7J8rJkfXnbvgUzM6svn5H7FmBcRBwOVABfSy6fdz0wOSJGABuAS5L+lwAbIuIAYHLSz8zM2lGj4Z5cBHtzstg9uQUwDrgnaZ9G5jqqAKclyyTrT0yus2pmZu0krzl3SV0lLQDWArOBN4CNEbE16VINDEseDwNWAiTr3wcGtWbRZmbWsLzCPSJqI6ICKAWOBg7K1S25zzVKj/oNkiZJqpJUVVNTk2+9ZmaWhybtLRMRG4HHgbFAsaS6C2yXAquSx9VAGUCyvj+wPsdzTYmIyoioLCkpaV71ZmaWUz57y5RIKk4e9wK+DCwFHgPOTrpdBDyQPJ6VLJOsfzQidhq5m5lZ2+nWeBeGAtMkdSXzw2BmRDwkaQkwXdIvgBeBO5L+dwB/kLSMzIh9QhvUbWZmDWg03CNiITAmR/ubZObf67d/DJzTKtWZmVmz+AhVM7MUcribmaWQw93MLIUc7mZmKeRwNzNLIYe7mVkKOdzNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFHO5mZinkcDczSyGHu5lZCjnczcxSyOFuZpZC+Vxmr0zSY5KWSlos6Yqk/aeS3pG0ILmdlLXN1ZKWSXpV0j+15RswM7Od5XOZva3A9yNivqS+wDxJs5N1kyPihuzOkg4mc2m9Q4C9gb9JGhkRta1ZuJmZ7VqjI/eIWB0R85PHm8hcHHtYA5ucBkyPiC0RsRxYRo7L8ZmZWdtp0py7pHIy11N9Pmm6XNJCSb+VNCBpGwaszNqsmhw/DCRNklQlqaqmpqbJhZuZ2a7lHe6S+gD3AldGxAfAbcD+QAWwGrixrmuOzWOnhogpEVEZEZUlJSVNLtzMzHYtr3CX1J1MsP8pIu4DiIg1EVEbEduAqeyYeqkGyrI2LwVWtV7JZmbWmHz2lhFwB7A0Im7Kah+a1e0MYFHyeBYwQVJPScOBEcALrVeymZk1Jp+9ZY4FLgBelrQgafsxMFFSBZkplxXAdwAiYrGkmcASMnvaXOY9ZczM2lej4R4RT5N7Hv3hBra5Fri2BXWZmVkL+AhVM7MUcribmaWQw93MLIUc7mZmKeRwNzNLIYe7mVkKOdzNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFHO5mZinkcDczSyGHu5lZCjnczcxSKJ8rMZVJekzSUkmLJV2RtA+UNFvS68n9gKRdkm6RtCy5ePYRbf0mzMzss/IZuW8Fvh8RBwFjgcskHQxcBcyJiBHAnGQZYDyZS+uNACaRuZC2mZm1o0bDPSJWR8T85PEmYCkwDDgNmJZ0mwacnjw+Dfh9ZDwHFNe73qqZmbWxJs25SyoHxgDPA0MiYjVkfgAAeybdhgErszarTtrMzKyd5B3ukvoA9wJXRsQHDXXN0RY5nm+SpCpJVTU1NfmWYWZmecgr3CV1JxPsf4qI+5LmNXXTLcn92qS9GijL2rwUWFX/OSNiSkRURkRlSUlJc+s3M7Mc8tlbRsAdwNKIuClr1SzgouTxRcADWe0XJnvNjAXer5u+MTOz9tEtjz7HAhcAL0takLT9GLgOmCnpEuBt4Jxk3cPAScAy4CPg4lat2MzMGtVouEfE0+SeRwc4MUf/AC5rYV1m1gTlV/2l0CWkyorrTi50CS3mI1TNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFHO5mZimUz37uZmat5ppTD+aU0XtT0rcnc5au4ZJpVQCMG7UnV40fxT4D92DJqg/453sXsmztZsoH7cG/nTmaUXv1pXu3Lrz49gZ+cv8i3l7/UYHfye7NI3cza3cPLfzsGUn26lfEf3wjc+mHnz+4hOGDe3PrxDGZdf2L6CKY/LfXuLtqJcePKOH6s0a3e80djUfuZtaufvbgEkoH9OLiY4dvb6vYp5hePbrywIJV/PmFtxm730C+XjGMQ/bux7y3NnDelOe29z29YhgjhvQpROkdikfuZlZw6zZvAaCirJiygb04aGg/AMoG7sGntTtOKnvYsP4M6N2DF5avL0idHYlH7mZWcHNXbOChhas4ZfTefOXgIWz6+FMAtny6bXuf/Qb3ZuqFlaxc/xHXzFpcqFI7DIe7me0WLv/zi0ye/TpF3btwwef2ZcJR+7CsZhMAB+zZh7u+fQxbtm5j4tTnqNm0pcDV7v4c7mbWrr504J4cuFdmznzv4l6cd1QZz7+5jnMry1j+3oeUD+7NWUeU8t+LVrNy/T8Y2r+I6ZPGUtyrOzc+8hpjyooZU1bMgwt9JvGGONzNrF1954T9GLvfIAAOGtqP688azQ/ufolRQ/vxrWPLqd0WPLRwNdfMWgTAvoP2YHCfngD8aPyo7c/z4EKfCbMhDncza1cTsvZ8yXbPvOqc7c+9ud6nNG4G7y1jZpZC+Vxm77eS1kpalNX2U0nvSFqQ3E7KWne1pGWSXpX0T21VuJmZ7Vo+I/c7ga/laJ8cERXJ7WEASQcDE4BDkm1+LalraxVrZmb5aTTcI+JJIN8jBk4DpkfElohYTuY6qke3oD4zM2uGlsy5Xy5pYTJtMyBpGwaszOpTnbTtRNIkSVWSqmpqalpQhpmZ1dfccL8N2B+oAFYDNybtuS6kHTnaiIgpEVEZEZUlJSXNLMPMzHJpVrhHxJqIqI2IbcBUdky9VANlWV1LgVX1tzczs7bVrHCXNDRr8Qygbk+aWcAEST0lDQdGAC+0rEQzM2uqRg9iknQX8EVgsKRq4Brgi5IqyEy5rAC+AxARiyXNBJYAW4HLIqK2bUo3M7NdaTTcI2JijuY7Guh/LXBtS4oyM7OW8RGqZmYp5HA3M0shh7uZWQo53M3MUsjhbmaWQg53M7MUcribmaWQw93MLIUc7mZmKeRwNzNLIYe7mVkKOdzNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFGg13Sb+VtFbSoqy2gZJmS3o9uR+QtEvSLZKWSVoo6Yi2LN7MzHLLZ+R+J/C1em1XAXMiYgQwJ1kGGE/muqkjgEnAba1TppmZNUWj4R4RTwLr6zWfBkxLHk8DTs9q/31kPAcU17uYtpmZtYPmzrkPiYjVAMn9nkn7MGBlVr/qpG0nkiZJqpJUVVNT08wyzMwsl9b+g6pytEWujhExJSIqI6KypKSklcswM+vcmhvua+qmW5L7tUl7NVCW1a8UWNX88szMrDmaG+6zgIuSxxcBD2S1X5jsNTMWeL9u+sbMzNpPt8Y6SLoL+CIwWFI1cA1wHTBT0iXA28A5SfeHgZOAZcBHwMVtULOZmTWi0XCPiIm7WHVijr4BXNbSoszMrGV8hKqZWQo53M3MUsjhbmaWQg53M7MUcribmaWQw93MLIUc7mZmKeRwNzNLIYe7mVkKOdzNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFHO5mZinU6PncGyJpBbAJqAW2RkSlpIHADKAcWAGcGxEbWlammZk1RWuM3L8UERURUZksXwXMiYgRwJxk2czM2lFbTMucBkxLHk8DTm+D1zAzswa0NNwDeETSPEmTkrYhdRfFTu73zLWhpEmSqiRV1dTUtLAMMzPL1qI5d+DYiFglaU9gtqRX8t0wIqYAUwAqKyujhXWYmVmWFo3cI2JVcr8WuB84GlgjaShAcr+2pUWamVnTNDvcJfWW1LfuMfBVYBEwC7go6XYR8EBLizQzs6ZpybTMEOB+SXXP8+eI+B9Jc4GZki4B3gbOaXmZZmbWFM0O94h4Ezg8R/s64MSWFGVmZi3jI1TNzFLI4W5mlkIOdzOzFHK4m5mlkMPdzCyFHO5mZinkcDczSyGHu5lZCjnczcxSyOFuZpZCDnczsxRyuJuZpZDD3cwshRzuZmYp5HA3M0shh7uZWQq1WbhL+pqkVyUtk3RVW72OmZntrE3CXVJX4D+A8cDBwERJB7fFa5mZ2c7aauR+NLAsIt6MiE+A6cBpbfRaZmZWT0sukN2QYcDKrOVq4JjsDpImAZOSxc2SXm2jWjqjwcB7hS6iMbq+0BVYAfi72br23dWKtgp35WiLzyxETAGmtNHrd2qSqiKistB1mNXn72b7aatpmWqgLGu5FFjVRq9lZmb1tFW4zwVGSBouqQcwAZjVRq9lZmb1tMm0TERslXQ58FegK/DbiFjcFq9lOXm6y3ZX/m62E0VE473MzKxD8RGqZmYp5HA3M0shh7uZWQo53M3MUsjhbmaWQm11hKq1A0mbqHfkb7aI6NeO5Zh9hr+fheVw78Aioi+ApJ8D7wJ/IHPqh/OBvgUszczfzwLzfu4pIOn5iKh/Yrad2swKwd/PwvCcezrUSjpfUldJXSSdD9QWuiizhL+fBeBwT4dvAOcCa5LbOUmb2e7A388C8LSMmVkKeeSeApJGSpojaVGyPFrSvxS6LjPw97NQHO7pMBW4GvgUICIWkjnNstnuwN/PAnC4p8MeEfFCvbatBanEbGf+fhaAwz0d3pO0P8kBI5LOBlYXtiSz7fz9LAD/QTUFJO1H5iIInwc2AMuB8yPirYIWZoa/n4XicE8BSV0jolZSb6BLRGwqdE1mdSQNj4jl2d/PurZC15ZmnpZJh+WSpgBjgc2FLsasnnsBIuLDrIHHPQWsp1PwuWXS4UDgVOAy4A5JDwHTI+LpwpZlnZmkUcAhQH9JZ2at6gcUFaaqzsPhngIR8Q9gJjBT0gDg34EnyFyc3KxQDgROAYrJDD7qbAK+XZCKOhHPuaeEpBOA84DxwFxgRkTcW9iqzEDS5yLi2ULX0dl4zj0FJC0HrgSeAg6NiHMd7LYbuVRScd2CpAGSflvIgjoDT8ukw+ER8UGhizDbhdERsbFuISI2SBpTyII6A4/c06GfpPslrZW0RtK9kkoLXZRZokvytyAAJA3EA8s25w84HX4H/JnMqVQBvpm0faVgFZntcCPwjKR7yBylei5wbWFLSj//QTUFJC2IiIrG2swKRdLBwDgyl9mbExFLClxS6nlaJh3ek/TN5Eo3XSV9E1hX6KLMsgwEPoyIW4EaScMLXVDaeeSeApL2AX4FfI7Mr73PAFf43B22O5B0DVAJHBgRIyXtDdwdEccWuLRU85x7ByepK3BWRHy90LWY7cIZwBhgPkBErJLUt7AlpZ+nZTq4iKgFTit0HWYN+CQyUwR1p/ztXeB6OgWP3NPh75J+BcwAPqxrjIj5hSvJbLuZkv4TKJb0beB/kbk6k7Uhz7mngKTHcjRHRIxr92LMcpD0FeCrZPaW+WtEzC5wSanncDczSyHPuaeApEGSbpE0X9I8Sf8uaVCh67LOTdLTyf0mSR/kuC2X9L1C15lWHrmngKTZwJPAH5Om84EvRsSXC1eVWcOSAcgzEXFgoWtJI4d7CkiaFxFH1muriojKQtVklk3SccCIiPidpMFA3+TSe0MjwhfLbgOelkmHxyRNkNQluZ0L/KXQRZnB9oOYfgRcnTT1IPkt08HedjxyTwFJm4DewLakqQs7domMiOhXkMLMyJzniOQgpogYk7QtjIjRha0s3byfewpEhI/2s93ZJxERknwQUztyuKdEcgHi48gcBfhURPxXgUsyq5PrIKbfFLim1PO0TApI+jVwAHBX0nQe8EZEXFa4qsx28EFM7c/hngKSFpO5dmrdr71dgJcj4pDCVma2s+RkdxMi4k+FriXNvLdMOrwK7JO1XAYsLFAtZgBI6ifpakm/kvRVZVwOvEnmakzWhjxyTwFJTwBHAS8kTUcBzwIfAfh0wFYIkh4ANpD5Lp4IDCCzG+QVEbGgkLV1Bg73FJB0QvYimT+sTgS+BxARTxSiLuvcJL0cEYclj7sC7wH7RMSmwlbWOXhvmRSIiCckVQDfIPPr7nLgdoe6FdindQ8iolbScgd7+3G4d2CSRgITyIzS15E5n7si4ksFLcws43BJHySPBfRKloUPrmtznpbpwCRtA54CLomIZUnbmxGxX2ErM7NC894yHdtZwLtkzi0zVdKJZEZFZtbJeeSeAsnh3KeTmZ4ZB0wD7o+IRwpamJkVjMM9ZSQNBM4BzvNl9sw6L4e7mVkKec7dzCyFHO5mZinkcDczSyGHu5lZCv1/LsSnVlPuguMAAAAASUVORK5CYII=\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d9677475-c497-4010-9af5-02393de9ce44",
     "text": "#first let's count the number of loans approved and rejected\nApproved = data[data['Loan_Status'] == 'Y']['Loan_Status'].count()\nRejected = data[data['Loan_Status'] == 'N']['Loan_Status'].count()\n\n#now let's put these results in a dataframe to visualize them\ndf = {\"Count\" : [Approved, Rejected]} #this is for the legend to be clear that it is counts\nStatus = pd.DataFrame(df, index=[\"Approved\", \"Rejected\"])\n\n#let's visualize the bar plot\nax = Status.plot(kind = 'bar', title = 'Status of the loans')\n\n#here I want to add the labels to the bars and to make this more clear I've made them white of color\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 30), color = 'white', fontweight = 'bold')"
    },
    "executionTime": "2020-09-17T12:45:42.820Z"
   },
   {
    "cell": {
     "executionCount": 9,
     "executionEventId": "eb06550c-dd1d-4763-8a40-70f22bc1ca1d",
     "hasError": false,
     "id": "73460dc8-89a9-427b-82d9-f03f3b436f12",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of approved loans : 0.69\nThe percentage of rejected loans : 0.31\n"
      }
     ],
     "persistentId": "cfca36b8-b3c0-41f3-9172-97cf85896b3e",
     "text": "#let's see the percentages of the status:\nprint('The percentage of approved loans : %.2f' % (data['Loan_Status'].value_counts()[0] / len(data)))\nprint('The percentage of rejected loans : %.2f' % (data['Loan_Status'].value_counts()[1] / len(data)))"
    },
    "executionTime": "2020-09-17T12:45:42.931Z"
   },
   {
    "cell": {
     "executionCount": 10,
     "executionEventId": "0356e762-e306-475d-85ac-d616f3a7db5c",
     "hasError": false,
     "id": "3352769d-e056-4f7b-8410-7987cb808c17",
     "outputs": [
      {
       "data": {
        "text/plain": "Credit_History       50\nSelf_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 10,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "e850bf25-ee93-4224-8b5e-dd738a273e25",
     "text": "#let's look in what columns there are missing values \ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:45:42.945Z"
   },
   {
    "cell": {
     "executionCount": 11,
     "executionEventId": "ebcaa066-2f9f-4d52-a94a-bbe2227fe8cd",
     "hasError": false,
     "id": "0b6c4f4c-aaf4-46f6-8d53-36c6c9e51025",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x12f65932710>"
       },
       "execution_count": 11,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "a8dd40ec-b910-47cb-8a19-b08b40cab623",
     "text": "#Let's look at the credit history in more detail to see what the best way is to handle these missing values\n#I will use seaborn for the visualization\nsns.countplot(data['Loan_Status'],hue=data['Credit_History'])"
    },
    "executionTime": "2020-09-17T12:45:43.088Z"
   },
   {
    "cell": {
     "executionCount": 12,
     "executionEventId": "b89ac73e-5979-439c-9471-47b81e9f9714",
     "hasError": false,
     "id": "66948929-4f27-489b-81f4-ce8e7d77fc40",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loan_Status      N    Y\nCredit_History         \n0.0             82    7\n1.0             97  378\n"
      }
     ],
     "persistentId": "f3bb785b-22f1-4187-8c85-4c3d6be1be41",
     "text": "print(pd.crosstab(data['Credit_History'],data['Loan_Status']))"
    },
    "executionTime": "2020-09-17T12:45:43.103Z"
   },
   {
    "cell": {
     "executionCount": 13,
     "executionEventId": "33fd2b19-9a23-4781-8d9d-407941f48268",
     "hasError": false,
     "id": "ba2831a7-0f5e-44e3-8971-9f96b6f5fadd",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The percentage of credit history yes : 0.77\nThe percentage of credit history no : 0.14\n"
      }
     ],
     "persistentId": "7e18edbb-caca-4dd1-a941-50e65261da22",
     "text": "print('The percentage of credit history yes : %.2f' % (data['Credit_History'].value_counts()[1] / len(data)))\nprint('The percentage of credit history no : %.2f' % (data['Credit_History'].value_counts()[0] / len(data)))"
    },
    "executionTime": "2020-09-17T12:45:43.111Z"
   },
   {
    "cell": {
     "executionCount": 14,
     "executionEventId": "ae01b41b-251b-4d74-9fe7-2a543f068143",
     "hasError": false,
     "id": "c1db36fc-f75b-40f9-897b-6bbf4a5d0537",
     "outputs": [
      {
       "data": {
        "text/plain": "Self_Employed        32\nLoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 14,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "53b3a107-2cc2-42f3-ac09-f52d5920f1ea",
     "text": "data['Credit_History'] = data['Credit_History'].fillna(1)\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:45:43.155Z"
   },
   {
    "cell": {
     "executionCount": 15,
     "executionEventId": "505bdc2c-17cc-4427-a53d-da4d23c8d669",
     "hasError": false,
     "id": "b2ed3f5c-8346-4d2d-9299-991017e73ac4",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x12f659ec710>"
       },
       "execution_count": 15,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "d3cae382-031c-4d50-93e9-d0c661a60550",
     "text": "#Continue with Self_Employed\nsns.countplot(data['Loan_Status'],hue=data['Self_Employed'])"
    },
    "executionTime": "2020-09-17T12:45:43.271Z"
   },
   {
    "cell": {
     "executionCount": 16,
     "executionEventId": "154186ba-6087-43ea-94d7-1ca18e43fbe0",
     "hasError": false,
     "id": "217b29ca-f81d-4696-8cf6-0ec7bce7f4f9",
     "outputs": [
      {
       "data": {
        "text/plain": "LoanAmount           22\nDependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 16,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "c0f9ba7f-6398-483f-ab00-c1caefba397a",
     "text": "data['Self_Employed'] = data['Self_Employed'].fillna('No')\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:45:43.340Z"
   },
   {
    "cell": {
     "executionCount": 17,
     "executionEventId": "f7480477-d33b-47b1-81a7-16e5272366f5",
     "hasError": false,
     "id": "e608ec8e-6f30-4da7-abb2-6c3031ab18e9",
     "outputs": [
      {
       "data": {
        "text/plain": "<matplotlib.collections.PathCollection at 0x12f65a93828>"
       },
       "execution_count": 17,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "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\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "91787fc9-7a25-4b79-a00e-17aca9aebc4a",
     "text": "#Continue with LoanAmount, as this is a numeric, thus continous number, I will use a scatterplot to see if there is a pattern / correlation. \nplt.scatter(data['Loan_Status'], data['LoanAmount'])"
    },
    "executionTime": "2020-09-17T12:45:43.463Z"
   },
   {
    "cell": {
     "executionCount": 18,
     "executionEventId": "8a7d1a32-679d-4913-8542-c455691ef777",
     "hasError": false,
     "id": "e2f23e8d-33f5-428e-88b8-5d5493cbff66",
     "outputs": [
      {
       "data": {
        "text/plain": "Dependents           15\nLoan_Amount_Term     14\nGender               13\nMarried               3\nLoan_Status           0\nProperty_Area         0\nCredit_History        0\nLoanAmount            0\nCoapplicantIncome     0\nApplicantIncome       0\nSelf_Employed         0\nEducation             0\nLoan_ID               0\ndtype: int64"
       },
       "execution_count": 18,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "94d0051f-cbc9-40a4-8f07-2c14b5006fb0",
     "text": "#As the patterns look similar for yes and no, I will fill the missing values with the mean of the column\ndata['LoanAmount'] = data['LoanAmount'].fillna( data['LoanAmount'].mean())\ndata.isnull().sum().sort_values(ascending = False)"
    },
    "executionTime": "2020-09-17T12:45:43.480Z"
   },
   {
    "cell": {
     "executionCount": 19,
     "executionEventId": "5d28939e-35bb-48f9-8d15-624b6de7fe0b",
     "hasError": false,
     "id": "ccb87654-99e1-46ec-acd8-b2a02a626072",
     "outputs": [
      {
       "data": {
        "text/plain": "(573, 13)"
       },
       "execution_count": 19,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "6af4d3aa-eeb5-42a8-b9ac-b7976e394a79",
     "text": "#Let's drop the rest of the missing values:\ndata.dropna(inplace = True)\ndata.shape"
    },
    "executionTime": "2020-09-17T12:45:43.496Z"
   },
   {
    "cell": {
     "executionCount": 20,
     "executionEventId": "71c9ff7c-ff00-4c58-9d68-1fd6a43ee1b1",
     "hasError": false,
     "id": "a0a50455-bddc-4909-a749-451641fe509e",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x12f65b04470>,\n  <matplotlib.lines.Line2D at 0x12f65b04828>],\n 'caps': [<matplotlib.lines.Line2D at 0x12f65b04b70>,\n  <matplotlib.lines.Line2D at 0x12f65b04eb8>],\n 'boxes': [<matplotlib.lines.Line2D at 0x12f65b04048>],\n 'medians': [<matplotlib.lines.Line2D at 0x12f65b04f98>],\n 'fliers': [<matplotlib.lines.Line2D at 0x12f65b0c588>],\n 'means': []}"
       },
       "execution_count": 20,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "b1d54d7f-a7ab-4c2a-b3e6-3afd5a93403e",
     "text": "#First I will make a boxplot for the ApplicantIncome.\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T12:45:43.606Z"
   },
   {
    "cell": {
     "executionCount": 21,
     "executionEventId": "0080c490-fba9-447f-85aa-8c2cd2782556",
     "hasError": false,
     "id": "67a1abc6-4297-4525-94d5-33705834ec46",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>333</th>\n      <td>LP002101</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>63337</td>\n      <td>0.0</td>\n      <td>490.0</td>\n      <td>180.0</td>\n      <td>1.0</td>\n      <td>Urban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>409</th>\n      <td>LP002317</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>81000</td>\n      <td>0.0</td>\n      <td>360.0</td>\n      <td>360.0</td>\n      <td>0.0</td>\n      <td>Rural</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n333  LP002101   Male     Yes          0  Graduate            No   \n409  LP002317   Male     Yes         3+  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n333            63337                0.0       490.0             180.0   \n409            81000                0.0       360.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n333             1.0         Urban           Y  \n409             0.0         Rural           N  "
       },
       "execution_count": 21,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "dc489f68-a1fe-40b3-a7b6-ec08e9ba2fd4",
     "text": "#We see that there are two great outliers here. \n#let's look closer to these two outliers\noutliers = data[data['ApplicantIncome'] > 50000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T12:45:43.656Z"
   },
   {
    "cell": {
     "executionCount": 22,
     "executionEventId": "eee8ec4e-3157-4857-b5ed-e1aacd95a1d7",
     "hasError": false,
     "id": "99d7bddd-6a96-4308-93ef-e0c1c62284e7",
     "outputs": [
      {
       "data": {
        "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x12f65b6d898>,\n  <matplotlib.lines.Line2D at 0x12f65b6dc50>],\n 'caps': [<matplotlib.lines.Line2D at 0x12f65b6df98>,\n  <matplotlib.lines.Line2D at 0x12f65b6df28>],\n 'boxes': [<matplotlib.lines.Line2D at 0x12f65b6d4a8>],\n 'medians': [<matplotlib.lines.Line2D at 0x12f65b7a668>],\n 'fliers': [<matplotlib.lines.Line2D at 0x12f65b7a9b0>],\n 'means': []}"
       },
       "execution_count": 22,
       "metadata": {},
       "output_type": "execute_result"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "40f36946-096f-4ca4-92cd-5a3ee8bbfdf1",
     "text": "#As you can see that these are just two rows and the status is not for both approved, I will remove these two rows for the model. \ndata = data[data['ApplicantIncome'] < 50000]\n#let's plot the applicant income again in a boxplot\nplt.boxplot(data['ApplicantIncome'])"
    },
    "executionTime": "2020-09-17T12:45:43.822Z"
   },
   {
    "cell": {
     "executionCount": 23,
     "executionEventId": "a895fb9a-d780-49b7-bde1-f58a5ad87249",
     "hasError": false,
     "id": "7ab3bd02-3dc6-4e81-be30-a5659e415120",
     "outputs": [
      {
       "data": {
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Loan_ID</th>\n      <th>Gender</th>\n      <th>Married</th>\n      <th>Dependents</th>\n      <th>Education</th>\n      <th>Self_Employed</th>\n      <th>ApplicantIncome</th>\n      <th>CoapplicantIncome</th>\n      <th>LoanAmount</th>\n      <th>Loan_Amount_Term</th>\n      <th>Credit_History</th>\n      <th>Property_Area</th>\n      <th>Loan_Status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>155</th>\n      <td>LP001536</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>3+</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>39999</td>\n      <td>0.0</td>\n      <td>600.0</td>\n      <td>180.0</td>\n      <td>0.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>LP001637</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>33846</td>\n      <td>0.0</td>\n      <td>260.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>LP001640</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>0</td>\n      <td>Graduate</td>\n      <td>Yes</td>\n      <td>39147</td>\n      <td>4750.0</td>\n      <td>120.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>443</th>\n      <td>LP002422</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>1</td>\n      <td>Graduate</td>\n      <td>No</td>\n      <td>37719</td>\n      <td>0.0</td>\n      <td>152.0</td>\n      <td>360.0</td>\n      <td>1.0</td>\n      <td>Semiurban</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "text/plain": "      Loan_ID Gender Married Dependents Education Self_Employed  \\\n155  LP001536   Male     Yes         3+  Graduate            No   \n183  LP001637   Male     Yes          1  Graduate            No   \n185  LP001640   Male     Yes          0  Graduate           Yes   \n443  LP002422   Male      No          1  Graduate            No   \n\n     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n155            39999                0.0       600.0             180.0   \n183            33846                0.0       260.0             360.0   \n185            39147             4750.0       120.0             360.0   \n443            37719                0.0       152.0             360.0   \n\n     Credit_History Property_Area Loan_Status  \n155             0.0     Semiurban           Y  \n183             1.0     Semiurban           N  \n185             1.0     Semiurban           Y  \n443             1.0     Semiurban           Y  "
       },
       "execution_count": 23,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "aa5c7432-0afa-4d3b-b934-ecfb87b7701c",
     "text": "#still a lot of outliers above the 25000. Let's look closer to those again to be sure we need to add them to get a good model performance\noutliers = data[data['ApplicantIncome'] > 25000]\noutliers.head()"
    },
    "executionTime": "2020-09-17T12:45:43.875Z"
   },
   {
    "cell": {
     "executionCount": 24,
     "executionEventId": "d4d8d623-5d2c-4de1-bf17-d186e0e8ee0d",
     "hasError": false,
     "id": "8613f9ab-e6c2-4e54-bc4f-da887b91126d",
     "outputs": [],
     "persistentId": "4308fc72-3c28-48fc-b640-7277c9a3bbf4",
     "text": "#First make the target column (Loan_Status) numerical\ndata['Loan_Status'] = np.where((data['Loan_Status'] == 'Y'), 1, 0)"
    },
    "executionTime": "2020-09-17T12:45:43.909Z"
   },
   {
    "cell": {
     "executionCount": 25,
     "executionEventId": "0ba1d823-d127-4270-8912-38bd936dbe9a",
     "hasError": false,
     "id": "d51f1694-59e3-4d9b-9d40-6cdd25201e2e",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    object \n 1   Married            571 non-null    object \n 2   Dependents         571 non-null    object \n 3   Education          571 non-null    object \n 4   Self_Employed      571 non-null    object \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    object \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(1), int64(1), object(6)\nmemory usage: 55.8+ KB\n"
      }
     ],
     "persistentId": "51558ac5-844e-401a-86da-ac97cf610691",
     "text": "#Next we will drop the loan_ID column as this will only confuse the model later on\ndata.drop('Loan_ID', axis=1, inplace=True)\ndata.info()"
    },
    "executionTime": "2020-09-17T12:45:43.963Z"
   },
   {
    "cell": {
     "executionCount": 26,
     "executionEventId": "736c1f62-4546-45c7-9a7c-ff0603738103",
     "hasError": false,
     "id": "3169a762-abcf-4ad1-ace5-2ac27ac494dd",
     "outputs": [],
     "persistentId": "4ca68e72-6a32-439e-8c31-9ce3e8fdb707",
     "text": "#Next, make all other columns numerical as well. \ndata['Married'] = np.where((data['Married'] == 'Yes'), 1, 0)\ndata['Gender'] = np.where((data['Gender'] == 'Female'), 1, 0)\ndata['Education'] = np.where((data['Education'] == 'Graduate'), 1, 0)\ndata['Self_Employed'] = np.where((data['Self_Employed'] == 'Yes'), 1, 0)\ndata['Dependents'] = np.where((data['Dependents'] == '0'), 0, 1) #I saw that there was no big difference between the number of dependents if there are any. So I made no dependents = 0  and yes dependents = 1"
    },
    "executionTime": "2020-09-17T12:45:43.975Z"
   },
   {
    "cell": {
     "executionCount": 27,
     "executionEventId": "4d887348-f6d8-4814-9407-c7e5e535cb8a",
     "hasError": false,
     "id": "4e30ecae-838d-4ce7-8819-c2daa9de1633",
     "outputs": [],
     "persistentId": "1c737125-06cc-44ce-a2ce-ffc6752cbd0b",
     "text": "#Lastly I want to change the Property_Area column, but I want to keep all three options. Therefore this I will do differently. \n\ndef f(row):\n  if row['Property_Area'] == \"Rural\":\n    val = 1\n  elif row['Property_Area'] == \"Urban\":\n    val = 0\n  else:\n    val = 2\n  return val\n\ndata['Property_Area'] = data.apply(f, axis=1)"
    },
    "executionTime": "2020-09-17T12:45:44.073Z"
   },
   {
    "cell": {
     "executionCount": 28,
     "executionEventId": "63fee81e-4e23-4c99-8a7d-d5ee6daef4f5",
     "hasError": false,
     "id": "57672704-cb59-47c9-b319-bae51bd0445f",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 571 entries, 0 to 613\nData columns (total 12 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Gender             571 non-null    int32  \n 1   Married            571 non-null    int32  \n 2   Dependents         571 non-null    int32  \n 3   Education          571 non-null    int32  \n 4   Self_Employed      571 non-null    int32  \n 5   ApplicantIncome    571 non-null    int64  \n 6   CoapplicantIncome  571 non-null    float64\n 7   LoanAmount         571 non-null    float64\n 8   Loan_Amount_Term   571 non-null    float64\n 9   Credit_History     571 non-null    float64\n 10  Property_Area      571 non-null    int64  \n 11  Loan_Status        571 non-null    int32  \ndtypes: float64(4), int32(6), int64(2)\nmemory usage: 44.6 KB\n"
      }
     ],
     "persistentId": "80510f35-569d-4817-909a-1ab4fa63dcac",
     "text": "data.info()"
    },
    "executionTime": "2020-09-17T12:45:44.104Z"
   },
   {
    "cell": {
     "executionCount": 29,
     "executionEventId": "142c67ab-78d6-4641-923d-46a4e076006c",
     "hasError": false,
     "id": "1c4337bc-a1ae-41ab-a9ac-b87e41d97263",
     "outputs": [],
     "persistentId": "eae67e11-d9d4-4223-be40-71db86428916",
     "text": "#First we need to split the dataset in the y-column (the target) and the components (X), the independent columns. \n#This is needed as we need to use the X columns to predict the y in the model. \n\nX = data.iloc[:,0:11]  #independent columns \ny = data.iloc[:,-1]    #target column = Status of the loan\n"
    },
    "executionTime": "2020-09-17T12:45:44.111Z"
   },
   {
    "cell": {
     "executionCount": 30,
     "executionEventId": "47ec3f34-15da-4d18-a7ef-73fa8601f91c",
     "hasError": false,
     "id": "aed8d5de-4ffa-4407-8be4-bd859495149c",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "[0.02306053 0.02135136 0.03142593 0.01841394 0.02312228 0.20843645\n 0.12449148 0.19150676 0.0531804  0.2454554  0.05955546]\n"
      },
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 432x288 with 1 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "13aeb195-8b7a-42bb-b0de-6c29f3c3a88b",
     "text": "from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()"
    },
    "executionTime": "2020-09-17T12:45:44.484Z"
   },
   {
    "cell": {
     "executionCount": 31,
     "executionEventId": "e29ba1a1-832e-44d8-b507-1cbfe6da28a5",
     "hasError": false,
     "id": "73af6746-f157-46b8-8df2-922a5c9048cf",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "   Name of the column         Score\n6   CoapplicantIncome  13836.533023\n5     ApplicantIncome    263.335634\n7          LoanAmount     93.339569\n9      Credit_History     18.763822\n10      Property_Area      4.362055\n1             Married      2.073582\n3           Education      0.595530\n0              Gender      0.324309\n4       Self_Employed      0.289648\n8    Loan_Amount_Term      0.089362\n"
      }
     ],
     "persistentId": "2efa5110-b3b9-4037-82aa-54059f52eded",
     "text": "from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#apply SelectKBest class to extract top 10 best features\nbestfeatures = SelectKBest(score_func=chi2, k='all')\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Name of the column','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features"
    },
    "executionTime": "2020-09-17T12:45:44.509Z"
   },
   {
    "cell": {
     "executionCount": 32,
     "executionEventId": "b10201c7-b63c-4633-9858-004038c18405",
     "hasError": false,
     "id": "2178be7b-42e5-4cb3-b0f5-f8e561f937c1",
     "outputs": [
      {
       "data": {
        "image/png": "\n",
        "text/plain": "<Figure size 720x720 with 2 Axes>"
       },
       "metadata": {
        "needs_background": "light"
       },
       "output_type": "display_data"
      }
     ],
     "persistentId": "c21a791f-678a-4d4b-8bba-08c65762eae3",
     "text": "#get correlations of each features in dataset\ncorrmat = data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(10,10))\n\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")"
    },
    "executionTime": "2020-09-17T12:45:45.342Z"
   },
   {
    "cell": {
     "executionCount": 33,
     "executionEventId": "05f26b97-2439-4e76-9cdc-76aa4cde519c",
     "hasError": false,
     "id": "087cd112-7bc0-470e-917d-ba6d1d6bb8d9",
     "outputs": [],
     "persistentId": "6f110222-537f-4e89-a34d-5b8760d02ff1",
     "text": "#Load the chosen models here\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#add the logistic regression for cross check\nfrom sklearn.linear_model import LogisticRegression"
    },
    "executionTime": "2020-09-17T12:45:45.389Z"
   },
   {
    "cell": {
     "executionCount": 34,
     "executionEventId": "93ed0ebe-4e01-46e8-a20e-b6e04fa99961",
     "hasError": false,
     "id": "c8209ed4-6b5f-4f39-84e3-5ce785fc07ef",
     "outputs": [],
     "persistentId": "f780b1d7-d6b2-4858-9b3a-af9b8bbb6119",
     "text": "from sklearn.model_selection import train_test_split\n\n#First try with the 4 most important features\nX_4 = data[['Credit_History', 'CoapplicantIncome', 'Married', 'Property_Area']] #independent columns chosen \ny = data.iloc[:,-1]    #target column = Status of the loan\n\n#I want to withhold 30 % of the trainset to perform the tests\nX_train, X_test, y_train, y_test= train_test_split(X_4,y, test_size=0.3 , random_state = 25)"
    },
    "executionTime": "2020-09-17T12:45:45.394Z"
   },
   {
    "cell": {
     "executionCount": 35,
     "executionEventId": "c1827d76-16fa-43d8-8870-4b2f09164197",
     "hasError": false,
     "id": "964f22d5-ef78-4251-8588-88eab10f3212",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Shape of X_train is:  (399, 4)\nShape of X_test is:  (172, 4)\nShape of Y_train is:  (399,)\nShape of y_test is:  (172,)\n"
      }
     ],
     "persistentId": "26442a09-7ada-45fe-9bca-560ea2f3a353",
     "text": "print('Shape of X_train is: ', X_train.shape)\nprint('Shape of X_test is: ', X_test.shape)\nprint('Shape of Y_train is: ', y_train.shape)\nprint('Shape of y_test is: ', y_test.shape)"
    },
    "executionTime": "2020-09-17T12:45:45.504Z"
   },
   {
    "cell": {
     "executionCount": 36,
     "executionEventId": "b118da65-4060-414a-a4dc-1bb59a811b74",
     "hasError": false,
     "id": "a7166c18-9aaa-4e97-80bd-7848f1566bae",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "The % approved status versus not approved in original_data : [0.69527145 0.30472855]\n\nThe % approved status versus not approved in y_train : [0.69423559 0.30576441]\n\nThe % approved status versus not approved in in y_test : [0.69767442 0.30232558]\n"
      }
     ],
     "persistentId": "74edb0b5-8d59-4832-9ece-61ab1e546861",
     "text": "#Let's confirm that we use the same number of status approved versus disapproved in the test and train data.\n#As approved is 1, this can be counted easily. \nprint('The % approved status versus not approved in original_data :',data['Loan_Status'].value_counts().values/ len(data))\nprint('\\nThe % approved status versus not approved in y_train :',y_train.value_counts().values/ len(y_train))\nprint('\\nThe % approved status versus not approved in in y_test :',y_test.value_counts().values/ len(y_test))"
    },
    "executionTime": "2020-09-17T12:45:45.521Z"
   },
   {
    "cell": {
     "executionCount": 37,
     "executionEventId": "9d82b7cb-ec86-4855-b719-45786b3a931e",
     "hasError": false,
     "id": "75026372-b109-47da-83dd-10cce4afa5bf",
     "outputs": [],
     "persistentId": "34278027-2c80-4bbf-9040-e585e5f1339f",
     "text": "#To check the models, I want to build a check matrix within two functions:\ndef score_model(probs, threshold):\n    return np.array([1 if x > threshold else 0 for x in probs[:,1]])\n\ndef print_metrics(labels, probs, threshold):\n    scores = score_model(probs, threshold)\n    metrics = sklm.precision_recall_fscore_support(labels, scores)\n    conf = sklm.confusion_matrix(labels, scores)\n    print('                 Confusion matrix')\n    print('                 Score positive    Score negative')\n    print('Actual positive    %6d' % conf[0,0] + '             %5d' % conf[0,1])\n    print('Actual negative    %6d' % conf[1,0] + '             %5d' % conf[1,1])\n    print('')\n    print('DETAILS ACCURACY, PRECISION AND RECALL')\n    print('Accuracy        %0.2f' % sklm.accuracy_score(labels, scores))\n    print('AUC             %0.2f' % sklm.roc_auc_score(labels, probs[:,1]))\n    print('Macro precision %0.2f' % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0))\n    print('Macro recall    %0.2f' % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0))\n    print(' ')\n    print('           Positive      Negative')\n    print('Num case   %6d' % metrics[3][0] + '        %6d' % metrics[3][1])\n    print('Precision  %6.2f' % metrics[0][0] + '        %6.2f' % metrics[0][1])\n    print('Recall     %6.2f' % metrics[1][0] + '        %6.2f' % metrics[1][1])\n    print('F1         %6.2f' % metrics[2][0] + '        %6.2f' % metrics[2][1])"
    },
    "executionTime": "2020-09-17T12:45:45.529Z"
   },
   {
    "cell": {
     "executionCount": 38,
     "executionEventId": "42aedba3-0162-450a-a6c9-c80b3a378208",
     "hasError": false,
     "id": "adead53d-4692-40c5-9f65-cc3ed25a4344",
     "outputs": [
      {
       "data": {
        "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n                     weights='uniform')"
       },
       "execution_count": 38,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "d0861f4f-adda-4b34-a6ac-21bc540c0706",
     "text": "#Start with the K-Nearest Neighbors\nK_n = KNeighborsClassifier()\nK_n.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:45:45.573Z"
   },
   {
    "cell": {
     "executionCount": 39,
     "executionEventId": "923d7c38-ae44-4dfd-9e6d-374ab5070290",
     "hasError": false,
     "id": "defa57a4-05d5-4ca9-a661-002e72ab52f1",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive         6                46\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.73\nAUC             0.63\nMacro precision 0.79\nMacro recall    0.55\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.86          0.72\nRecall       0.12          0.99\nF1           0.20          0.84\n"
      }
     ],
     "persistentId": "c2795e5d-b7bb-4293-9dc7-9c2a49a7c940",
     "text": "#Now let's see how this model performs\nprob_K = K_n.predict_proba(X_test)\nprint_metrics(y_test, prob_K, 0.3) "
    },
    "executionTime": "2020-09-17T12:45:45.595Z"
   },
   {
    "cell": {
     "executionCount": 40,
     "executionEventId": "9e12b978-25b4-454a-8c30-1ab9df3ddd33",
     "hasError": false,
     "id": "56e4a53d-8ff2-4d2c-a25c-73dfe1abd673",
     "outputs": [
      {
       "data": {
        "text/plain": "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=3, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=None, splitter='best')"
       },
       "execution_count": 40,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "06af9b72-862d-448e-b043-3ee90c716623",
     "text": "#Continue with the decision tree with a max number of layers of 3\nD_tree = DecisionTreeClassifier(max_depth = 3)\nD_tree.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:45:45.640Z"
   },
   {
    "cell": {
     "executionCount": 41,
     "executionEventId": "03576999-9201-494a-8bb5-b8d1be417695",
     "hasError": false,
     "id": "7dbc612b-48a6-4f80-8393-9ef3add86809",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        18                34\nActual negative         1               119\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.80\nAUC             0.67\nMacro precision 0.86\nMacro recall    0.67\n \n           Positive      Negative\nNum case       52           120\nPrecision    0.95          0.78\nRecall       0.35          0.99\nF1           0.51          0.87\n"
      }
     ],
     "persistentId": "28f7d54d-789a-400d-8d01-f9d6591ac1c1",
     "text": "#let's see it's performance\nprob_D = D_tree.predict_proba(X_test)\nprint_metrics(y_test, prob_D, 0.3)"
    },
    "executionTime": "2020-09-17T12:45:45.701Z"
   },
   {
    "cell": {
     "executionCount": 42,
     "executionEventId": "28005e38-f9fe-4103-bd13-911de02db390",
     "hasError": false,
     "id": "32109598-a7fb-427c-8ada-dc8f14e70f1c",
     "outputs": [
      {
       "data": {
        "text/plain": "LogisticRegression(C=1.0, class_weight={0: 0.45, 1: 0.55}, dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)"
       },
       "execution_count": 42,
       "metadata": {},
       "output_type": "execute_result"
      }
     ],
     "persistentId": "ad2a4ac7-b2b3-4b5c-a71c-8dc8141d0045",
     "text": "# logistic_regression model\nlogistic_mod = LogisticRegression(C = 1.0, class_weight = {0:0.45, 1:0.55}) \nlogistic_mod.fit(X_train, y_train)"
    },
    "executionTime": "2020-09-17T12:45:45.753Z"
   },
   {
    "cell": {
     "executionCount": 43,
     "executionEventId": "2f5e74d7-8e24-408f-8047-f95f79d93a36",
     "hasError": false,
     "id": "1e5ae5cd-d655-4bfd-8351-a8652924be80",
     "outputs": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "                 Confusion matrix\n                 Score positive    Score negative\nActual positive        16                36\nActual negative         0               120\n\nDETAILS ACCURACY, PRECISION AND RECALL\nAccuracy        0.79\nAUC             0.70\nMacro precision 0.88\nMacro recall    0.65\n \n           Positive      Negative\nNum case       52           120\nPrecision    1.00          0.77\nRecall       0.31          1.00\nF1           0.47          0.87\n"
      }
     ],
     "persistentId": "0e345bdb-4b34-4f8a-bb74-05868f5a3358",
     "text": "#Check the performance of the logistic regression model\nprobabilities = logistic_mod.predict_proba(X_test)\nprint_metrics(y_test, probabilities, 0.3)  "
    },
    "executionTime": "2020-09-17T12:45:45.770Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "uuid": "d9644b56-7a88-4150-9d8e-baed25bdd7c1"
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
